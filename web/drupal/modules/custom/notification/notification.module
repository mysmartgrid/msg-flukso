<?php

/**
 * This module manages Flukso devices' event notifications.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

define('NO_HEARTBEAT_EVENT_ID',          1);
define('CORRUPTED_HEARTBEAT_EVENT_ID',   2);
define('ANY_HEARTBEAT_FAILURE_EVENT_ID', 3);
define('PEAK_CONSUMPTION_EVENT_ID',      4);

define('HOUR_UNIT_ID',      2);
define('WATT_HOUR_UNIT_ID', 4);


function notification_help($path, $arg) {

  $output = '';

  switch ($path) {
    case "admin/help#notification":
      $output = '<p>'.t("Allows the users to manage device event notifications.").'</p>';
      break;
  }

  return $output;
}

function notification_perm() {
  return array('manage notifications');
}

function notification_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function notification_menu() {

  $items = array();

  $items['notification/list'] = array(
    'title'             => 'Event Notifications',
    'page callback'     => 'notification_list_page',
    'access arguments'  => array('manage notifications'),
    'type'              => MENU_NORMAL_ITEM
  );

  $items['notification/delete'] = array(
    'title'             => $items['notification/list']['title'],
    'page callback'     => 'notification_delete',
    'page arguments'    => array(2, 3),
    'access arguments'  => array('manage notifications'),
    'type'              => MENU_CALLBACK
  );

  $items['notification/register'] = array(
    'title'             => 'Event Notification Registration',
    'page callback'     => 'notification_registration_page',
    'access arguments'  => array('manage notifications'),
    'type'              => MENU_CALLBACK
  );

  $items['notification/edit'] = array(
    'title'             => 'Event Notification Edition',
    'page callback'     => 'notification_edition_page',
    'page arguments'    => array(2, 3),
    'access arguments'  => array('manage notifications'),
    'type'              => MENU_CALLBACK
  );

  $items['newsletter'] = array(
    'title'             => 'Newsletter',
    'page callback'     => 'notification_newsletter_page',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Event notification deletion callback.
 *
 * @param $device    The monitored device.
 * @param $event_id  The event id.
 * @return the events list page.
 */
function notification_delete($device, $event_id) {

  _notification_delete($device, $event_id);
  return notification_list_page();
}

/**
 * Builds the event registration page.
 *
 * @return the event registration page.
 */
function notification_registration_page() {
  return drupal_get_form('notification_registration_form');
}

/**
 * Builds the event notification edition page.
 *
 * @param $device    The monitored device.
 * @param $event_id  The event id.
 * @return the event notification edition page.
 */
function notification_edition_page($device, $event_id) {

  $sql = "
    SELECT
      e.id AS event_id,
      e.name AS event_name,
      n.device AS device,
      d.serial AS serial,
      n.email AS email,
      n.min_interval AS min_interval,
      n.limit_up AS limit_up,
      n.unit_id
    FROM
      {event} e,
      {notification} n,
      {logger_devices} d
    WHERE
      d.device = '%s' AND
      d.device = n.device AND
      n.event_id = e.id AND
      e.id = %d";

  $notification = db_fetch_object(db_query($sql, $device, $event_id));

  return drupal_get_form('notification_edition_form', $notification);
}

/**
 * Builds the events list page.
 *
 * @return the events list page.
 */
function notification_list_page() {

  $sql = "
    SELECT
      d.serial AS serial,
      e.name AS event_name,
      n.email AS email,
      IF(n.last_sent = 0, NULL, FROM_UNIXTIME(n.last_sent + u.timezone)) AS last_sent,
      n.limit_up AS limit_up,
      un.symbol AS unit,
      d.device AS device,
      e.id AS event_id
    FROM
      {users} u,
      {logger_devices} d,
      {notification} n,
      {event} e,
      {unit} un
    WHERE
      u.uid = d.uid AND
      d.uid = %d AND
      d.device = n.device AND
      n.event_id = e.id AND
      n.unit_id = un.id";

  $header = array(
    array('data' => t('Device'),        'field' => 'serial',     'sort' => 'ASC'),
    array('data' => t('Event'),         'field' => 'event_name', 'sort' => 'ASC'),
    array('data' => t('Target e-mail'), 'field' => 'email'),
    array('data' => t('Sent'),          'field' => 'last_sent'),
    array('data' => t('Operation'))
  );

  global $user;
  $result = db_query($sql, $user->uid, tablesort_sql($header));

  $rows = array();
  while ($object = db_fetch_array($result)) {

    $row = array();
    $row['serial'] = $object['serial'];
    $row['event_name'] = t($object['event_name']) . '<br>(' . $object['limit_up'] . ' ' . t($object['unit']) . ')';
    $row['email'] = $object['email'];
    $row['last_sent'] = $object['last_sent'];
    $row[] = l(t('Remove'), 'notification/delete/' . $object['device'] . '/' . $object['event_id']) . '<br>' .
             l(t('Edit'),   'notification/edit/'   . $object['device'] . '/' . $object['event_id']);

    $rows[] = $row;
  }

  $caption = '<p>' . l(t('Register Notification'), 'notification/register') . '</p>';

  return theme('table', $header, $rows, array(), $caption);
}

/**
 * Builds the newsletter registration page.
 *
 * @return the newsletter registration page.
 */
function notification_newsletter_page() {

  $output = '<div><p>' .
    t('We would also like to keep up to date via email. Please use the form below to sign up for our newsletter.') .
    '<br><br></p></div>';

  $output .= drupal_get_form('notification_newsletter_form');

  $output .= '<div><p><br><br><br>' .
    t('Of course, we do not share this information with anyone at any given time. If you want to unsubscribe, please click the appropriate link found at the end of each newsletter.') .
    '</p></div>';

  return $output;
}

function notification_registration_form() {

  global $user;

  $form['email'] = array(
    '#type'           => 'textfield',
    '#title'          => t('E-mail'),
    '#description'    => t('Enter the e-mail to which the notification will be sent.'),
    '#maxlength'      => 64,
    '#size'           => 20,
    '#default_value'  => $user->mail,
    '#element_validate'  => array('notification_email_validate'),
  );

  $form['device'] = array(
    '#type'           => 'select',
    '#title'          => t('Serial Number'),
    '#description'    => t('Select the serial number of the monitored device.'),
    '#options'        => _notification_get_devices_options()
  );

  $form['events'] = array(
    '#type'           => 'fieldset',
    '#title'          => t('Events'),
    '#prefix'         => '<br>'
  );

  $form['events']['event_id1'] = array(
    '#title'          => _notification_get_event_name(1),
    '#type'           => 'checkbox',
    '#default_value'  => FALSE,
    '#prefix'         => '<br><table width="100%"><tr><td>',
    '#suffix'         => '</td>',
    '#attributes'     => array(
      'onchange' => '
        limit_up1 = document.getElementById("limit_up1");
        limit_up1.readOnly = !this.checked;
        limit_up1.value = this.checked ? 2 : "";
        unit_id1 = document.getElementById("unit_id1");
        unit_id1.value = ' . HOUR_UNIT_ID . ';',
    ),
  );

  $form['events']['limit_up1'] = array(
    '#type'              => 'textfield',
    '#description'       => t('Here you can set the maximum heartbeat delay. Beyond this limit, the device is considered faulty.'),
    '#maxlength'         => 9,
    '#size'              => 12,
    '#prefix'            => '<td>',
    '#suffix'            => '</td>',
    '#related_event_id'  => NO_HEARTBEAT_EVENT_ID,
    '#element_validate'  => array('notification_limit_up_validate'),
    '#attributes'        => array(
      'onfocus' => '
        event_id1 = document.getElementById("event_id1");
        this.readOnly = !event_id1.checked;',
    ),
  );

  $form['events']['unit_id1'] = array(
    '#type'           => 'select',
    '#prefix'         => '<td width="200">',
    '#suffix'         => '</td></tr>',
    '#default_value'  => HOUR_UNIT_ID,
    '#required'       => TRUE,
    '#options'        => _notification_get_units_options(NO_HEARTBEAT_EVENT_ID),
  );

  $form['events']['event_id3'] = array(
    '#title'          => _notification_get_event_name(3),
    '#type'           => 'checkbox',
    '#default_value'  => FALSE,
    '#prefix'         => '<tr><td>',
    '#suffix'         => '</td>',
    '#attributes'     => array(
      'onchange' => '
        limit_up3 = document.getElementById("limit_up3");
        limit_up3.readOnly = !this.checked;
        limit_up3.value = this.checked ? 2 : "";
        unit_id3 = document.getElementById("unit_id3");
        unit_id3.value = ' . HOUR_UNIT_ID . ';',
    ),
  );

  $form['events']['limit_up3'] = array(
    '#type'              => 'textfield',
    '#description'       => $form['events']['limit_up1']['#description'],
    '#maxlength'         => 9,
    '#size'              => 12,
    '#prefix'            => '<td>',
    '#suffix'            => '</td>',
    '#related_event_id'  => ANY_HEARTBEAT_FAILURE_EVENT_ID,
    '#element_validate'  => array('notification_limit_up_validate'),
    '#attributes'        => array(
      'onfocus' => '
        event_id3 = document.getElementById("event_id3");
        this.readOnly = !event_id3.checked;',
    ),
  );

  $form['events']['unit_id3'] = array(
    '#type'           => 'select',
    '#prefix'         => '<td width="200">',
    '#suffix'         => '</td></tr>',
    '#default_value'  => HOUR_UNIT_ID,
    '#required'       => TRUE,
    '#options'        => _notification_get_units_options(ANY_HEARTBEAT_FAILURE_EVENT_ID),
  );

  $form['events']['event_id4'] = array(
    '#title'          => _notification_get_event_name(4),
    '#type'           => 'checkbox',
    '#default_value'  => FALSE,
    '#prefix'         => '<tr><td>',
    '#suffix'         => '</td>',
    '#attributes'     => array(
      'onchange' => '
        limit_up4 = document.getElementById("limit_up4");
        limit_up4.readOnly = !this.checked;
        limit_up4.value = this.checked ? 5000 : "";
        unit_id4 = document.getElementById("unit_id4");
        unit_id4.value = ' . WATT_HOUR_UNIT_ID . ';',
    ),
  );

  $form['events']['limit_up4'] = array(
    '#type'             => 'textfield',
    '#description'      => t('Here you can set the maximum electricity consumption. Beyond this limit, the device is considered faulty.'),
    '#maxlength'        => 12,
    '#size'             => 12,
    '#prefix'           => '<td>',
    '#suffix'           => '</td>',
    '#related_event_id' => PEAK_CONSUMPTION_EVENT_ID,
    '#element_validate' => array('notification_limit_up_validate'),
    '#attributes'       => array(
      'onfocus' => '
        event_id4 = document.getElementById("event_id4");
        this.readOnly = !event_id4.checked;',
    ),
  );

  $form['events']['unit_id4'] = array(
    '#type'           => 'select',
    '#prefix'         => '<td width="200">',
    '#suffix'         => '</td></tr>',
    '#default_value'  => WATT_HOUR_UNIT_ID,
    '#required'       => TRUE,
    '#options'        => _notification_get_units_options(PEAK_CONSUMPTION_EVENT_ID),
  );

  $form['events']['event_id2'] = array(
    '#title'          => _notification_get_event_name(2),
    '#type'           => 'checkbox',
    '#default_value'  => FALSE,
    '#prefix'         => '<tr><td>',
    '#suffix'         => '</td><td></td></tr></table>'
  );

  $form['min_interval'] = array(
    '#type'           => 'select',
    '#title'          => t('Amount of Notifications'),
    '#description'    => t('How often do you want to receive notifications, when the same event occurs several times consecutively?'),
    '#default_value'  => 0,
    '#required'       => TRUE,
    '#options'        => _notification_get_frequency_options(),
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Save'),
  );

  return $form;
}

function notification_edition_form(&$form_state, $notification) {

  $form['device'] = array(
    '#type'              => 'hidden',
    '#required'          => TRUE,
    '#default_value'     => $notification->device,
  );

  $form['event_id'] = array(
    '#type'              => 'hidden',
    '#default_value'     => $notification->event_id,
  );

  $form['event_name'] = array(
    '#type'              => 'textfield',
    '#title'             => t('Event'),
    '#required'          => TRUE,
    '#default_value'     => t($notification->event_name),
    '#attributes'        => array('readOnly' => 'true')
  );

  $form['serial'] = array(
    '#type'              => 'textfield',
    '#title'             => t('Serial Number'),
    '#required'          => TRUE,
    '#default_value'     => $notification->serial,
    '#attributes'        => array('readOnly' => 'true')
  );

  $form['email'] = array(
    '#type'              => 'textfield',
    '#title'             => t('E-mail'),
    '#description'       => t('Enter the e-mail to which the notification will be sent.'),
    '#required'          => TRUE,
    '#maxlength'         => 64,
    '#size'              => 20,
    '#default_value'     => $notification->email,
    '#element_validate'  => array('notification_email_validate'),
  );

  switch ($notification->event_id) {
    case NO_HEARTBEAT_EVENT_ID:
    case ANY_HEARTBEAT_FAILURE_EVENT_ID:
      $form['limit_up'] = array(
        '#type'              => 'textfield',
        '#title'             => t('Maximum Delay'),
        '#description'       => t('Here you can set the maximum heartbeat delay. Beyond this limit, the device is considered faulty.'),
        '#required'          => TRUE,
        '#maxlength'         => 9,
        '#size'              => 12,
        '#prefix'            => '<table border="0"><tr><td>',
        '#suffix'            => '</td>',
        '#default_value'     => $notification->limit_up,
        '#element_validate'  => array('notification_limit_up_validate'),
      );
      break;

    case PEAK_CONSUMPTION_EVENT_ID:
      $form['limit_up'] = array(
        '#type'              => 'textfield',
        '#title'             => t('Maximum Consumption'),
        '#description'       => t('Here you can set the maximum electricity consumption. Beyond this limit, the device is considered faulty.'),
        '#required'          => TRUE,
        '#maxlength'         => 9,
        '#size'              => 12,
        '#prefix'            => '<table><tr><td>',
        '#suffix'            => '</td>',
        '#default_value'     => $notification->limit_up,
        '#element_validate'  => array('notification_limit_up_validate'),
      );
      break;
  }

  if ($notification->event_id <> CORRUPTED_HEARTBEAT_EVENT_ID) {

    $form['unit_id'] = array(
      '#type'           => 'select',
      '#required'       => TRUE,
      '#prefix'         => '<td width="150">',
      '#suffix'         => '</td></tr></table>',
      '#default_value'  => $notification->unit_id,
      '#options'        => _notification_get_units_options($notification->event_id),
    );
  }

  $form['min_interval'] = array(
    '#type'           => 'select',
    '#title'          => t('Amount of Notifications'),
    '#description'    => t('How often do you want to receive notifications, when the same event occurs several times consecutively?'),
    '#required'       => TRUE,
    '#options'        => _notification_get_frequency_options(),
    '#default_value'  => $notification->min_interval,
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function notification_newsletter_form() {

  $form['email'] = array(
    '#type'             => 'textfield',
    '#title'            => t('E-mail'),
    '#description'      => t('Enter your e-mail.'),
    '#maxlength'        => 64,
    '#size'             => 20,
    '#required'         => 1,
    '#element_validate' => array('notification_email_validate'),
  );

  $form['firstname'] = array(
    '#type'             => 'textfield',
    '#title'            => t('First Name'),
    '#description'      => t('Enter your first name.'),
    '#maxlength'        => 20,
    '#required'         => 1,
    '#size'             => 20,
  );

  $form['lastname'] = array(
    '#type'             => 'textfield',
    '#title'            => t('Last Name'),
    '#description'      => t('Enter your last name.'),
    '#maxlength'        => 20,
    '#required'         => 1,
    '#size'             => 20,
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t("Subscribe"),
  );

  return $form;
}

function notification_email_validate($field, $form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_error($field, t('Invalid e-mail.'));
  }
}

function notification_limit_up_validate($field, $form_state) {

  //Checkbox field
  $related_event_id = $field['#related_event_id'];
  $selected = $form_state['values']["event_id$related_event_id"];

  //If selected
  if ($selected) {

    $limit_up = $form_state['values']["limit_up$related_event_id"];
    $unit_id = $form_state['values']["unit_id$related_event_id"];

    $factor = db_result(db_query("SELECT factor FROM {unit} un WHERE id = %d", $unit_id));
    $converted_limit = $limit_up * $factor;

    if (($related_event_id == NO_HEARTBEAT_EVENT_ID || $related_event_id == ANY_HEARTBEAT_FAILURE_EVENT_ID) &&
        $converted_limit < 30 * MINUTE) {

      form_error($field, t('Delay time can not be less than 30 minutes.'));

    } else if ($related_event_id == PEAK_CONSUMPTION_EVENT_ID && $converted_limit <= 0) {

      form_error($field, t('Peak consumption can not be lesser than 0 watt / min.'));
    }
  }
}

function notification_registration_form_submit($form, &$form_state) {

  $device       = $form_state['values']['device'];
  $email        = $form_state['values']['email'];
  $min_interval = $form_state['values']['min_interval'];

  $event_id1 = $form_state['values']['event_id1'];
  $limit_up1 = $form_state['values']['limit_up1'];
  $unit_id1  = $form_state['values']['unit_id1'];

  $event_id2 = $form_state['values']['event_id2'];

  $event_id3 = $form_state['values']['event_id3'];
  $limit_up3 = $form_state['values']['limit_up3'];
  $unit_id3  = $form_state['values']['unit_id3'];

  $event_id4 = $form_state['values']['event_id4'];
  $limit_up4 = $form_state['values']['limit_up4'];
  $unit_id4  = $form_state['values']['unit_id4'];

  if ($event_id1) {
    _notification_delete($device, 1);
    _notification_insert($device, 1, $email, $min_interval, $limit_up1, $unit_id1);
  }

  if ($event_id2) {
    _notification_delete($device, 2);
    _notification_insert($device, 2, $email, $min_interval, 0, 0);
  }

  if ($event_id3) {
    _notification_delete($device, 3);
    _notification_insert($device, 3, $email, $min_interval, $limit_up3, $unit_id3);
  }

  if ($event_id4) {
    _notification_delete($device, 4);
    _notification_insert($device, 4, $email, $min_interval, $limit_up4, $unit_id4);
  }

  $form_state['redirect'] = 'notification/list';
}

function notification_edition_form_submit($form, &$form_state) {

  $device       = $form_state['values']['device'];
  $email        = $form_state['values']['email'];
  $event_id     = $form_state['values']['event_id'];
  $min_interval = $form_state['values']['min_interval'];

  if ($event_id == CORRUPTED_HEARTBEAT_EVENT_ID) {
    $limit_up = 0;
    $unit_id = 1;

  } else {
    $limit_up = $form_state['values']['limit_up'];
    $unit_id = $form_state['values']['unit_id'];
  }

  _notification_delete($device, $event_id);
  _notification_insert($device, $event_id, $email, $min_interval, $limit_up, $unit_id);

  $form_state['redirect'] = 'notification/list';
}

function notification_newsletter_form_submit($form, &$form_state) {

  $email     = $form_state['values']['email'];
  $firstname = $form_state['values']['firstname'];
  $surname   = $form_state['values']['surname'];

  $url = 'http://www.eor.de/fileadmin/verwaltung/mysmartgrid.php' .
    '?email='     . urlencode($email) .
    '&firstname=' . urlencode($firstname) .
    '&surname='   . urlencode($surname);
  //For testing, include '&test=1'

  $request = drupal_http_request($url);
  $response = $request->data;

  if ($response == "RECORD_CREATED") {

    drupal_set_message(t('Almost Finished... We need to confirm your email address. To complete the subscription process, please click the link in the email we just sent you.'));

  } else if ($response == "RECORD_UPDATED") {

    drupal_set_message(t('The e-mail address was already present in the database. The user data has been updated.'));

  } else {

    drupal_set_message(t('Our apologies. The newsletter subscription is temporarily unavailable. Please, try again later.'));

    _notification_send_system_error_email('newsletter', $response, $url);
  }

  return $output;
}

/**
 * Returns an event name.
 *
 * @param $event_id  The event id.
 * @return the event name.
 */
function _notification_get_event_name($event_id) {

  $sql = "SELECT name FROM {event} WHERE id = %d";
  $name = db_result(db_query($sql, $event_id));

  return t($name);
}

/**
 * Returns an array of user devices' serial numbers indexed by their respective
 * hash codes.
 *
 * @return the array of devices.
 */
function _notification_get_devices_options() {

  global $user;
  $sql = "SELECT serial, device FROM {logger_devices} WHERE uid = %d ORDER BY serial";
  $result = db_query($sql, $user->uid);

  $devices = array();
  while ($row = db_fetch_array($result)) {
    $devices[$row['device']] = $row['serial'];
  }

  return $devices;
}

/**
 * Returns an array of units associated with the informed event, indexed by their respective ids.
 * @param $event_id The event id.
 *
 * @return the array of units.
 */
function _notification_get_units_options($event_id) {

  $sql = "
    SELECT
      un.id,
      un.name
    FROM
      {unit} un,
      {event_unit} eu
    WHERE
      eu.event_id = %d AND
      eu.unit_id = un.id
    ORDER BY
      un.id";

  $result = db_query($sql, $event_id);

  $units = array();
  while ($row = db_fetch_array($result)) {
    $units[$row['id']] = t($row['name']);
  }

  return $units;
}

/**
 * Returns an array of notification frequencies indexed by their respective
 * time intervals in minutes.
 *
 * @return the array of frequencies.
 */
function _notification_get_frequency_options() {
  return array(
      0          => t('No limit, notify every single event'),
     30 * MINUTE => t('2 notifications per hour'),
      1 * HOUR   => t('1 notification per hour'),
     12 * HOUR   => t('2 notifications per day'),
      1 * DAY    => t('1 notification per day')
  );
}

/**
 * Deletes an event notification.
 *
 * @param $device    The monitored device.
 * @param $event_id  The event id.
 */
function _notification_delete($device, $event_id) {

  $sql = "
    DELETE FROM
      {notification}
    WHERE
      device = '%s' AND
      event_id = %d";

  db_query($sql, $device, $event_id);
}

/**
 * Registers an event notification.
 *
 * @param $device        The monitored device.
 * @param $event_id      The event id.
 * @param $email         The notification e-mail.
 * @param $min_interval  The minimum time interval between consecutive notifications of the same event.
 * @param $limit_up      An event-related maximum value.
 * @param $unit_id       The unit id.
 */
function _notification_insert($device, $event_id, $email, $min_interval, $limit_up, $unit_id) {

  $base_value = 0;

  //If event = Peak Consumption
  if ($event_id == 4) {

    $sql = "
      SELECT
        SUM(m.value) AS total
      FROM
        {logger_meters} m
      WHERE
        m.type   = '%s' AND
        m.device = '%s' ";

    //Note: the values are stored in unit 'watt'

    $result = db_fetch_object( db_query($sql, 'electricity', $device));

    $base_value = $result->total;
  }

  $sql = "
    INSERT INTO
      {notification} (device, event_id, email, min_interval, base_value, base_time, limit_up, unit_id, last_sent)
    VALUES
      ('%s', %d, '%s', %d, %d, %d, %f, %d, %d)";

  db_query($sql, $device, $event_id, $email, $min_interval, $base_value, time(), $limit_up, $unit_id, 0);
}

/**
 * Updates an event notification.
 *
 * @param $device    The monitored device.
 * @param $event_id  The event id.
 * @param $last_sent The timestamp when the latest email was sent.
 */
function _notification_update($device, $event_id, $last_sent) {

  $sql = "
    UPDATE
      {notification}
    SET
      last_sent = %d
    WHERE
      device = '%s' AND
      event_id = %d";

  db_query($sql, $last_sent, $device, $event_id);
}

function notification_cron() {

  $now = time();

  _notification_send_no_heartbeat_emails($now);
  _notification_send_corrupted_heartbeat_emails($now);
  _notification_send_any_heartbeat_failure_emails($now);
  _notification_send_peak_consumption_emails($now);
}

/**
 * Sends e-mails notifying users of "No Heartbeat" events.
 *
 * @param $now       The event checkup time.
 * @param $event_id  The actual event that is causing the notification to be sent.
 *                   It can be either "No Heartbeat" or "Any Heartbeat Failure".
 */
function _notification_send_no_heartbeat_emails($now, $event_id = 1) {

  $sql = "
    SELECT
      d.device AS device,
      n.event_id AS event_id,
      u.name AS user_name,
      n.email AS email,
      d.serial AS serial,
      FROM_UNIXTIME(d.access + u.timezone) AS event_time,
      ROUND((n.limit_up * un.factor / 60), 2) AS limit_up
    FROM
      {users} u,
      {logger_devices} d,
      {notification} n,
      {unit} un
    WHERE
      d.uid = u.uid AND
      d.device = n.device AND
      n.event_id = %d AND
      n.unit_id = un.id AND
      %d > (d.access + n.limit_up * un.factor) AND
      %d > (n.last_sent + n.limit_up * un.factor) AND
      %d > (n.last_sent + n.min_interval) AND
      NOT EXISTS(
        SELECT
          1
        FROM
          {logger_meters} m
        WHERE
          m.device = d.device AND
          m.corrupted <> 0
      )";

  $args = array($event_id, $now, $now, $now);

  //ATTENTION: Any change in the following message requires its translations to be redefined.
  $message = _notification_compose_error_email(
    "Your Flukso device (serial number: %serial) has not been sending " .
    "heartbeats for more than %limit_up minutes, since %event_time.",

    "Check your WLAN configuration and make sure that it remains active for " .
    "at least 1 hour per day. The device might be working fine, but it is " .
    "failing to send the heartbeats over the internet.");

  _notification_send_emails($message, $sql, $args);
}

/**
 * Sends e-mails notifying users of "Corrupted Heartbeat" events.
 *
 * @param $now       The event checkup time.
 * @param $event_id  The actual event that is causing the notification to be sent.
 *                   It can be either "Corrupted Heartbeat" or "Any Heartbeat Failure".
 */
function _notification_send_corrupted_heartbeat_emails($now, $event_id = CORRUPTED_HEARTBEAT_EVENT_ID) {

  $sql = "
    SELECT
      d.device AS device,
      n.event_id AS event_id,
      u.name AS user_name,
      n.email AS email,
      d.serial AS serial,
      FROM_UNIXTIME(m.corrupted + u.timezone) AS event_time
    FROM
      {users} u,
      {logger_devices} d,
      {logger_meters} m,
      {notification} n,
      {unit} un
    WHERE
      d.uid = u.uid AND
      d.device = n.device AND
      n.event_id = %d AND
      n.unit_id = un.id AND
      %d > (n.last_sent + n.min_interval) AND
      m.device = d.device AND
      m.corrupted <> 0";

  $args = array($event_id, $now);

  //ATTENTION: Any change in the following message requires its translations to be redefined.
  $message = _notification_compose_error_email(
    "Your Flukso device (serial number: %serial) has sent a heartbeat with " .
    "corrupted data at %event_time.");

  _notification_send_emails($message, $sql, $args);
}

/**
 * Sends e-mails notifying users of "Any Heartbeat Failure" events.
 *
 * @param $now  The event checkup time.
 */
function _notification_send_any_heartbeat_failure_emails($now) {

  _notification_send_no_heartbeat_emails($now, 3);
  _notification_send_corrupted_heartbeat_emails($now, 3);
}

/**
 * Sends em-mails notifying users of the occurrence of Peak Consumption events.
 *
 * @param $now  The event checkup time.
 */
function _notification_send_peak_consumption_emails($now) {

  $sql = "
    SELECT DISTINCT
      d.device AS device,
      d.serial AS serial,
      u.name AS user_name,
      u.timezone AS timezone,
      n.event_id AS event_id,
      n.email AS email,
      ROUND((n.limit_up * un.factor * 60), 2) AS limit_up,
      FROM_UNIXTIME(MAX(m.access) + u.timezone) AS event_time,
      (n.base_time + u.timezone) AS start_time,
      (SUM(m.value) - n.base_value) AS consumption,
      ((MAX(m.access) - n.base_time) / " . HOUR . ") AS elapsed_time
    FROM
      {users} u,
      {logger_devices} d,
      {logger_meters} m,
      {notification} n,
      {unit} un
    WHERE
      d.uid = u.uid AND
      d.device = n.device AND
      n.event_id = %d AND
      n.unit_id = un.id AND
      %d > (n.last_sent + n.min_interval) AND
      m.device = d.device AND
      m.type = '%s'
    GROUP BY
      d.device
    HAVING
      consumption / elapsed_time > limit_up";

  $args = array(PEAK_CONSUMPTION_EVENT_ID, $now, 'electricity');

  //ATTENTION: Any change in the following message requires its translations to be redefined.
  $message = _notification_compose_email(
    "At %event_time, your Flukso device (serial number: %serial) has registered " .
    "an electricity consumption above the limit of %limit_up watt per hour.<br><br> " .

    "The device's latest measurements are listed in the following.<br><br> " .
    "!latest_measurements");

  $notified = _notification_send_emails($message, $sql, $args);

  _notification_register_power_consumption($notified);
}

/**
 * Registers the power consumption of monitored devices every hours and after
 * notifications are sent.
 *
 * @param $notified  The array of devices which have just been notified.
 */
function _notification_register_power_consumption($notified) {

  $now = time();
  //Note: the values are stored in unit 'watt' 

  if (count($notified) > 0) {

    $sql = "
      UPDATE
        {notification}
      SET
        base_time = %d,
        base_value = (
          SELECT
            SUM(m.value)
          FROM
            {logger_meters} m
          WHERE
            m.type = '%s' AND
            m.device = notification.device)
      WHERE
        event_id = %d AND
        device IN ('%s')";

    db_query($sql, $now, 'electricity', PEAK_CONSUMPTION_EVENT_ID, implode("', '", $notified));
  }

  $sql = "
    UPDATE
      {notification}
    SET
      base_time = (base_time + " . HOUR . " * ((%d - base_time) % " . HOUR . ")),
      base_value = (
        SELECT
          SUM(m.value)
        FROM
          {logger_meters} m
        WHERE
          m.type = '%s' AND
          m.device = notification.device)
    WHERE
      event_id = %d AND
      (%d - base_time) > " . HOUR;

  db_query($sql, $now, 'electricity', PEAK_CONSUMPTION_EVENT_ID, $now);
}

/**
 * Notifies the administrator of the occurrence of a system error.
 *
 * @param $context     The page or function where the error occurred.
 * @param $error_code  The error code.
 * @param $url         The URL that triggered the error (if any).
 */
function _notification_send_system_error_email($context, $error_code, $url) {

  //ATTENTION: Any change in the following message requires its translations to be redefined.

  $error_descriptions['newsletter']['ERROR_INVALID_DATA'] =
    'Invalid e-mail address.';

  $error_descriptions['newsletter']['ERROR_INSERT_FAILED'] =
    'Error while inserting the record in mySQL database.';

  $error_descriptions['newsletter']['ERROR_UPDATE_FAILED'] =
    'Error while updating the record in mySQL database.';

  $message =
    "<p>Dear Administrator " .
    "<br> &nbsp;<br></p> " .

    "<p>The following system error has been reported.</p> " .
    "<p>Error code: %error_code<br> " .
    "Description: %description<br> " .
    "Related URL: %url</p> " .

    "<p>&nbsp;<br> " .
    "<p>mySmartGrid System</p>";

  $variables['%error_code'] = $error_code;
  $variables['%description'] = t($error_descriptions[$context][$error_code]);
  $variables['%url'] = $url;

  $body = t($message, $variables);
  $subject = t('System Error');
  $email = 'notifications@mysmartgrid.de';

  _notification_send_email($email, $subject, $body);
}

/**
 * Composes an e-mail that notifies a general event.
 *
 * @param $description  The event description.
 * @param $complement   Complementary information about the error.
 * @return the e-mail message.
 */
function _notification_compose_email($description, $complement = NULL) {

  //ATTENTION: Any change in the following message requires its translations to be redefined.

  $complement = $complement == NULL? "" : "<p>$complement</p> ";

  return
    "<p>Dear user %user_name " .
    "<br> &nbsp;<br></p> " .

    "<p>$description</p> " .

    $complement .

    "<p>If you want to stop receiving this notification, please remove it from your " .
    "<a href='!base_url/notification/list'>event notifications list</a>.</p> " .

    "<p>&nbsp;<br> " .
    "Best Regards,</p> " .
    "<p>mySmartGrid Team</p>";
}

/**
 * Composes an e-mail that notifies an error event.
 *
 * @param $description    The error description.
 * @param $recommendation The recommendation for the user of how to solve the problem.
 * @return the e-mail message.
 */
function _notification_compose_error_email($description, $recommendation = NULL) {

  $recommendation = $recommendation == NULL? "": "<li>$recommendation<br><br>";

  //ATTENTION: Any change in the following message requires its translations to be redefined.
  return _notification_compose_email($description,

    "In order to identify and solve the problem, please take the following actions. " .
    "<ul> " .
      $recommendation .

      "<li>Check if the device complies with the " .
      "<a href='!base_url/content/installationsanleitung-des-fluksos'>Flukso installation instructions</a>. " .
      "It might be improperly installed or misconfigured.<br><br> " .

      "<li>Visit our <a href='!base_url/content/h&#228;ufige-fragen-und-antworten'>FAQ</a>, " .
      "and read the answers to questions made by other users in similar situations.<br><br> " .

      "<li>In case the problem persists, please send an e-mail to msg-support@itwm.fhg.de. " .
    "</ul>");
}

/**
 * Sends event notification e-mails to notifiable users.
 *
 * @param $message    The e-mail message.
 * @param $sql        The SQL statement for selecting the events.
 *                    Each field is mapped to a message variable.
 * @param $args       The SQL arguments.
 */
function _notification_send_emails($message, $sql, $args = array()) {

  $devices = array();

  global $base_url;
  $variables = array();
  $variables["!base_url"] = $base_url;

  $result = db_query($sql, $args);

  while ($object = db_fetch_array($result)) {

    $devices[] = $object['device'];

    foreach ($object as $key => $value) {
      $variables["%$key"] = $value;
    }

    if (strpos($message, 'latest_measurements')) {

      $variables['!latest_measurements'] = _notification_query_latest_measurements(
          $object['device'],
          $object['start_time'],
          $object['timezone']);
    }

    $subject = t('Event Notification');

    $logo = "<p><img src='$base_url/sites/all/themes/mysmartgrid/logo.png'/></p>";
    $body = t($message, $variables) . $logo;

    _notification_send_email($object['email'], $subject, $body);

    _notification_update($object['device'], $object['event_id'], time());
  }

  return $devices;
}

/**
 * Returns a list of measurements performed by all sensors of the informed device.
 *
 * @param $device     The device's hash code.
 * @param $start_time The start time of the period being searched.
 * @param $offset     The user timezone offset.
 * @return an HTML list of measurements.
 */
function _notification_query_latest_measurements($device, $start_time, $offset) {

  $measurements = logger_query_device_measurements('hour', $device, $offset);
  $list = '';
  $sum = 0;

  foreach ($measurements as $meter => $data) {
    foreach ($data as $function => $values) {
      $sublist = NULL;

      foreach ($values as $timestamp => $value) {

        if ($value > 0 && $timestamp >= $start_time) {

          $sum += $value;

          $sublist = $sublist? $sublist : t('Sensor') . ': ' . $function . '<br> ';
          $sublist .= date('Y-m-d H:i', $timestamp) . ' - ' .
            number_format($value, 2, '.', '') . ' ' . t('watt') . '<br> ';
        }
      }
      $list .= $sublist;
    }
  }

  if ($sum > 0) {
    $tabs = str_repeat('&nbsp', 25);
    $list .= '--------------------------------------------- <br>' .
      "Sum$tabs " . number_format($sum, 2, '.', '') . ' ' . t('watt') . ' <br>';
  }

  return $list;
}

/**
 * Sends a notification e-mail.
 *
 * @param $email    The e-mail address.
 * @param $subject  The e-mail subject.
 * @param $body     The e-mail body.
 */
function _notification_send_email($email, $subject, $body) {

  global $language;

  $params = array(
    'subject' => $subject,
    'body' => $body
  );

  drupal_mail('notification', 'notice', $email, $language, $params);
}

function notification_mail($key, &$message, $params) {

  $message['headers']['Content-Type'] = "text/html; charset=UTF-8";
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}