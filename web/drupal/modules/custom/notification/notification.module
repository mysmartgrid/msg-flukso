<?php

/**
 * This module manages Flukso devices' event notifications.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

function notification_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#notification":
      $output = '<p>'.t("Allows the users to manage device event notifications.").'</p>';
      break;
  }
  return $output;
}

function notification_perm() {
  return array('manage notifications');
}

function notification_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function notification_menu() {

  $items = array();

  $items['notification_list'] = array(
    'title'             => 'Event Notifications',
    'page callback'     => 'notification_list_page',
    'access arguments'  => array('manage notifications'),
    'type'              => MENU_NORMAL_ITEM
  );

  $items['notification_delete'] = array(
    'title'             => $items['notification_list']['title'],
    'page callback'     => 'notification_delete',
    'page arguments'    => array(1, 2),
    'access arguments'  => array('manage notifications'),
    'type'              => MENU_CALLBACK
  );

  $items['notification_register'] = array(
    'title'             => 'Event Notification Registration',
    'page callback'     => 'notification_register_page',
    'access arguments'  => array('manage notifications'),
    'type'              => MENU_CALLBACK
  );

  return $items;
}

/**
 * Builds the event registration page.
 *
 * @return the event registration page.
 */
function notification_register_page() {
  $output .= drupal_get_form('notification_register_form');
  return $output;
}

/**
 * Builds the events list page.
 *
 * @return the events list page.
 */
function notification_list_page() {

  $sql = "
    SELECT
      d.serial AS serial,
      e.name AS event_name,
      n.email AS email,
      n.limit_up AS limit_up,
      d.device AS device,
      e.id AS event_id
    FROM
      {logger_devices} d,
      {notification} n,
      {event} e
    WHERE
      d.uid = %d AND
      d.device = n.device AND
      n.event_id = e.id";

  $header = array(
    array('data' => t('Device'),        'field' => 'serial',     'sort' => 'ASC'),
    array('data' => t('Event'),         'field' => 'event_name', 'sort' => 'ASC'),
    array('data' => t('Target e-mail'), 'field' => 'email'),
    array('data' => t('Operation'))
  );

  global $user;
  $result = db_query($sql, $user->uid, tablesort_sql($header));

  $rows = array();
  while ($object = db_fetch_array($result)) {

    $row = array();
    $row['serial'] = $object['serial'];
    $row['event_name'] = _notification_format_event_name($object['event_id'], $object['event_name'], $object['limit_up']);
    $row['email'] = $object['email'];
    $row[] = l(t('Remove'), 'notification_delete/' . $object['device'] . '/' . $object['event_id']);

    $rows[] = $row;
  }

  $caption = '<p>' . l(t('Register Notification'), 'notification_register') . '</p>';

  $output .= theme('table', $header, $rows, array(), $caption);
  return $output;
}

/**
 * Formats an event name to be shown in a web page.
 *
 * @param $event_id   The event id.
 * @param $event_name The event name.
 * @param $limit_up   The event related maximum value.
 * @return the event formatted name.
 */
function _notification_format_event_name($event_id, $event_name, $limit_up) {

  $name = t($event_name);
  if ($event_id == 1 || $event_id == 3) {
    $name .= " (in $limit_up min)";

  } else if ($event_id == 4) {
    $name .= " ($limit_up watts)";
  }
  return $name;
}

/**
 * Returns an array of user devices' serial numbers indexed by their respective
 * hash codes.
 *
 * @return the array of devices.
 */
function _notification_get_devices_options() {

  global $user;
  $sql = "SELECT serial, device FROM {logger_devices} WHERE uid = %d ORDER BY serial";
  $result = db_query($sql, $user->uid);

  $devices = array();
  while ($row = db_fetch_array($result)) {
    $devices[$row['device']] = $row['serial'];
  }

  return $devices;
}

/**
 * Returns an array of translated event names.
 *
 * @return the array of event names.
 */
function _notification_get_events_options() {

  $sql = "SELECT id, name FROM {event} ORDER BY id";
  $result = db_query($sql);

  $events = array();
  while ($row = db_fetch_array($result)) {
    $events[$row['id']] = t($row['name']);
  }

  return $events;
}

function notification_register_form() {

  global $user;

  $form['email'] = array(
    '#type'           => 'textfield',
    '#description'    => t('Enter the e-mail to which the notification will be sent.'),
    '#maxlength'      => 64,
    '#size'           => 20,
    '#default_value'  => $user->mail
  );

  $form['device'] = array(
    '#type'         => 'select',
    '#description'  => t('Select the serial number of the monitored device.'),
    '#options'      => _notification_get_devices_options()
  );

  $form['event_id'] = array(
    '#type'           => 'select',
    '#description'    => t('Select the event to be detected and notified.'),
    '#options'        => _notification_get_events_options(),
    '#default_value'  => 1,
    '#attributes'     => array('onchange' => '
      wrapper = document.getElementById("edit-limit-up-wrapper");
      wrapper.style.visibility = (this.value == 2? "hidden" : "visible");'
    )
  );

  $form['limit_up'] = array(
    '#type'           => 'textfield',
    '#description'    => t('For "Peak Consumption", enter the maximum electricity consumption in watts.
    Otherwise, enter the maximum heartbeat delay in minutes. Beyond these limits, the device is considered faulty.'),
    '#maxlength'      => 6,
    '#size'           => 6,
    '#default_value'  => 120
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Save')
  );

  return $form;
}

function notification_register_form_submit($form, &$form_state) {

  $device   = $form_state['values']['device'];
  $event_id = $form_state['values']['event_id'];
  $email = $form_state['values']['email'];
  $limit_up = $form_state['values']['limit_up'];

  _notification_delete($device, $event_id);
  _notification_insert($device, $event_id, $email, $limit_up);

  $form_state['redirect'] = 'notification_list';
}

function notification_register_form_validate($form, &$form_state) {

  $email = $form_state['values']['email'];
  $event_id = $form_state['values']['event_id'];
  $limit_up = $form_state['values']['limit_up'];

  if (!valid_email_address($email)) {
    form_set_error('email', t('Invalid e-mail.'));
  }

  if(($event_id == 1 || $event_id == 3) && $limit_up < 30) {
    form_set_error('limit_up', t('Delay time can not be less than 30 minutes.'));

  } else if ($event_id == 4 && $limit_up < 1) {
    form_set_error('limit_up', t('Peak consumption can not be less than 1 watt.'));
  }
}

/**
 * Event notification deletion callback.
 *
 * @param $device    The monitored device.
 * @param $event_id  The event id.
 * @return the events list page.
 */
function notification_delete($device, $event_id) {

  _notification_delete($device, $event_id);
  return notification_list_page();
}

/**
 * Deletes an event notification.
 *
 * @param $device    The monitored device.
 * @param $event_id  The event id.
 */
function _notification_delete($device, $event_id) {

  $sql = "DELETE FROM {notification} WHERE device = '%s' AND event_id = %d";
  db_query($sql, $device, $event_id);
}

/**
 * Registers an event notification.
 *
 * @param $device    The monitored device.
 * @param $event_id  The event id.
 * @param $email     The notification e-mail.
 * @param $limit_up  An event related maximum value.
 */
function _notification_insert($device, $event_id, $email, $limit_up) {

  $sql = "INSERT INTO {notification} (device, event_id, email, limit_up) VALUES('%s', %d, '%s', %d)";
  db_query($sql, $device, $event_id, $email, $limit_up);
}

function notification_cron() {

  _notification_send_no_heartbeat_emails();
  _notification_send_corrupted_heartbeat_emails();
  _notification_send_any_heartbeat_failure_emails();
  _notification_send_peak_consumption_emails();
}

/**
 * Sends e-mails notifying users of "No Heartbeat" events.
 * 
 * @param $event_id  The actual event that is causing the notification to be sent.
 *                   It can be either "No Heartbeat" or "Any Heartbeat Failure".
 */
function _notification_send_no_heartbeat_emails($event_id = 1) {

  $tz = _notification_get_user_timezone();

  $sql = "
    SELECT
      u.name AS user_name,
      n.email AS email,
      d.serial AS serial,
      CONVERT_TZ(FROM_UNIXTIME(d.access),'+00:00',$tz) AS event_time,
      n.limit_up AS limit_up
    FROM
      {users} u,
      {logger_devices} d,
      {notification} n
    WHERE
      u.uid = d.uid AND
      d.device = n.device AND
      SYSDATE() > (FROM_UNIXTIME(d.access) + INTERVAL n.limit_up MINUTE) AND
      n.event_id = $event_id";

  $message = _notification_compose_error_email("
    Your Flukso device (serial number: %serial) has not been sending heartbeats for more
    than %limit_up minutes, since %event_time.",

    "Check your WLAN configuration and make sure that it remains active for at least 1 hour per day.
    The device might be working fine, but it is failing to send the heartbeats over the internet.");

  _notification_send_emails($sql, $message);
}

/**
 * Sends e-mails notifying users of "Corrupted Heartbeat" events.
 *
 * @param $event_id  The actual event that is causing the notification to be sent.
 *                   It can be either "Corrupted Heartbeat" or "Any Heartbeat Failure".
 */
function _notification_send_corrupted_heartbeat_emails($event_id = 2) {

  $tz = _notification_get_user_timezone();

  $sql = "
    SELECT
      u.name AS user_name,
      n.email AS email,
      d.serial AS serial,
      CONVERT_TZ(FROM_UNIXTIME(d.access),'+00:00',$tz) AS event_time
    FROM
      {users} u,
      {logger_devices} d,
      {logger_meters} m,
      {notification} n
    WHERE
      u.uid = d.uid AND
      d.device = m.device AND
      m.type = 'electricity' AND
      SYSDATE() > (FROM_UNIXTIME(m.access) + INTERVAL 2 HOUR) AND
      d.device = n.device AND
      n.event_id = $event_id";

  $message = _notification_compose_error_email("
    Your Flukso device (serial number: %serial) has sent a heartbeat with corrupted data at %event_time.");

  _notification_send_emails($sql, $message);
}

/**
 * Sends e-mails notifying users of "Any Heartbeat Failure" events.
 */
function _notification_send_any_heartbeat_failure_emails() {

  _notification_send_no_heartbeat_emails(3);
  _notification_send_corrupted_heartbeat_emails(3);
}

/**
 * Sends em-mails notifying users of the occurrence of Peak Consumption events.
 */
function _notification_send_peak_consumption_emails() {

  $tz = _notification_get_user_timezone();

  $sql = "
    SELECT
      u.name AS user_name,
      n.email AS email,
      d.serial AS serial,
      CONVERT_TZ(FROM_UNIXTIME(d.access),'+00:00',$tz) AS event_time,
      n.limit_up AS limit_up
    FROM
      {users} u,
      {logger_devices} d,
      {logger_meters} m,
      {notification} n
    WHERE
      u.uid = d.uid AND
      d.device = n.device AND
      n.event_id = 4 AND
      d.device = m.device AND
      m.type = 'electricity' AND
      m.unit = 'watt'
    GROUP BY
      u.name,
      n.email,
      d.access,
      n.limit_up
    HAVING
      sum(m.value) > n.limit_up";

  $message = _notification_compose_email("
    Your Flukso device (serial number: %serial) has registered an electricity consumption
    beyond %limit_up watts, at %event_time.");

  _notification_send_emails($sql, $message);
}

/**
 * Composes an e-mail that notifies a general event.
 *
 * @param $description  The event description.
 * @param $complement   Complementary information about the error.
 * @return the e-mail message.
 */
function _notification_compose_email($description, $complement = "") {

  global $base_url;

  return "
    <p>Dear user %user_name
    <br> &nbsp;<br></p>

    <p>$description</p>
    <p>$complement</p>

    <p>If you want to stop receiving this notification, please remove it from your
    <a href='$base_url/notification_list'>event notifications list</a>.</p>

    <p>&nbsp;<br>
    Best Regards,</p>
    <p>mySmartGrid Team</p>";
}

/**
 * Composes an e-mail that notifies an error event.
 *
 * @param $description    The error description.
 * @param $recommendation The recommendation for the user of how to solve the problem.
 * @return the e-mail message.
 */
function _notification_compose_error_email($description, $recommendation = NULL) {

  $recommendation = $recommendation == NULL? "": "<li>$recommendation<br><br>";

  global $base_url;

  return _notification_compose_email($description, "

    In order to identify and solve the problem, please take the following actions.
    <ul>
      $recommendation

      <li>Check if the device complies with the
      <a href='$base_url/content/installationsanleitung-des-fluksos'>Flukso installation instructions</a>.
      It might be improperly installed or misconfigured.<br><br>

      <li>Visit our <a href='$base_url/content/h&#228;ufige-fragen-und-antworten'>FAQ</a>, and
      read the answers to questions made by other users in similar situations.<br><br>

      <li>In case the problem persists, please send an e-mail to msg-support@itwm.fhg.de.
    </ul>");
}

/**
 * Sends event notification e-mails to notifiable users.
 *
 * @param $sql     The SQL statement for selecting the events.
 * @param $message The e-mail message.
 */
function _notification_send_emails($sql, $message) {

  global $user;
  global $base_url;
  $language = user_preferred_language($user);
  $result = db_query($sql);
  $logo = "<p><img src='$base_url/sites/all/themes/mysmartgrid/logo.png'/></p>";

  while ($object = db_fetch_array($result)) {

    $variables = array();
    foreach ($object as $key => $value) {
      $variables["%$key"] = $value;
    }

    $subject = t('Event Notification');
    $body = t($message, $variables, $language->language) . $logo;

    $params = array(
      'subject' => $subject,
      'body' => $body
    );

    drupal_mail('notification', 'notice', $object['email'], $language, $params);
  }
}

function notification_mail($key, &$message, $params) {

  $message['headers']['Content-Type'] = "text/html; charset=UTF-8";
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Returns the user formatted timezone.
 * 
 * @return the formatted timezone.
 */
function _notification_get_user_timezone() {
  global $user;
  $hours = $user->timezone / (60 * 60);
  return $hours < 0 ? "'$hours:00'" : "'+$hours:00'";
}