<?php

/**
 * @file
 * This module provides personalized images to update the chumby.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

define('CHUMBY_REL_PATH', drupal_get_path('module', 'chumby'));
define('CHUMBY_PATH', DRUPAL_ROOT . '/' . CHUMBY_REL_PATH);


function chumby_permission() {
  return array(
    'chumby image' => array(
      'title' => t('chumby image'),
      'description' => t('TODO Add a description for \'chumby image\''),
    ),
  );
}

function chumby_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function chumby_menu() {

  $items['chumby'] = array(
    'title' => "Download chumby image",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chumby_image_form'),
    'access arguments' => array('chumby image'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function chumby_image_form($form, &$form_state) {

  global $user;

  $sql = 'SELECT meter, function FROM {logger_meters} WHERE uid = :uid AND function IS NOT NULL';
  $result = db_query($sql, array(':uid' => $user->uid));

  $sensors = array();
  foreach ($result as $flukso) {
    $sensors[$flukso->meter] = $flukso->function;
  }

  $form['visualization'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'text' => t('currentpower'),
      'tacho' => t('energietacho'),
      'lightbulb' => t('Gluehlampe'),
      'graph' => t('EnergyGraph'),
    ),
    '#title' => t('Visualizations'),
    '#description' => t('Visualizations that should be available'),
  );

  $form['sensor'] = array(
    '#type' => 'select',
    '#options' => $sensors,
    '#title' => t('Sensor'),
    '#description' => t('Sensors from which values should be displayed.'),
  );

  $form['auto'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autoconfigure IP'),
    '#description' => t('Automatically find the flukso in the local network. Normally this is the way you want to go.'),
    '#default_value' => '1',
    '#attributes' => array('onChange' => 'document.getElementById("edit-ip").disabled = document.getElementById("edit-auto").checked'),
  );

  $form['ip'] = array(
    '#type' => 'textfield',
    '#title' => t('ip address'),
    '#description' => t('The local ip address of the flukso.'),
    '#disabled' => TRUE,
  );

  $form['consumption'] = array(
    '#type' => 'fieldset',
    '#title' => t('consumption'),
    '#description' => t('average borders for high, normal and low energy consumption in Watt'),
    '#collapsable' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['consumption']['low'] = array(
    '#type' => 'textfield',
    '#title' => t('low'),
    '#default_value' => '200',
  );

  $form['consumption']['normal'] = array(
    '#type' => 'textfield',
    '#title' => t('normal'),
    '#default_value' => '500',
  );

  $form['consumption']['high'] = array(
    '#type' => 'textfield',
    '#title' => t('high'),
    '#default_value' => '1500',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Submit"),
  );
  return $form;
}

function chumby_image_form_validate($form, &$form_state) {

  // check if any visualization is selected.
  $temp = TRUE;
  foreach ( $form_state['values']['visualization'] as $value ) {
    $temp &= ($value == '0');
  }

  if ($temp) {
    form_set_error('visualization', t('Please choose at least one visualization.'));
  }

  if (!$form_state['values']['auto']) {
    // check if a valid ip address was entered.
    if (filter_var($form_state['values']['ip'], FILTER_VALIDATE_IP) == FALSE) {
      form_set_error('ip', t('Please enter a valid IP address.'));
    }
  }

  // check if a valid number was entered as low value.
  if ($form_state['values']['low'] == "" || filter_var($form_state['values']['low']) == FALSE) {
    form_set_error('low', t('Please enter a number value.'));
  }

  // check if a valid number was entered as normal value and if the normal value is larger than the low value.
  if ($form_state['values']['normal'] == "" || filter_var($form_state['values']['normal']) == FALSE) {
    form_set_error('normal', t('Please enter a number value.'));

  }
  elseif ($form_state['values']['normal'] < $form_state['values']['low']) {
    form_set_error('normal', t('The normal value should be higher than the low value.'));
  }

  // check if a valid number was entered as high value and if the high value is larger than the normal value.
  if ($form_state['values']['high'] == "" || filter_var($form_state['values']['high']) == FALSE) {
    form_set_error('high', t('Please enter a number value.'));

  }
  elseif ($form_state['values']['high'] < $form_state['values']['normal']) {
    form_set_error('normal', t('The high value should be higher than the normal value.'));
  }
}

function chumby_image_form_submit($form, &$form_state) {

  if ($form_state['values']['auto']) {
    $ip = "";

  }
  else {
    $ip = $form_state['values']['ip'];
  }

  $sensor = $form_state['values']['sensor'];
  $token = db_query("SELECT token FROM {logger_tokens} WHERE meter = :meter", array(':meter' => $sensor))->fetchField();
  $low = $form_state['values']['low'];
  $mid = $form_state['values']['normal'];
  $high = $form_state['values']['high'];

  require DRUPAL_ROOT . '/' . 'daemonconfig.php';

  $dirname = md5(uniqid(rand(), TRUE));
  $path = CHUMBY_PATH . "/tmp/$dirname";

  if (!file_exists($path)) {

    mkdir($path, 0777, TRUE);
    exec("cp -R " . CHUMBY_PATH . "/template/usr/ " . $path);
    exec("cp -R " . CHUMBY_PATH . "/template/debugchumby " . $path);
    $daemonconfig = fopen($path . '/daemonconfig.lua', 'w');

    if ($daemonconfig == FALSE) {
      drupal_set_message(t('Could not create file!'));

    }
    else {
      fwrite($daemonconfig, $config);
      fclose($daemonconfig);
      $profile = fopen($path . '/profile.xml', 'w');

      require DRUPAL_ROOT . '/' . 'profile-head.php';

      fwrite($profile, $profile_head);
      foreach ($form_state['values']['visualization'] as $key => $value) {

        if ( $value != '0' ) {

          require DRUPAL_ROOT . '/' . $key . '_widget.php';
          fwrite($profile, $widget);
        }
      }

      require DRUPAL_ROOT . '/' . 'profile-tail.php';
      fwrite($profile, $profile_tail);
      fclose($profile);
    }

    $file_path = CHUMBY_PATH . '/files/';
    if (!file_exists($file_path)) {
      mkdir($file_path);
    }

    $zipfile = $file_path . $dirname . '.zip';
    exec('pushd ' . $path . '; zip -r ' . $dirname . '.zip .; popd; cp ' . $path . '/' . $dirname . '.zip ' . $zipfile);

    drupal_set_message(check_plain('<a href="' . CHUMBY_REL_PATH . '/files/' . $dirname . '.zip">' . t('Download Image') . '</a>'));
    exec("rm -rf $path");

  }
  else {
    drupal_set_message(t("Operation failed! Please try again later!"));
  }
}

function chumby_cron() {
  exec('rm -f ' . CHUMBY_PATH . '/files/*.zip');
}
