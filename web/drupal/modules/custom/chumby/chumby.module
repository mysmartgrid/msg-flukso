<?php

/**
 * @file
 * This module provides personalized images to update the chumby.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

define('CHUMBY_PATH', DRUPAL_ROOT . '/' . drupal_get_path('module', 'chumby'));


function chumby_permission() {
  return array(
    'chumby image' => array(
      'title' => t('chumby image'),
      'description' => t('Generate chumby image.'),
    ),
  );
}

/**
 * Access callback ensuring the device is accessible only to the owner.
 */
function chumby_device_access($permission, $serial) {

  global $GLOBALS;
  $access = TRUE;

  if ($serial) {
    $uid = db_select('logger_devices', 'd')
      ->fields('d', array('uid'))
      ->condition('d.serial', $serial, '=')
      ->execute()
      ->fetchField();

    $access = $uid == $GLOBALS['user']->uid;
  }
  return $access && user_access($permission);
}

function chumby_menu() {

  $items['chumby'] = array(
    'title' => "Download chumby image",
    'description' => 'Shows the chumby image download page.',
    'page callback' => 'chumby_image_page',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'chumby_device_access',
    'access arguments' => array('chumby image', 2),
    'type' => MENU_NORMAL_ITEM
  );

  $items['chumby/file'] = array(
    'title' => 'Download chumby image',
    'description' => 'Downloads the chumby compressed image file.',
    'page callback' => 'chumby_download_file',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Builds the chumby image page.
 *
 * @param $image_id  The image id.
 * @param $serial    The device serial number.
 * @param $function  The sensor function.
 * @return the chumby image page.
 */
function chumby_image_page($image_id = NULL, $serial = NULL, $function = NULL) {

  $form = drupal_get_form('chumby_image_form');
  $output = drupal_render($form);

  if ($image_id) {
 
    $headers = array(
      t('Serial Number'),
      t('Sensor'),
      t('Image File'));

    $lines = array(
      array(
        $serial, 
        $function,
        l(t('Download'), "chumby/file/$image_id")));

    $output .= theme_table(array('header' => $headers, 'rows' => $lines, '', 'attributes' => array(),
      'caption' => '', 'colgroups' => array(), 'sticky' => FALSE, 'empty' => ''));
  }
  return $output;
}

function chumby_image_form($form, &$form_state) {

  global $user;

  $result = db_select('logger_meters', 'm')
    ->fields('m', array('meter', 'function'))
    ->condition('m.uid', $user->uid, '=')
    ->isNotNull('m.function')
    ->execute();

  $sensors = array();
  foreach ($result as $flukso) {
    $sensors[$flukso->meter] = $flukso->function;
  }

  $result = db_select('chumby_widget', 'w')
    ->fields('w')
    ->execute();

  $widgets = array();
  foreach ($result as $widget) {
    $widgets[$widget->id] = $widget->name;  
  }

  $form['visualization'] = array(
    '#type' => 'checkboxes',
    '#options' => $widgets,
    '#title' => t('Visualizations'),
    '#description' => t('Visualizations that should be available'),
  );

  $form['sensor'] = array(
    '#type' => 'select',
    '#options' => $sensors,
    '#title' => t('Sensor'),
    '#description' => t('Sensors from which values should be displayed.'),
  );

  $form['auto'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Flukso IP Address'),
    '#description' => t('Automatically find the flukso in the local network. Normally this is the way you want to go.'),
    '#options' => array(
      '1' => t('Autoconfigure'),
    ),
    '#default_value' => array('1'),
    '#attributes' => array('onChange' => '
      var ip = document.getElementById("edit-ip");
      ip.disabled = document.getElementById("edit-auto-1").checked;
      ip.value = ip.disabled ? "" : ip.value;'),
  );

  $form['ip'] = array(
    '#type' => 'textfield',
    '#field_prefix' => t('ip address') . '&nbsp;&nbsp;&nbsp;&nbsp;',
    '#description' => t('The local ip address of the flukso.'),
    '#attributes' => array('onFocus' => 'document.getElementById("edit-ip").disabled = document.getElementById("edit-auto-1").checked'),
  );

  $form['consumption'] = array(
    '#type' => 'fieldset',
    '#title' => t('consumption'),
    '#description' => t('average borders for high, normal and low energy consumption in Watt'),
    '#collapsable' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['consumption']['low'] = array(
    '#type' => 'textfield',
    '#title' => t('low'),
    '#default_value' => '200',
  );

  $form['consumption']['normal'] = array(
    '#type' => 'textfield',
    '#title' => t('normal'),
    '#default_value' => '500',
  );

  $form['consumption']['high'] = array(
    '#type' => 'textfield',
    '#title' => t('high'),
    '#default_value' => '1500',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Submit"),
  );
  return $form;
}

function chumby_image_form_validate($form, &$form_state) {

  // check if any visualization is selected.
  $temp = TRUE;
  foreach ( $form_state['values']['visualization'] as $value ) {
    $temp &= ($value == '0');
  }

  if ($temp) {
    form_set_error('visualization', t('Please choose at least one visualization.'));
  }

  if (!$form_state['values']['auto']['1']) {
    // check if a valid ip address was entered.
    system("echo " . $form_state['values']['ip'] . " >> /tmp/test.txt");
    if (filter_var($form_state['values']['ip'], FILTER_VALIDATE_IP) == FALSE) {
      form_set_error('ip', t('Please enter a valid IP address.'));
    }
  }

  // check if a valid number was entered as low value.
  if ($form_state['values']['low'] == "" || filter_var($form_state['values']['low']) == FALSE) {
    form_set_error('low', t('Please enter a number value.'));
  }

  // check if a valid number was entered as normal value and if the normal value is larger than the low value.
  if ($form_state['values']['normal'] == "" || filter_var($form_state['values']['normal']) == FALSE) {
    form_set_error('normal', t('Please enter a number value.'));
  }
  elseif ($form_state['values']['normal'] < $form_state['values']['low']) {
    form_set_error('normal', t('The normal value should be higher than the low value.'));
  }

  // check if a valid number was entered as high value and if the high value is larger than the normal value.
  if ($form_state['values']['high'] == "" || filter_var($form_state['values']['high']) == FALSE) {
    form_set_error('high', t('Please enter a number value.'));
  }
  elseif ($form_state['values']['high'] < $form_state['values']['normal']) {
    form_set_error('normal', t('The high value should be higher than the normal value.'));
  }
}

function chumby_image_form_submit($form, &$form_state) {

  $image_id = md5(uniqid(rand(), TRUE));
  $tmp_path = CHUMBY_PATH . "/tmp/$image_id";

  $query = db_select('logger_devices', 'd');
  $query->join('logger_meters', 'm', 'm.device = d.device');
  $query->join('logger_tokens', 't', 't.meter = m.meter');

  $sensor = $query->fields('t', array('token'))
    ->fields('d', array('serial'))
    ->fields('m', array('function'))
    ->condition('t.meter', $form_state['values']['sensor'], '=')
    ->execute()
    ->fetchObject();

  $success = 
    !file_exists($tmp_path) &&
    mkdir($tmp_path, 0777, TRUE) &&
    rcopy(CHUMBY_PATH . '/template', $tmp_path) &&

    chumby_create_daemon_config($form_state['values'], $sensor, $tmp_path) &&
    chumby_create_profile($form_state['values']['visualization'], $tmp_path) &&
    rzip($tmp_path, CHUMBY_PATH . "/files/$image_id.zip");

  rrmdir($tmp_path);

  if ($success) {
    $form_state['redirect'] = "chumby/image/$image_id/$sensor->serial/$sensor->function";
  }
  else {
    drupal_set_message(t("Operation failed! Please try again later!"));
  }
}

/**
 * Creates the config file of the Chumby daemon.
 *
 * @param  $params    The daemon configuration properties.
 * @param  $sensor    The sensor.
 * @param  $tmp_path  The directory where the daemon config file will be created.
 * @return TRUE on success, FALSE on failure.
 */
function chumby_create_daemon_config($params, $sensor, $tmp_path) {

  $daemonconfig = fopen($tmp_path . '/daemonconfig.lua', 'w');
  if ($daemonconfig) {

    //If version 2
    if ($sensor->serial > 100000000) {
      $params['port'] = 8080;
      $params['service'] = '_flukso._tcp';
    } else {
      $params['port'] = 80;
      $params['service'] = '_flukso-realtime._tcp';
    }

    $params['ip'] = isset($params['auto']) ? '' : $params['ip'];
    $params['token'] = $sensor->token;

    require CHUMBY_PATH . '/daemon-config.php';

    fwrite($daemonconfig, $config);
    fclose($daemonconfig);
    return TRUE;
  }
  return FALSE;
}

/**
 * Creates the chumby image profile.
 *
 * @param  $widgets   The array of selected widgets.
 * @param  $tmp_path  The directory where the profile file will be created.
 * @return TRUE on success, FALSE on failure.
 */
function chumby_create_profile($selected_widgets, $tmp_path) {

  $profile = fopen("$tmp_path/profile.xml", 'w');
  if ($profile) {

    require CHUMBY_PATH . '/profile-head.php';
    fwrite($profile, $profile_head);

    foreach ($selected_widgets as $id => $selected) {

      if ($selected != '0') {

        $widget = db_select('chumby_widget', 'w')
          ->fields('w')
          ->condition('w.id', $id, '=')
          ->execute()
          ->fetchObject();

        require CHUMBY_PATH . '/widget.php';
        fwrite($profile, $widget);
      }
    }
    require CHUMBY_PATH . '/profile-tail.php';
    fwrite($profile, $profile_tail);
    fclose($profile);
    return TRUE;
  }
  return FALSE;
}

function chumby_download_file($image_id) {

  drupal_add_http_header('Content-Type', 'text/plain; charset=utf-8');
  drupal_add_http_header('Content-disposition', "attachment; filename=chumby-image.zip");

  $file_path = CHUMBY_PATH . "/files/$image_id.zip";
  readfile($file_path, FALSE, $content);

  print $content;
  exit(0);
}

function chumby_cron() {
  cleardir(CHUMBY_PATH . '/files');
}
