<?php

/**
 * This module allows the user to see devices' statuses.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//Device states
define('UNINSTALLED_STATE_NAME',      t('Uninstalled'));
define('UNREGISTERED_STATE_NAME',     t('Unregistered'));
define('NO_COMMUNICATION_STATE_NAME', t('No Communication'));
define('CORRUPTED_STATE_NAME',        t('Corrupted Message'));
define('WORKING_STATE_NAME',          t('Working'));

define('UNINSTALLED_STATE_ID',        1);
define('UNREGISTERED_STATE_ID',       2);
define('NO_COMMUNICATION_STATE_ID',   3);
define('CORRUPTED_STATE_ID',          4);
define('WORKING_STATE_ID',            5);

define('DEPLOYMENT_REL_PATH', drupal_get_path('module', 'deployment'));
define('DEPLOYMENT_ABS_PATH', $_SERVER['DOCUMENT_ROOT'] . base_path() . '/' . DEPLOYMENT_REL_PATH);


function deployment_perm() {
  return array(
    'device deployment overview',
    'print activation code'
  );
}

function deployment_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function deployment_menu() {

  $items['deployment/list'] = array(
    'title'             => 'Deployment List',
    'page callback'     => 'deployment_list_page',
    'page arguments'    => array(2),
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_CALLBACK
  );

  $items['deployment/overview'] = array(
    'title'             => 'Deployment Overview',
    'page callback'     => 'deployment_overview_page',
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_CALLBACK
  );

  $items['deployment/checkup'] = array(
    'title'             => 'Device Check Up',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('deployment_checkup_form'),
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_CALLBACK
  );

  $items['deployment/file'] = array(
    'title'            => 'Downloads a deployment list file',
    'page callback'    => '_deployment_download_file',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['deployment/print'] = array(
    'title'            => "Print Code",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('deployment_printcode_form'),
    'access arguments' => array('print activation code'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Builds the device list page.
 *
 * @return the device list page.
 */
function deployment_list_page($id = NULL) {

  drupal_set_title(t('Device List'));

  $state_id = $id > 0 ? $id : (isset($_SESSION['state_id']) ? $_SESSION['state_id'] : 0);

  $output = drupal_get_form('deployment_listfilter_form', $state_id);

  $headers = array(
    array('data' => t('Device'),        'field' => 'serial', 'sort'=> 'desc'),
    array('data' => t('User'),          'field' => 'name',   'sort'=> 'desc'),
    array('data' => t('E-mail'),        'field' => 'email',  'sort'=> 'desc'),
    array('data' => t('Latest Update'), 'field' => 'latest', 'sort'=> 'desc'),
    array('data' => t('State'),         'field' => 'state',  'sort'=> 'desc')
  );

  $limit = 15;
  $data = _deployment_get_devices($state_id, $headers, $limit);
  $_SESSION['deployment_list'] = $data;

  if($data){
    $output .= theme('table', $headers, $data) . theme('pager', NULL, $limit, 0) .
      '<p align="right">' . l(t('Save Data'), 'deployment/file') . '</p>';
  }
  return $output;
}

/**
 * Builds the deployment overview page.
 *
 * @return the deployment overview page.
 */
function deployment_overview_page() {

  drupal_set_title(t('Deployment Overview'));

  $all_devices = _deployment_get_devices(NULL, NULL, 9999999999999999, NULL);

  foreach($all_devices as $device) {
    $state = $device['state'];

    $data[$state]['state'] = l($state, 'deployment/list/' . $device['state_id']);
    $data[$state]['total']++;
  }

  foreach($all_devices as $device) {
    $state = $device['state'];
    $data[$state]['perc'] = round(($data[$state]['total'] / count($all_devices)) * 100, 2) . ' %';
  }

  $headers = array(
    array('data' => t('State'),      'field' => 'state'),
    array('data' => t('Total'),      'field' => 'total'),
    array('data' => t('Percentual'), 'field' => 'perc')
  );
  return theme('table', $headers, $data);
}

/**
 * Downloads a device list file.
 */
function _deployment_download_file() {

  drupal_set_header('Content-Type: text/plain');
  drupal_set_header('Content-disposition: attachment; filename=deployment-list.txt');

  $header = t('Device') . ',' . t('User') . ',' . t('E-mail') . ',' . t('Latest') . ',' . t('State');
  $lines = '';
  
  foreach($_SESSION['deployment_list'] as $entry) {
    $lines .= implode(',', $entry) . PHP_EOL;
  }

  print $header . PHP_EOL . $lines;
  exit(0);
}

/**
 * Returns an array of device states, indexed by their ids.
 *
 * @return an array of device states.
 */
function _deployment_get_all_states() {

  return array(
    UNINSTALLED_STATE_ID      => UNINSTALLED_STATE_NAME,
    UNREGISTERED_STATE_ID     => UNREGISTERED_STATE_NAME,
    NO_COMMUNICATION_STATE_ID => NO_COMMUNICATION_STATE_NAME,
    CORRUPTED_STATE_ID        => CORRUPTED_STATE_NAME,
    WORKING_STATE_ID          => WORKING_STATE_NAME
  );
}

/**
 * Returns the list of user devices.
 *
 * @param $state_id  The device state id (optional).
 * @param $headers   The field headers (optional).
 * @param $limit     The number of items in a table page (optional).
 * @param $serial    The serial number for selecting a single device (optionally).
 * @return the array of user devices.
 */
function _deployment_get_devices($state_id = NULL, $headers = NULL, $limit = 15, $serial = NULL) {

  global $user;
  $now = time();

  $tzdif = $user->timezone / 3600; //divided by 1 hour
  $tz = $tzdif < 0 ? "$tzdif:00" : "+$tzdif:00";
  $registration_delay = 3 * 24 * 3600; //3 days
  $heartbeat_timeout = 7200; //2 hours
  
  $uninstalled_id      = UNINSTALLED_STATE_ID;
  $unregistered_id     = UNREGISTERED_STATE_ID;
  $corrupted_id        = CORRUPTED_STATE_ID;
  $no_communication_id = NO_COMMUNICATION_STATE_ID;
  $working_id          = WORKING_STATE_ID;

  //NOTE: If SQL arguments are used, sql_count does not work.
  $sql = "
    SELECT
      d.serial,
      d.name,
      d.email,
      d.latest,
      d.state
    FROM
      (
        SELECT
          d.serial,
          d.name,
          d.email,

          CONVERT_TZ( FROM_UNIXTIME(
            IF(d.corrupted > 0, d.corrupted, IF(d.access > 0, d.access, d.created))
          ), '+00:00', '$tz') AS latest,

          IF(d.uid = 0,
            IF(($now - d.access) > $registration_delay,  $uninstalled_id,  $unregistered_id),
            IF(d.corrupted > 0, $corrupted_id,
              IF($now > (d.access + $heartbeat_timeout), $no_communication_id, $working_id)
            )
          ) AS state

        FROM
          (SELECT
            d.uid,
            u.name,
            u.mail AS email,
            d.serial,
            d.created,
            d.access,
            MAX(m.corrupted) AS corrupted
          FROM
            {logger_meters} m,
            {logger_devices} d
            LEFT OUTER JOIN {users} u ON u.uid = d.uid
          WHERE
            m.device = d.device
          GROUP BY
            d.uid,
            d.serial,
            d.created,
            d.access ) d
      ) d";


  if($serial || $state_id) {
    $sql .= ' WHERE ';

    if($serial) {
      $sql .= "d.serial = $serial";
    }
    if($state_id) {
      $sql .= ($serial? ' AND ' : '') . " d.state = $state_id";
    }
  }

  $count_sql = "SELECT COUNT(*) FROM ($sql) d ";

  if ($headers) {
    $sql .= tablesort_sql($headers);
  }

  $result = pager_query($sql, $limit, 0, $count_sql);
  $states = _deployment_get_all_states();

  $data = array();
  while($device = db_fetch_array($result)) {

    //TODO simplify this part
    $state_id = $device['state'];
    $device['state'] = $states[$state_id];
    if (!$headers) {
      $device['state_id'] = $state_id;
    }
    $data[] = $device;
  }
  return $data;
}

function deployment_listfilter_form(&$form_state, $state_id) {

  $states = _deployment_get_all_states();
  $states[0] = t('All');

  $form['state_id'] = array(
    '#type'          => 'select',
    '#title'         => t('State'),
    '#description'   => t('Select the device state.'),
    '#options'       => $states,
    '#default_value' => $state_id,
    '#required'      => TRUE,
    '#attributes'    => array('onchange' => "document.getElementById('deployment-listfilter-form').submit();")
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Filter')
  );
  return $form;
}

function deployment_checkup_form(&$form_state) {

  $form['serial'] = array(
    '#type'        => 'textfield',
    '#title'       => t("Serial"),
    '#size'        => 32,
    '#maxlength'   => 40,
    '#required'    => 1,
    '#description' => t('Enter the device serial number you want to check up')
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t("Check Up")
  );
   return $form;
}

function deployment_printcode_form(&$form_state) {

  $form['serial'] = array(
    '#type'        => 'textfield',
    '#title'       => t("Serial"),
    '#size'        => 32,
    '#maxlength'   => 40,
    '#description' => t('Enter the serial you want to generate the PDF file for'),
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t("Generate")
  );
  return $form;
}

function deployment_listfilter_form_submit($form, &$form_state) {

  $_SESSION['state_id']   = $form_state['values']['state_id'];
  $_SESSION['page_limit'] = $form_state['values']['page_limit'];
}

function deployment_checkup_form_submit($form, &$form_state) {

  $serial = $form_state['values']['serial'];
  $result = _deployment_get_devices(NULL, NULL, 1, $serial);

  if (empty($result)) {
    drupal_set_message(t('No device was found with such serial number.'));

  } else {
    $device = $result[0];
    $state = $device['state'];

    drupal_set_message(t('Status: ') . $state);

    if ($state == UNINSTALLED_STATE_NAME) {
      drupal_set_message(t('This device has not yet been installed.'));

    } else {
      $latest = array('%latest' => $device['latest']);

      if ($state == UNREGISTERED_STATE_NAME) {
        drupal_set_message(t('This device has been installed, but not yet registered by the user. Latest heartbeat received at %latest.', $latest));

      } else if ($state == NO_COMMUNICATION_STATE_NAME) {
        drupal_set_message(t('No message has been received from this device since %latest.', $latest));

      } else if ($state == CORRUPTED_STATE_NAME) {
        drupal_set_message(t('This device has sent a message with corrupted data at %latest.', $latest));

      } else if ($state == WORKING_STATE_NAME) {
        drupal_set_message(t('This device is working fine. Latest message received at %latest.', $latest));
      }
    }
  }
}

function deployment_printcode_form_submit($form, &$form_state) {

  $filename = substr(md5(uniqid(rand(), TRUE)),0,10);
  $output_file_path = "/pdf/$filename.pdf";

  require_once('fpdf/fpdf.php');
  require_once('fpdi/fpdi.php');

  define('FPDF_FONTPATH',   DEPLOYMENT_ABS_PATH . '/fpdf/font/');
  define('PDF_SOURCE_FILE', DEPLOYMENT_ABS_PATH . '/Beipackzettel.pdf');
  define('PDF_OUTPUT_FILE', DEPLOYMENT_REL_PATH . $output_file_path);

  $pdf = new FPDI();
  $pagecount = $pdf->setSourceFile(PDF_SOURCE_FILE);
  $tplidx = $pdf->importPage(1);

  preg_match_all('/[\d]*[-[\d]*]?/', $form_state['values']['serial'], $values);

  foreach($values[0] as $serial) {

    if ($serial != '') {

      if (stripos($serial,'-') < 1) {

        $sql = "SELECT * FROM {logger_devices} WHERE serial = %d";
        $result = db_query($sql, $serial);

      } else {
        preg_match_all('/([\d]*)-([\d]*)/', $serial, $match);

        $sql = "SELECT * FROM {logger_devices} WHERE serial >= %d AND serial <= %d";
        $result = db_query($sql, $match[1][0], $match[2][0]);
      }

      if ($result) {

        while ($device = db_fetch_object($result)) {

          $pdf->AddPage();
          $pdf->useTemplate($tplidx, 10, 10, 190);

          $pdf->SetFont('Arial', '', 12);
          $pdf->SetTextColor(0,0,0);
          $pdf->SetXY(43, 165);

          $pdf->Write(0, 'Seriennummer: WA' . $device->serial);
          $pdf->setXY(43,175);
          $pdf->Write(0, 'Aktivierungscode: ' . substr($device->device,0,10));

        }
      } else {
        form_set_error('serial', t('Error while looking up activation code!'));
      }
    }
  }

  $pdf->Output(PDF_OUTPUT_FILE, 'F');
  drupal_set_message(l(t('Download'), DEPLOYMENT_REL_PATH . $output_file_path));
}

function deployment_cron() {
  exec('rm ' . DEPLOYMENT_ABS_PATH . '/pdf/*');
}