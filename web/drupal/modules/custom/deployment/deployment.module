<?php

/**
 * @file
 * This module allows the user to see devices' statuses.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//Device states
define('UNINSTALLED_STATE_ID',         1);
define('UNREGISTERED_STATE_ID',        2);
define('NO_COMMUNICATION_STATE_ID',    3);
define('CORRUPTED_STATE_ID',           4);
define('WORKING_STATE_ID',             5);
define('OFFLINE_STATE_ID',             6);
define('NO_MEASUREMENT_STATE_ID',      7);
define('NO_HEARTBEAT_STATE_ID',        8);

//FIXME get value from notification.module
define('CORRUPTED_MESSAGE_EVENT_ID_', 103);

define('DEPLOYMENT_REL_PATH', drupal_get_path('module', 'deployment'));
define('DEPLOYMENT_PATH', DRUPAL_ROOT . '/' . DEPLOYMENT_REL_PATH);


function deployment_permission() {
  return array(
    'device deployment overview' => array(
      'title' => t('device deployment overview'),
      'description' => t('Access the Deployment Overview page.'),
    ),
    'print activation code' => array(
      'title' => t('print activation code.'),
      'description' => t('Print device activation code.'),
    )
  );
}

function deployment_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function deployment_menu() {

  $items['deployment'] = array(
    'title' => 'Device',
    'page callback' => 'deployment_overview_page',
    'access arguments' => array('device deployment overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['deployment/list'] = array(
    'title' => 'Device List',
    'page callback' => 'deployment_list_page',
    'page arguments' => array(2),
    'access arguments' => array('device deployment overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['deployment/overview'] = array(
    'title' => 'Deployment Overview',
    'page callback' => 'deployment_overview_page',
    'access arguments' => array('device deployment overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['deployment/checkup'] = array(
    'title' => 'Device Check Up',
    'page callback' => 'deployment_checkup_page',
    'page arguments' => array(2),
    'access arguments' => array('device deployment overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  //FIXME: update the libraries to D7
  /*
  $items['deployment/print'] = array(
    'title' => "Print Code",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deployment_printcode_form'),
    'access arguments' => array('print activation code'),
    'type' => MENU_NORMAL_ITEM,
  );
  */
  $items['deployment/list/file'] = array(
    'title' => 'Downloads a deployment list file',
    'page callback' => 'deployment_download_list_file',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['deployment/chart/file'] = array(
    'title' => 'Downloads a deployment chart file',
    'page callback' => 'deployment_download_chart_file',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Builds the device checkup page.
 *  
 * @return the device checkup page.
 */
function deployment_checkup_page($serial = NULL) {

  $form = drupal_get_form('deployment_checkup_form');
  $output = drupal_render($form);

  if ($serial) {

    $result = deployment_get_devices(NULL, $serial);

    if (empty($result)) {
      $output .= '<br><br>' . t('No device was found with such serial number.');
    }
    else {
      $device = $result[0];
      $latest = array('%latest' => $device['latest']);
      $message = ''; 

      switch ($device['state_id']) {

        case UNINSTALLED_STATE_ID:
          $message = t('This device has not yet been installed.');
          break;

        case UNREGISTERED_STATE_ID:
          $message = t('This device has been installed, but not yet registered by the user. Latest heartbeat received at %latest.', $latest);
          break;

        case NO_COMMUNICATION_STATE_ID:
        case OFFLINE_STATE_ID:
          $message = t('No message has been received from this device since %latest.', $latest);
          break;

        case NO_MEASUREMENT_STATE_ID:
          $message = t('No measurement has been received from this device since %latest.', $latest);
          break;

        case NO_HEARTBEAT_STATE_ID:
          $message = t('No heartbeat has been received from this device since %latest.', $latest);
          break;

        case CORRUPTED_STATE_ID:
          $message = t('This device has sent a message with corrupted data at %latest.', $latest);
          break;

        case WORKING_STATE_ID:
          $message = t('This device is working fine. Latest message received at %latest.', $latest);
          break;
      }
      $output .= '<br><br>' . t('Status:') . $device['state'] . "<br>$message<br><br>" . l(t('Device History'), "event/log/list/$serial");
    }
  }
  return $output;
}

/**
 * Builds the device list page.
 *
 * @return the device list page.
 */
function deployment_list_page($id = NULL) {

  drupal_set_title(t('Device List'));

  $state_id = $id > 0 ? $id : (isset($_SESSION['state_id']) ? $_SESSION['state_id'] : 0);

  $form = drupal_get_form('deployment_listfilter_form', $state_id);
  $output = drupal_render($form);

  $data = deployment_get_devices($state_id);
  foreach ($data as &$device) {
    $device['serial'] = l($device['serial'], 'event/log/list/' . $device['serial']);
    $device['name'] = l($device['name'], 'power/user/' . $device['uid']);
    unset($device['uid']);
    unset($device['state_id']);
  }
  $_SESSION['deployment_list'] = $data;

  if ($data) {

    $headers = array(
      array(
        'data' => t('Device'),
        'field' => 'serial',
        'sort' => 'asc',
      ),
      array(
        'data' => t('User'),
        'field' => 'name',
      ),
      array(
        'data' => t('E-mail'),
        'field' => 'email',
      ),
      array(
        'data' => t('Latest Update'),
        'field' => 'latest',
      ),
      array('data' => t('State')),
    );

    $output .= theme_table(array('header' => $headers, 'rows' => $data, 'attributes' => array(),
      'caption' => '', 'colgroups' => array(), 'sticky' => FALSE, 'empty' => '')) .
      
      theme_pager(array('tags' => NULL, 'element' => 0, 'parameters' => array(), 'quantity' => (sizeof($data)/15))) .
      '<p align="right">' . l(t('Save Data'), 'deployment/list/file') . '</p>';
  }
  return $output;
}

/**
 * Builds the deployment overview page.
 *
 * @return the deployment overview page.
 */
function deployment_overview_page() {
  
  global $user;
  $legend = array();
  $state_title = t('State');
  $total_title = t('Total');
  $percentage_title = t('Percentage');
  $total = 0;

  $sql = "
    SELECT
      s.id,
      s.name,
      s.description,
      d.total
    FROM
      {deployment_summary} d,
      {deployment_state} s,
      (SELECT MAX(time) AS time FROM {deployment_summary}) m
    WHERE
      d.state_id = s.id AND
      d.time = m.time
    ORDER BY
      s.id";

  $result = db_query($sql);
  foreach ($result as $summary) {
    $id = $summary->id - 1; //Must start from zero

    $legend[$id][$state_title] = '<b>' . l(t($summary->name), 'deployment/list/' . $summary->id) . '</b> - ' . t($summary->description);
    $legend[$id][$total_title] = $summary->total;
    $total += $summary->total;
  }

  foreach ($legend as &$row) {
    $perc = $total > 0 ? round(($row[$total_title] / $total) * 100, 2) : 0;
    $row[$percentage_title] = $perc ? $perc . ' %' : '';
  }

  $chart = logger_create_chart_object('deployment', array(), 'year', t('Devices'), FALSE, array());
  $chart->file_url = 'deployment/chart/file'; //TODO: avoid setting this property
  $chart->data['legend'] = $legend;

  drupal_set_title(t('Deployment Overview'));

  return '<div>' . t($chart->unit) . '</div>' . '<br>' .
    logger_create_dygraph($chart, TRUE) . '<br>' .
    logger_create_chart_legend($chart);
}

/**
 * Downloads a deployment summary chart file.
 */
function deployment_download_chart_file() {

  global $user;
  $sql = "SELECT * FROM {deployment_summary} ORDER BY time, state_id";
  $result = db_query($sql);
  $header = '';
  $lines = '';

  $time = 0;
  foreach ($result as $summary) {

    if ($summary->time != $time) {
      $lines .= $time ? "\r\n" : '';
      $time = $summary->time;

      $lines .= date('d-M-Y H:i', $time + $user->timezone);
      $header = t('Time');
    }

    $header .= ',S' . $summary->state_id;
    $lines .= ',' . $summary->total;
  }

  logger_download_file('chart-data-file', $header, $lines);
}

/**
 * Downloads a deployment list file.
 */
function deployment_download_list_file() {

  $header = t('Device') . ',' . t('User') . ',' . t('E-mail') . ',' . t('Latest') . ',' . t('State');

  foreach ($_SESSION['deployment_list'] as $entry) {
    $lines .= implode(',', $entry) . PHP_EOL;
  }
  $lines = preg_replace("/<\/a>/", '', $lines);
  $lines = preg_replace("/<a href=(.*)>/", '', $lines);

  logger_download_file('deployment-list', $header, $lines);
}

/**
 * Returns an array of device states, indexed by their ids.
 *
 * @return an array of device states.
 */
function deployment_get_all_states() {

  $sql = "SELECT SQL_CACHE id, name FROM {deployment_state}";
  $result = db_query($sql);

  $states = array();
  foreach ($result as $state) {
    $states[$state->id] = t($state->name);
  }
  return $states;
}

/**
 * Returns the list of user devices.
 *
 * @param $state_id  The device state id (optional).
 * @param $serial    The serial number for selecting a single device (optionally).
 * @return the array of user devices.
 */
function deployment_get_devices($state_id = NULL, $serial = NULL) {

  global $user;

  $now = REQUEST_TIME;
  $states = deployment_get_all_states();
  $data = array();

  $sql = deployment_create_devices_query($now, $state_id, $serial);
  $result = db_query($sql);
 
  while ($device = $result->fetchAssoc()) {

    $device['state'] = $states[$device['state_id']];
    $data[] = $device;
  }
  return $data;
}

/**
 * Creates a device query.
 * 
 * @param $now      The current time.
 * @param $state_id The device state (optional).
 * @param $serial   The device serial number (optional).
 * @return the array of devices with the specified state and serial number.
 */
function deployment_create_devices_query($now, $state_id, $serial) {

  //If parameters are used in this SQL query, pager_query does not count rows correctly

  global $user;
  $tzdif = $user->timezone / 3600; //divided by 1 hour
  $tz = $tzdif < 0 ? "$tzdif:00" : "+$tzdif:00";
  $registration_timeout  = $now - 3 * 24 * 3600; //3 days
  $offline_timeout       = $now - 24 * 3600; //24 hours
  $communication_timeout = $now - 2 * 3600; //2 hours
  $filters = '';

  $latest_field = "IF(d.access > 0, d.access, d.created)";
  $state_id_field = $state_id;

  switch ($state_id) {
    case UNINSTALLED_STATE_ID:
      $filters = "AND d.uid = 0 AND d.access  < $registration_timeout";
      break;

    case UNREGISTERED_STATE_ID:
      $filters = "AND d.uid = 0 AND d.access >= $registration_timeout";
      break;

    case CORRUPTED_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted IS NOT NULL";
      $latest_field = "m.corrupted";
      break;

    case OFFLINE_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted IS NULL AND d.access < $offline_timeout AND m.access < $offline_timeout";
      break;

    case NO_HEARTBEAT_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted IS NULL AND d.access < $offline_timeout AND m.access >= $offline_timeout";
      $latest_field = "m.access";
      break;

    case NO_COMMUNICATION_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted IS NULL AND d.access >= $offline_timeout AND d.access < $communication_timeout";
      break;

    case NO_MEASUREMENT_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted IS NULL AND d.access >= $communication_timeout AND m.access > 0 AND m.access < $offline_timeout";
      $latest_field = "m.access";
      break;

    case WORKING_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted IS NULL AND d.access >= $communication_timeout AND m.access >= $offline_timeout";
      break;

    default:
      $latest_field = "
        IF(m.corrupted IS NOT NULL, m.corrupted,
          IF(d.access = 0, d.created,
            IF(d.access >= $communication_timeout AND m.access > 0 AND m.access < $offline_timeout, m.access, d.access)
          )
        )";

      $state_id_field = "
        IF(d.uid = 0,
          IF(d.access < $registration_timeout, " . UNINSTALLED_STATE_ID . ", " . UNREGISTERED_STATE_ID . "),
          IF(m.corrupted IS NOT NULL, " . CORRUPTED_STATE_ID . " ,
            IF(d.access < $offline_timeout,
              IF(m.access < $offline_timeout, " . OFFLINE_STATE_ID . ", " . NO_HEARTBEAT_STATE_ID . "),
              IF(d.access < $communication_timeout, " . NO_COMMUNICATION_STATE_ID . ",
                 IF(m.access < $offline_timeout, " . NO_MEASUREMENT_STATE_ID . ", " . WORKING_STATE_ID . ")
              )
            )
          )
        )";
  }
  $filters .= $serial ? " AND d.serial = $serial" : '';

  $visitor_sql = "SELECT u.uid FROM {users_roles} u, {role} r WHERE u.rid = r.rid AND r.name = :name";
  $result = db_query($visitor_sql, array(':name' => 'Visitor'));

  foreach ($result as $visitor) {
    $filters .= " AND d.uid <> $visitor->uid ";
  }

  $min_time = $now - 15 * MINUTE;
  return "
    SELECT SQL_NO_CACHE
      d.serial,
      u.name,
      u.uid,
      u.mail AS email,
      CONVERT_TZ(FROM_UNIXTIME($latest_field), '+00:00', '$tz') AS latest,
      ($state_id_field) AS state_id
    FROM
      {logger_devices} d
      LEFT OUTER JOIN {users} u ON u.uid = d.uid,
      (
        SELECT
          m.device,
          MAX(m.access) AS access,
          MAX(e.corrupted) AS corrupted
        FROM
          {logger_meters} m LEFT JOIN
          (
            SELECT
            l.device,
            MAX(l.time) AS corrupted
            FROM
              {event_log} l
            WHERE
              l.event_id = " . CORRUPTED_MESSAGE_EVENT_ID_ . " AND l.time > $min_time
            GROUP BY
              l.device
          ) e ON m.device = e.device
        GROUP BY
          m.device
      ) m
    WHERE
      m.device = d.device
      $filters
    GROUP BY
      d.uid,
      d.serial";
}

function deployment_listfilter_form($form, &$form_state, $state_id) {

  $states = deployment_get_all_states();
  $states[0] = t('All');

  $form['state_id'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#description' => t('Select the device state.'),
    '#options' => $states,
    '#default_value' => $state_id,
    '#required' => TRUE,
    '#attributes' => array('onchange' => "document.getElementById('deployment-listfilter-form').submit();"),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  return $form;
}

function deployment_checkup_form($form, &$form_state) {

  $form['serial'] = array(
    '#type' => 'textfield',
    '#title' => t("Serial"),
    '#size' => 32,
    '#maxlength' => 40,
    '#required' => 1,
    '#description' => t('Enter the device serial number you want to check up'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Check Up"),
  );
  return $form;
}

function deployment_printcode_form($form, &$form_state) {

  $form['serial'] = array(
    '#type' => 'textfield',
    '#title' => t("Serial"),
    '#size' => 32,
    '#maxlength' => 40,
    '#description' => t('Enter the serial you want to generate the PDF file for'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Generate"),
  );
  return $form;
}

function deployment_listfilter_form_submit($form, &$form_state) {

  $_SESSION['state_id']   = $form_state['values']['state_id'];
  $form_state['redirect'] = 'deployment/list';
}

function deployment_checkup_form_submit($form, &$form_state) {

  $serial = $form_state['values']['serial'];
  $form_state['redirect'] = "deployment/checkup/$serial";
}

function deployment_printcode_form_submit($form, &$form_state) {

  exec('mkdir -p ' . DEPLOYMENT_PATH . '/pdf');

  $file_name = substr(md5(uniqid(rand(), TRUE)), 0, 10);
  $output_file_path = "/pdf/$file_name.pdf";

  require_once DRUPAL_ROOT . '/' . 'fpdf/fpdf.php';
  require_once DRUPAL_ROOT . '/' . 'fpdi/fpdi.php';

  define('FPDF_FONTPATH',    DEPLOYMENT_PATH . '/fpdf/font/');
  define('PDF_SOURCE_FILE', DEPLOYMENT_PATH . '/Beipackzettel.pdf');
  define('PDF_OUTPUT_FILE', DEPLOYMENT_PATH . $output_file_path);

  $pdf = new FPDI();
  $pagecount = $pdf->setSourceFile(PDF_SOURCE_FILE);
  $tplidx = $pdf->importPage(1);

  preg_match_all('/[\d]*[-[\d]*]?/', $form_state['values']['serial'], $values);

  foreach ($values[0] as $serial) {

    if ($serial != '') {

      if (stripos($serial, '-') < 1) {

        $sql = "SELECT * FROM {logger_devices} WHERE serial = :serial";
        $result = db_query($sql, array(':serial' => $serial));

      }
      else {
        preg_match_all('/([\d]*)-([\d]*)/', $serial, $match);

        $sql = "SELECT * FROM {logger_devices} WHERE serial >= :serial1 AND serial <= :serial2";
        $result = db_query($sql, array(':serial1' => $match[1][0], ':serial2' => $match[2][0]));
      }

      if ($result) {

        foreach ($result as $device) {

          $pdf->AddPage();
          $pdf->useTemplate($tplidx, 10, 10, 190);

          $pdf->SetFont('Arial', '', 12);
          $pdf->SetTextColor(0, 0, 0);
          $pdf->SetXY(43, 165);

          $pdf->Write(0, 'Seriennummer: WA' . $device->serial);
          $pdf->setXY(43, 175);
          $pdf->Write(0, 'Aktivierungscode: ' . substr($device->device, 0, 10));

        }
      }
      else {
        form_set_error('serial', t('Error while looking up activation code!'));
      }
    }
  }

  $pdf->Output(PDF_OUTPUT_FILE, 'F');
  drupal_set_message(check_plain(l(t('Download'), DEPLOYMENT_REL_PATH . $output_file_path)));
}

function deployment_cron() {
  exec('rm -f ' . DEPLOYMENT_PATH . '/pdf/*');
  deployment_create_summary();
}

/**
 * Creates a periodic deployment summary.
 */
function deployment_create_summary() {

  $now = REQUEST_TIME;
  $now = $now - ($now % 3600);

  $sql = "SELECT COUNT(*) FROM {deployment_summary} WHERE time = :time";
  $result = db_query($sql, array(':time' => $now))->fetchField();

  if ($result == 0) {
    $totals = array();
    $devices = deployment_get_devices();

    foreach ($devices as $device) {
      $state_id = $device['state_id'];
      $totals[$state_id]++;
    }

    $states = deployment_get_all_states();

    foreach (array_keys($states) as $state_id) {
      $total = $totals[$state_id];
      $total = $total > 0 ? $total : 0;

      db_insert('deployment_summary')
      ->fields(array(
        'time' => $now,
        'state_id' => $state_id,
        'total' => $total
      ))
      ->execute();
    }

    db_delete('deployment_summary')
      ->condition('time', $now - 3 * 30 * 24 * 3600, '<')
      ->execute(); //90 days
  }
}