<?php

/**
 * This module allows the user to see devices' statuses.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//Device states
define('UNINSTALLED_STATE_ID',        1);
define('UNREGISTERED_STATE_ID',       2);
define('NO_COMMUNICATION_STATE_ID',   3);
define('CORRUPTED_STATE_ID',          4);
define('WORKING_STATE_ID',            5);

define('DEPLOYMENT_REL_PATH', drupal_get_path('module', 'deployment'));
define('DEPLOYMENT_ABS_PATH', $_SERVER['DOCUMENT_ROOT'] . base_path() . '/' . DEPLOYMENT_REL_PATH);


function deployment_perm() {
  return array(
    'device deployment overview',
    'print activation code'
  );
}

function deployment_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function deployment_menu() {

  $items['deployment'] = array(
    'title'             => 'Device',
    'page callback'     => 'deployment_overview_page',
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_NORMAL_ITEM
  );

  $items['deployment/list'] = array(
    'title'             => 'Device List',
    'page callback'     => 'deployment_list_page',
    'page arguments'    => array(2),
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_NORMAL_ITEM
  );

  $items['deployment/overview'] = array(
    'title'             => 'Deployment Overview',
    'page callback'     => 'deployment_overview_page',
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_NORMAL_ITEM
  );

  $items['deployment/checkup'] = array(
    'title'             => 'Device Check Up',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('deployment_checkup_form'),
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_NORMAL_ITEM
  );

  $items['deployment/print'] = array(
    'title'            => "Print Code",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('deployment_printcode_form'),
    'access arguments' => array('print activation code'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['deployment/list/file'] = array(
    'title'            => 'Downloads a deployment list file',
    'page callback'    => '_deployment_download_list_file',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['deployment/chart/file'] = array(
    'title'            => 'Downloads a deployment chart file',
    'page callback'    => '_depolyment_download_chart_file',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );
  return $items;
}

/**
 * Builds the device list page.
 *
 * @return the device list page.
 */
function deployment_list_page($id = NULL) {

  drupal_set_title(t('Device List'));

  $state_id = $id > 0 ? $id : (isset($_SESSION['state_id']) ? $_SESSION['state_id'] : 0);

  $output = drupal_get_form('deployment_listfilter_form', $state_id);

  $headers = array(
    array('data' => t('Device'),        'field' => 'serial', 'sort'=> 'asc'),
    array('data' => t('User'),          'field' => 'name'),
    array('data' => t('E-mail'),        'field' => 'email'),
    array('data' => t('Latest Update'), 'field' => 'latest'),
    array('data' => t('State'))
  );

  $limit = 15;
  $data = _deployment_get_devices($state_id, $headers, $limit);
  foreach ($data as &$device) {
    $device['serial'] = l($device['serial'], 'event/log/list/' . $device['serial']);
  }
  $_SESSION['deployment_list'] = $data;

  if($data){
    $output .= theme('table', $headers, $data) . theme('pager', NULL, $limit, 0) .
      '<p align="right">' . l(t('Save Data'), 'deployment/list/file') . '</p>';
  }
  return $output;
}

/**
 * Builds the deployment overview page.
 *
 * @return the deployment overview page.
 */
function deployment_overview_page() {

  global $user;
  $legend = array();
  $state_title = t('State');
  $total_title = t('Total');
  $percentage_title = t('Percentage');
  $total = 0;

  $sql = "
    SELECT
      s.id,
      s.name,
      s.description,
      d.total
    FROM
      {deployment_summary} d,
      {deployment_state} s,
      (SELECT MAX(time) AS time FROM {deployment_summary}) m
    WHERE
      d.state_id = s.id AND
      d.time = m.time
    ORDER BY
      s.id";

  $result = db_query($sql);
  while($summary = db_fetch_array($result)) {
    $id = $summary['id'] - 1;//Must start from zero

    $legend[$id][$state_title] = '<b>' . l(t($summary['name']), 'deployment/list/' . $summary['id']) . '</b> - ' . t($summary['description']);
    $legend[$id][$total_title] = $summary['total'];
    $total += $summary['total'];
  }

  foreach($legend as &$row) {
    $perc = $total > 0 ? round(($row[$total_title] / $total) * 100, 2) : 0;
    $row[$percentage_title] = $perc? $perc . ' %' : '';
  }

  $chart = _logger_create_chart_object('deployment', array(), 'year', t('Devices'), FALSE, array());
  $chart->file_url = 'deployment/chart/file';//TODO: avoid setting this property
  $chart->data['legend'] = $legend;

  drupal_set_title(t('Deployment Overview'));

  return
    '<div>' . t($chart->unit) . '</div>' . '<br>' .
    _logger_create_dygraph($chart, TRUE) . '<br>' .
    _logger_create_chart_legend($chart);
}

/**
 * Downloads a deployment summary chart file.
 */
function _depolyment_download_chart_file() {

  global $user;
  $sql = "SELECT * FROM {deployment_summary} ORDER BY time, state_id";
  $result = db_query($sql);

  $time = 0;
  while($summary = db_fetch_array($result)) {

    if ($summary['time'] != $time) {
      $lines .= $time ? "\r\n" : '';
      $time = $summary['time'];

      $lines .= date('d-M-Y H:i', $time + $user->timezone);
      $header = t('Time');
    }

    $header .= ',S' . $summary['state_id'];
    $lines .= ',' . $summary['total'];
  }

  _logger_download_file('chart-data-file', $header, $lines);
}

/**
 * Downloads a deployment list file.
 */
function _deployment_download_list_file() {

  $header = t('Device') . ',' . t('User') . ',' . t('E-mail') . ',' . t('Latest') . ',' . t('State');
  
  foreach($_SESSION['deployment_list'] as $entry) {
    $lines .= implode(',', $entry) . PHP_EOL;
  }
  $lines = preg_replace("/<\/a>/", '', $lines);
  $lines = preg_replace("/<a href=(.*)>/", '', $lines);

  _logger_download_file('deployment-list', $header, $lines);
}

/**
 * Returns an array of device states, indexed by their ids.
 *
 * @return an array of device states.
 */
function _deployment_get_all_states() {

  $states = array();
  $sql = "SELECT SQL_CACHE id, name FROM {deployment_state}";
  $result = db_query($sql, $user->uid);

  while ($state = db_fetch_array($result)) {
    $states[$state['id']] = t($state['name']);
  }
  return $states;
}

/**
 * Returns the list of user devices.
 *
 * @param $state_id  The device state id (optional).
 * @param $headers   The field headers (optional).
 * @param $limit     The number of items in a table page (optional).
 * @param $serial    The serial number for selecting a single device (optionally).
 * @return the array of user devices.
 */
function _deployment_get_devices($state_id = NULL, $headers = NULL, $limit = 15, $serial = NULL) {

  global $user;
  $now = time();

  $sql = _deployment_create_devices_query($now, $state_id, $serial);

  if ($headers) {
    $count_sql = "SELECT SQL_NO_CACHE COUNT(*) FROM ($sql) d ";
    $sql .= tablesort_sql($headers);
    $result = pager_query($sql, $limit, 0, $count_sql);

  } else {
    $result = db_query($sql);
  }

  $states = _deployment_get_all_states();

  $data = array();
  while($device = db_fetch_array($result)) {

    $device['state'] = $states[$device['state_id']];
    if ($headers) {
      unset($device['state_id']);
    }
    $data[] = $device;
  }
  return $data;
}

function _deployment_create_devices_query($now, $state_id, $serial) {

  //If parameters are used in this SQL query, pager_query does not count rows correctly

  $tzdif = $user->timezone / 3600; //divided by 1 hour
  $tz = $tzdif < 0 ? "$tzdif:00" : "+$tzdif:00";
  $registration_time = $now - 3 * 24 * 3600; //3 days
  $heartbeat_time = $now - 7200; //2 hours

  $latest_field = "IF(d.access > 0, d.access, d.created)";
  $state_id_field = $state_id;

  switch ($state_id) {
    case UNINSTALLED_STATE_ID:
      $filters = "AND d.uid = 0 AND d.access  < $registration_time";
      break;

    case UNREGISTERED_STATE_ID:
      $filters = "AND d.uid = 0 AND d.access >= $registration_time";
      break;

    case CORRUPTED_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted > 0";
      $latest_field = "MAX(m.corrupted)";
      break;

    case NO_COMMUNICATION_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted = 0 AND d.access < $heartbeat_time";
      break;

    case WORKING_STATE_ID:
      $filters = "AND d.uid > 0 AND m.corrupted = 0 AND d.access >= $heartbeat_time";
      break;

    default:
      $latest_field = "IF(MAX(m.corrupted) > 0, MAX(m.corrupted), IF(d.access > 0, d.access, d.created))";
      $state_id_field = "
        IF(d.uid = 0,
          IF(d.access < $registration_time, " . UNINSTALLED_STATE_ID . ", " . UNREGISTERED_STATE_ID . "),
          IF(MAX(m.corrupted) > 0, " . CORRUPTED_STATE_ID . " ,
            IF(d.access < $heartbeat_time, " . NO_COMMUNICATION_STATE_ID . ", " . WORKING_STATE_ID . ")
          )
        )";
  }
  $filters .= $serial ? " AND d.serial = $serial" : '';

  return "
    SELECT SQL_NO_CACHE
      d.serial,
      u.name,
      u.mail AS email,
      CONVERT_TZ(FROM_UNIXTIME($latest_field), '+00:00', '$tz') AS latest,
      ($state_id_field) AS state_id
    FROM
      {logger_devices} d
      LEFT OUTER JOIN {users} u ON u.uid = d.uid,
      {logger_meters} m
    WHERE
      m.device = d.device
      $filters 
    GROUP BY
      d.uid,
      d.serial";
}

function deployment_listfilter_form(&$form_state, $state_id) {

  $states = _deployment_get_all_states();
  $states[0] = t('All');

  $form['state_id'] = array(
    '#type'          => 'select',
    '#title'         => t('State'),
    '#description'   => t('Select the device state.'),
    '#options'       => $states,
    '#default_value' => $state_id,
    '#required'      => TRUE,
    '#attributes'    => array('onchange' => "document.getElementById('deployment-listfilter-form').submit();")
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Filter')
  );
  return $form;
}

function deployment_checkup_form(&$form_state) {

  $form['serial'] = array(
    '#type'        => 'textfield',
    '#title'       => t("Serial"),
    '#size'        => 32,
    '#maxlength'   => 40,
    '#required'    => 1,
    '#description' => t('Enter the device serial number you want to check up')
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t("Check Up")
  );
  return $form;
}

function deployment_printcode_form(&$form_state) {

  $form['serial'] = array(
    '#type'        => 'textfield',
    '#title'       => t("Serial"),
    '#size'        => 32,
    '#maxlength'   => 40,
    '#description' => t('Enter the serial you want to generate the PDF file for'),
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t("Generate")
  );
  return $form;
}

function deployment_listfilter_form_submit($form, &$form_state) {

  $_SESSION['state_id']   = $form_state['values']['state_id'];
  $form_state['redirect'] = 'deployment/list';
}

function deployment_checkup_form_submit($form, &$form_state) {

  $serial = $form_state['values']['serial'];
  $result = _deployment_get_devices(NULL, NULL, 1, $serial);

  if (empty($result)) {
    drupal_set_message(t('No device was found with such serial number.'));

  } else {
    $device = $result[0];
    $latest = array('%latest' => $device['latest']);

    drupal_set_message(t('Status: ') . $device['state']);

    switch ($device['state_id']) {

      case UNINSTALLED_STATE_ID:
        drupal_set_message(t('This device has not yet been installed.'));
        break;

      case UNREGISTERED_STATE_ID:
        drupal_set_message(t('This device has been installed, but not yet registered by the user. Latest heartbeat received at %latest.', $latest));
        break;

      case NO_COMMUNICATION_STATE_ID:
        drupal_set_message(t('No message has been received from this device since %latest.', $latest));
        break;

      case CORRUPTED_STATE_ID:
        drupal_set_message(t('This device has sent a message with corrupted data at %latest.', $latest));
        break;

      case WORKING_STATE_ID:
        drupal_set_message(t('This device is working fine. Latest message received at %latest.', $latest));
        break;
    }
  }
  
  drupal_set_message('<br>' . l(t('Device History'), "event/log/list/$serial"));
}

function deployment_printcode_form_submit($form, &$form_state) {

  exec('mkdir -p ' . DEPLOYMENT_ABS_PATH . '/pdf');

  $file_name = substr(md5(uniqid(rand(), TRUE)),0,10);
  $output_file_path = "/pdf/$file_name.pdf";

  require_once('fpdf/fpdf.php');
  require_once('fpdi/fpdi.php');

  define('FPDF_FONTPATH',   DEPLOYMENT_ABS_PATH . '/fpdf/font/');
  define('PDF_SOURCE_FILE', DEPLOYMENT_ABS_PATH . '/Beipackzettel.pdf');
  define('PDF_OUTPUT_FILE', DEPLOYMENT_REL_PATH . $output_file_path);

  $pdf = new FPDI();
  $pagecount = $pdf->setSourceFile(PDF_SOURCE_FILE);
  $tplidx = $pdf->importPage(1);

  preg_match_all('/[\d]*[-[\d]*]?/', $form_state['values']['serial'], $values);

  foreach($values[0] as $serial) {

    if ($serial != '') {

      if (stripos($serial,'-') < 1) {

        $sql = "SELECT * FROM {logger_devices} WHERE serial = %d";
        $result = db_query($sql, $serial);

      } else {
        preg_match_all('/([\d]*)-([\d]*)/', $serial, $match);

        $sql = "SELECT * FROM {logger_devices} WHERE serial >= %d AND serial <= %d";
        $result = db_query($sql, $match[1][0], $match[2][0]);
      }

      if ($result) {

        while ($device = db_fetch_object($result)) {

          $pdf->AddPage();
          $pdf->useTemplate($tplidx, 10, 10, 190);

          $pdf->SetFont('Arial', '', 12);
          $pdf->SetTextColor(0,0,0);
          $pdf->SetXY(43, 165);

          $pdf->Write(0, 'Seriennummer: WA' . $device->serial);
          $pdf->setXY(43,175);
          $pdf->Write(0, 'Aktivierungscode: ' . substr($device->device,0,10));

        }
      } else {
        form_set_error('serial', t('Error while looking up activation code!'));
      }
    }
  }

  $pdf->Output(PDF_OUTPUT_FILE, 'F');
  drupal_set_message(l(t('Download'), DEPLOYMENT_REL_PATH . $output_file_path));
}

function deployment_cron() {
  exec('rm ' . DEPLOYMENT_ABS_PATH . '/pdf/*');
  _deployment_create_summary();
}

function _deployment_create_summary() {

  $now = time();
  $now = $now - ($now % 3600);

  $sql = "SELECT COUNT(*) FROM {deployment_summary} WHERE time = %d";
  $result = db_result(db_query($sql, $now));

  if ($result == 0) {
    $totals = array();
    $devices = _deployment_get_devices();

    foreach ($devices as $device) {
      $state_id = $device['state_id'];
      $totals[$state_id]++;
    }

    $states = _deployment_get_all_states();

    foreach (array_keys($states) as $state_id) {
      $total = $totals[$state_id];
      $total = $total > 0 ? $total : 0;

      $sql = "INSERT INTO {deployment_summary}(time, state_id, total) VALUES(%d, %d, %d)";
      db_query($sql, $now, $state_id, $total);
    }

    $sql = "DELETE FROM {deployment_summary} WHERE time < %d";
    db_query($sql, $now - 3 * 30 * 24 * 3600); //90 days
  }
}