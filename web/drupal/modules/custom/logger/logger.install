<?php

/**
 * @file
 * Install, update and uninstall functions for the logger module.
 */

function logger_schema() {
  $schema['logger_devices'] = array(
    'description' => "Contains the Fluksometer device ID's.",
    'fields' => array(
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'serial' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'sha' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'access' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'version' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'upgrade' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'resets' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'uptime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'memtotal' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'memfree' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'memcached' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'membuffers' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'uart_oe' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
    ),
    'primary key' => array('device'),
  );

  $schema['logger_meter_type'] = array(
    'description' => 'Stores the meter types.',
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '30',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  $schema['logger_meters'] = array(
    'description' => "Contains the Fluksometer meter ID's.",
    'fields' => array(
      'meter' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '0',
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'access' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'type' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 1,
        'disp-width' => '10',
      ),
      'function' => array(
        'type' => 'varchar',
        'length' => '16',
        'not null' => TRUE,
        'default' => 'main',
      ),
      'value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'factor' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'disp-width' => '10',
      ),
      'unit' => array(
        'type' => 'varchar',
        'length' => '16',
        'not null' => TRUE,
        'default' => 'watt',
      ),
      'forecast' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'latitude' => array(
        'type' => 'float',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'longitude' => array(
        'type' => 'float',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('meter'),
  );

  $schema['device_support_request'] = array(
    'description' => 'Stores device remote support requests via reverse SSH connections.',
    'fields' => array(
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'requested' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
    ),
    'primary key' => array(
      'device',
    ),
  );

  $schema['device_support_slot'] = array(
    'description' => 'Stores slots for device remote support via reverse SSH connections.',
    'fields' => array(
      'host' => array(
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
      ),
      'port' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'username' => array(
        'type' => 'varchar',
        'length' => '15',
        'not null' => TRUE,
      ),
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array(
      'host',
      'port',
    ),
  );

  return $schema;
}

function logger_install() {
  drupal_set_message(st('Created logger module tables.'));

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 1,
      'name' => 'Consumption',
    ))
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 2,
      'name' => 'Production',
    ))
    ->execute();

  $file_path = drupal_get_path('module', 'logger') . '/data/base';
  mkdir($file_path, 0777, TRUE);

  $file_path = drupal_get_path('module', 'logger') . '/data/forecast';
  mkdir($file_path, 0777, TRUE);

  $file_path = drupal_get_path('module', 'logger') . '/rrdtool';
  drupal_set_message(check_plain(st('Please, create symbolic link:') . " $file_path."));
}

function logger_uninstall() {
  drupal_set_message(st('Deleted logger module tables.'));

  $file_path = drupal_get_path('module', 'logger') . '/data';
  rrmdir($file_path);
}

function logger_update_7000() {
  // update_sql has been removed. Use the database API for any schema or data changes.
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
}

/**
 * Makes a directory for storing forecasts.
 */
function logger_update_7001() {

  $file_path = drupal_get_path('module', 'logger') . '/data/forecast';
  mkdir($file_path, 0777, TRUE);

  return st('Directory successfully created.');
}

/**
 * Sets the system variable logger_forecast_service_url.
 * Adds field forecast to table logger_meters.
 */
function logger_update_7002() {

  variable_set('logger_forecast_service_url', "http://dev1.mypowergrid.de/pvcast/forecast");

  db_add_field('logger_meters', 'forecast', array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0
  ));

  return st('Field logger_meters.forecast successfully added. Variable logger_forecast_service_url successfully created.');
}

/**
 * Adds fields latitude and longitude to table logger_meters.
 */
function logger_update_7003() {

  db_add_field('logger_meters', 'latitude', array(
    'type' => 'float',
    'size' => 'normal',
    'not null' => TRUE,
    'default' => 0
  ));

  db_add_field('logger_meters', 'longitude', array(
    'type' => 'float',
    'size' => 'normal',
    'not null' => TRUE,
    'default' => 0
  ));
  
  return st('Fields latitude and longitude successfully added to table logger_meters.');
}

/**
 * Updates the latitude and longitude of the existing sensors to Kaiserslautern's.
 */
function logger_update_7004() {

  db_update('logger_meters')
    ->fields(array(
      'latitude' => 49.444710,
      'longitude' => 7.769031,
    ))
    ->execute();

  return st("Sensors' latitude and longitude have been updated.");
}
