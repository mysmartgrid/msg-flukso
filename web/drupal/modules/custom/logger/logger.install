<?php

/**
 * @file
 * Install, update and uninstall functions for the logger module.
 */

function logger_schema() {

  $schema['logger_device_type'] = array(
    'description' => 'Stores the device types.',
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '30',
        'not null' => TRUE,
      ),
      'remote_support' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
    ),
    'primary key' => array('id')
  );

  $schema['logger_devices'] = array(
    'description' => "Stores devices.",
    'fields' => array(
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'serial' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'sha' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'access' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'version' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'firmware_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
        'default' => 0
      ),
      'resets' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'uptime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'memtotal' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'memfree' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'memcached' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'membuffers' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'uart_oe' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE
      ),
      'type_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
    ),
    'primary key' => array('device'),
  );

  $schema['logger_meter_type'] = array(
    'description' => 'Stores the meter types.',
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '30',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id')
  );

  $schema['logger_meters'] = array(
    'description' => "Stores sensors.",
    'fields' => array(
      'meter' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'external_id' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '0',
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'access' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'type' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 1,
        'disp-width' => '10',
      ),
      'function' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE
      ),
      'value' => array(
        'type' => 'float',
        'size' => 'big',
        'precision' => 24,
        'scale' => 15,
        'not null' => TRUE,
        'default' => 0,
      ),
      'factor' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'disp-width' => '10',
      ),
      'unit_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
      'resolution_unit_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
      'forecast' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'latitude' => array(
        'type' => 'float',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'longitude' => array(
        'type' => 'float',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'virtual' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'price' => array(
        'type' => 'float',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('meter')
  );

  $schema['logger_tokens'] = array(
    'description' => "Stores sensor access tokens.",
    'fields' => array(
      'meter' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'token' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'permissions' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 62
      ),
     'domains' => array(
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('token')
  );

  $schema['logger_meter_storage_period'] = array(
    'description' => "Storage periods of sensor measurements.",
    'fields' => array(
      'meter' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE
      ),
      'resolution' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'period' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('meter', 'resolution')
  );

  $schema['logger_aggregated_meters'] = array(
    'description' => "Stores sensors aggregated by virtual sensors.",
    'fields' => array(
      'virtual_meter' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE
      ),
      'meter' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE
      )
    ),
    'primary key' => array('virtual_meter', 'meter')
  );

  $schema['device_support_request'] = array(
    'description' => 'Stores device remote support requests via reverse SSH connections.',
    'fields' => array(
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'requested' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
    ),
    'primary key' => array(
      'device',
    ),
  );

  $schema['device_support_slot'] = array(
    'description' => 'Stores slots for device remote support via reverse SSH connections.',
    'fields' => array(
      'host' => array(
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
      ),
      'tunnel_port' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'port' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'username' => array(
        'type' => 'varchar',
        'length' => '15',
        'not null' => TRUE,
      ),
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array(
      'host',
      'tunnel_port'
    ),
  );

  $schema['logger_device_firmware'] = array(
    'description' => 'Stores device firmware releases.',
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
      'version' => array(
        'type' => 'varchar',
        'length' => '11',
        'not null' => TRUE,
      ),
      'release_time' => array(
        'type' => 'varchar',
        'length' => '14',
        'not null' => TRUE,
      ),
      'build' => array(
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
      ),
      'tag' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'device_type_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE 
      ),
      'upgradable' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5',
      ),
    ),
    'primary key' => array('id')
  );

  $schema['logger_firmware_upgrade_request'] = array(
    'description' => 'Stores device firmware upgrade requests.',
    'fields' => array(
      'device' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'firmware_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unasigned' => TRUE,
        'default' => 0
      ),
      'requested' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'approved' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
    ),
    'primary key' => array('device')
  );

  return $schema;
}

function logger_install() {
  drupal_set_message(st('Created logger module tables.'));

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 0,
      'name' => 'Unknown',
      'remote_support' => 0
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 1,
      'name' => 'Flukso 1.0',
      'remote_support' => 0
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 2,
      'name' => 'Flukso 2.0',
      'remote_support' => 1
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 3,
      'name' => 'VZLogger',
      'remote_support' => 0
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 4,
      'name' => 'LibKlio Store',
      'remote_support' => 0
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 5,
      'name' => 'Cloned Device',
      'remote_support' => 0
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 6,
      'name' => 'RaspBerry Pi',
      'remote_support' => 1
    ))
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 1,
      'name' => 'Energy Consumption'
    ))
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 2,
      'name' => 'Energy Production',
    ))
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 3,
      'name' => 'Temperature',
    ))
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 4,
      'name' => 'Pressure',
    ))
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 5,
      'name' => 'Humidity',
    ))
    ->execute();

  $dir = drupal_get_path('module', 'logger');

  $path = "$dir/data/base";
  mkdir($path, 0777, TRUE);

  $path = "$dir/rrdtool";
  drupal_set_message(check_plain(st('Please, create symbolic link:') . " $path."));

  variable_set('logger_msg_service_url', 'https://api.mysmartgrid.de:8443');

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 0,
      'version' => '0.0.0-0',
      'release_time' => '00000000_0000',
      'build' => '00000000000000000000000000000000',
      'tag' => 'custom_firmware',
      'upgradable' => 0,
      'description' => 'Unknown Firmware'
    ));
}

function logger_uninstall() {
  drupal_set_message(st('Deleted logger module tables.'));

  $file_path = drupal_get_path('module', 'logger') . '/data';
  rrmdir($file_path);
}

function logger_update_7000() {
  // update_sql has been removed. Use the database API for any schema or data changes.
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
}

/**
 * Makes a directory for storing forecasts.
 */
function logger_update_7001() {

  $file_path = drupal_get_path('module', 'logger') . '/data/forecast';
  mkdir($file_path, 0777, TRUE);

  return st('Directory successfully created.');
}

/**
 * Sets the system variable logger_forecast_service_url.
 * Adds field forecast to table logger_meters.
 */
function logger_update_7002() {

  variable_set('logger_forecast_service_url', "http://dev1.mypowergrid.de/pvcast/forecast");

  db_add_field('logger_meters', 'forecast', array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0
  ));

  return st('Field logger_meters.forecast successfully added. Variable logger_forecast_service_url successfully created.');
}

/**
 * Adds fields latitude and longitude to table logger_meters.
 */
function logger_update_7003() {

  db_add_field('logger_meters', 'latitude', array(
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
    'default' => 0
  ));

  db_add_field('logger_meters', 'longitude', array(
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
    'default' => 0
  ));
  
  return st('Fields latitude and longitude successfully added to table logger_meters.');
}

/**
 * Updates the latitude and longitude of the existing sensors to Kaiserslautern's.
 */
function logger_update_7004() {

  db_update('logger_meters')
    ->fields(array(
      'latitude' => 49.444710,
      'longitude' => 7.769031,
    ))
    ->execute();

  return st("Sensors' latitude and longitude have been updated.");
}

/**
 * Creates table logger_aggregated_meters.
 * Adds field virtual to table logger_meters.
 */
function logger_update_7005() {

  db_create_table('logger_aggregated_meters', drupal_get_schema_unprocessed('logger', 'logger_aggregated_meters'));

  db_add_field('logger_meters', 'virtual', array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0
  ));

  return st('Field logger_meters.virtual successfully added. Table logger_aggregated_meters successfully created.');
}


/**
 * Removes forecast data directory 
 */
function logger_update_7006() {

  $file_path = drupal_get_path('module', 'logger') . '/data/forecast';
  rrmdir($file_path);

  db_delete('variable')
    ->condition('name', 'logger_forecast_service_url')
    ->execute();

  return st("Forecast data directory and variable 'logger_forecast_service_url' has been removed.");
}

/**
 * Adds field price to table logger.meters.
 */
function logger_update_7007() {

  db_add_field('logger_meters', 'price', array(
    'type' => 'float',
    'size' => 'normal',
    'not null' => TRUE,
    'default' => 0,
  ));

  db_update('logger_meters')
    ->fields(array(
      'price' => 0.18
    ))
    ->execute();  

  return st('Field logger_meters.price successfully added.');
}

/**
 * Sets variable logger_msg_service_url.
 */
function logger_update_7008() {
  variable_set('logger_msg_service_url', 'https://api.mysmartgrid.de:8443');

  return st('Variable logger_msg_service_url has been set.');
}

/**
 * Add field tunnel_slot to table device_support_slot.
 */
function logger_update_7009() {

  db_drop_primary_key('device_support_slot');

  db_add_field('device_support_slot', 'tunnel_port', array(
    'type' => 'float',
    'size' => 'normal',
    'not null' => TRUE,
    'default' => 0,
  ));

  db_update('device_support_slot')
    ->expression('tunnel_port', 'port')
    ->execute();

  db_update('device_support_slot')
    ->fields(array(
      'port' => 22
    ))
    ->execute();

  db_add_primary_key('device_support_slot', array('host', 'tunnel_port'));

  return st('Field device_support_slot.tunnel_port successfully added.');
}

/**
 * Add field firmware_version to table logger_devices.
 */
function logger_update_7010() {

  db_add_field('logger_devices', 'firmware_version', array(
    'type' => 'varchar',
    'length' => 10,
    'not null' => FALSE,
    'default' => ''
  ));

  db_update('logger_devices')
    ->fields(array(
      'firmware_version' => '1.0.0-0'
    ))
    ->condition('serial', 100000000, '<')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_version' => '2.0.0-0'
    ))
    ->condition('serial', 100000000, '>=')
    ->execute();

  db_change_field('logger_devices', 'firmware_version', 'firmware_version', array(
    'type' => 'varchar',
    'length' => 10,
    'not null' => TRUE
  ));

  return st('Field logger_devices.firmware_version successfully added.');
}

/**
 * Removes variables 'logger_relativechart_unit%' and 'logger_net_production%'.
 */
function logger_update_7011() {

  db_delete('variable')
    ->condition('name', 'logger_relativechart_unit%', 'LIKE')
    ->execute();

  db_delete('variable')
    ->condition('name', 'logger_net_production%', 'LIKE')
    ->execute();

  return st("Variables 'logger_relativechart_unit%' and 'logger_net_production%' have been removed.");
}

/**
 * Removes variables 'logger_price%' and 'logger_use_sensor_prices%'.
 */
function logger_update_7012() {

  db_delete('variable')
    ->condition('name', 'logger_price%', 'LIKE')
    ->execute();

  db_delete('variable')
    ->condition('name', 'logger_use_sensor_prices%', 'LIKE')
    ->execute();

  return st("Variables 'logger_price%' and 'logger_use_sensor_prices%' have been removed.");
}

/**
 * Removes variables '%unit%'.
 */
function logger_update_7013() {

  db_delete('variable')
    ->condition('name', '%unit%', 'LIKE')
    ->execute();

  return st("Variables '%unit%' have been removed.");
}

/**
 * Add field description to table logger_devices.
 */
function logger_update_7014() {

  db_add_field('logger_devices', 'description', array(
    'type' => 'varchar',
    'length' => 60,
    'not null' => FALSE
  ));

  return st('Field description has been successfully added to table logger_devices.');
}

/**
 * Remove variables '%selected_users%'.
 */
function logger_update_7015() {

  db_delete('variable')
    ->condition('name', '%selected_users%', 'LIKE')
    ->execute();

  return st("Variables '%selected_users%' have been removed.");
}

/**
 * Add field description to table logger_meters.
 */
function logger_update_7016() {

  db_add_field('logger_meters', 'description', array(
    'type' => 'varchar',
    'length' => 60,
    'not null' => FALSE
  ));

  return st('Field description has been successfully added to table logger_meters.');
}

/**
 * Create table logger_meter_storage_period.
 */
function logger_update_7019() {

  db_create_table('logger_meter_storage_period', drupal_get_schema_unprocessed('logger', 'logger_meter_storage_period'));
}

/**
 * Populate table logger_meter_storage_period.
 */
function logger_update_7020() {

  $sensors = db_select('logger_meters', 'm')
    ->fields('m', array('meter'))
    ->execute();

  foreach ($sensors as $sensor) {

    db_insert('logger_meter_storage_period')
      ->fields(array(
        'meter' => $sensor->meter,
        'resolution' => MINUTE,
        'period' => WEEK
      ))
      ->execute();

    db_insert('logger_meter_storage_period')
      ->fields(array(
        'meter' => $sensor->meter,
        'resolution' => 15 * MINUTE,
        'period' => MONTH
      ))
      ->execute();

    db_insert('logger_meter_storage_period')
      ->fields(array(
        'meter' => $sensor->meter,
        'resolution' => HOUR,
        'period' => 2 * MONTH
      ))
      ->execute();

    db_insert('logger_meter_storage_period')
      ->fields(array(
        'meter' => $sensor->meter,
        'resolution' => DAY,
        'period' => 6 * MONTH
      ))
      ->execute();

    db_insert('logger_meter_storage_period')
      ->fields(array(
        'meter' => $sensor->meter,
        'resolution' => WEEK,
        'period' => 10 * YEAR
      ))
      ->execute();
  }
  return st('Table logger_meter_storage_period successfully created.');
}

/**
 * Update logger_meter_storage_period for user stadt-kl.
 */
function logger_update_7022() {

  $sensors = db_select('logger_meters', 'm')
    ->fields('m', array('meter'))
    ->condition('m.uid', 1146)
    ->condition('m.function', '', '<>')
    ->execute();

  foreach ($sensors as $sensor) {

    db_update('logger_meter_storage_period')
      ->fields(array(
        'period' => 4 * WEEK
      ))
      ->condition('meter', $sensor->meter)
      ->condition('resolution', MINUTE)
      ->execute();
  }
  return st('Table logger_meter_storage_period has been successfully updated.');
}

/**
 * Resize field function of table logger_meters.
 */
function logger_update_7023() {

  db_change_field('logger_meters', 'function', 'function',
    array(
      'type' => 'varchar',
      'length' => '32',
      'not null' => FALSE,
      'default' => NULL
  ));
  return st('Field logger_meters.function has been changed.');
}

/**
 * Change type of field value of table logger_meters.
 */
function logger_update_7025() {

  db_change_field('logger_meters', 'value', 'value',
    array(
      'type' => 'float',
      'size' => 'big',
      'precision' => 24,
      'scale' => 15,
      'not null' => TRUE,
      'default' => 0
  ));
  return st('Field logger_meters.value has been changed.');
}

/**
 * Replace field 'unit' by field 'unit_id' in table logger_meters.
 */
function logger_update_7026() {

  db_add_field('logger_meters', 'unit_id', array(
    'type' => 'int',
    'not null' => TRUE,
    'unasigned' => TRUE,
    'default' => 0
  ));

  db_update('logger_meters')
    ->fields(array(
      'unit_id' => 10 
    ))
    ->condition('unit', 'watt')
    ->execute();

  db_update('logger_meters')
    ->fields(array(
      'unit_id' => 10
    ))
    ->condition('unit', 'eur')
    ->execute();

  db_update('logger_meters')
    ->fields(array(
      'unit_id' => 11 
    ))
    ->condition('unit', 'kwh')
    ->execute();

  db_drop_field('logger_meters', 'unit');

  return st('Field logger_meters.unit_id has been created.');
}

/**
 * Remove logger module variables.
 */
function logger_update_7027() {

  db_delete('variable')
    ->condition('name', 'logger_%', 'LIKE')
    ->execute();

  return st('Logger module variables have been removed.');
}

/**
 * Creates table logger_device_type.
 */
function logger_update_7028() {

  db_create_table('logger_device_type', drupal_get_schema_unprocessed('logger', 'logger_device_type'));

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 0,
      'name' => 'Unknown'
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 1,
      'name' => 'Flukso 1.0'
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 2,
      'name' => 'Flukso 2.0'
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 3,
      'name' => 'VZLogger'
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 4,
      'name' => 'LibKlio Store'
    ))
    ->execute();

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 5,
      'name' => 'Cloned Device'
    ))
    ->execute();

  return st('Table logger_device_type has been created.');
}

/**
 * Adds field type_id to table logger_devices.
 */
function logger_update_7029() {

  db_add_field('logger_devices', 'type_id', array(
    'type' => 'int',
    'not null' => TRUE,
    'unasigned' => TRUE,
    'default' => 0
  ));

  db_update('logger_devices')
    ->fields(array(
      'type_id' => 1
    ))
    ->condition('serial', 100000000, '<')
    ->condition('serial', 90000000, '>')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'type_id' => 2
    ))
    ->condition('serial', 100000000, '>')
    ->condition('serial', 6000000000, '<')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'type_id' => 5
    ))
    ->condition('serial', 6000000000, '>')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'type_id' => 5
    ))
    ->condition('device', 'dvdvdv%', 'LIKE')
    ->execute();

  return st('Field type_id has been added to table logger_devices.');
}

/**
 * Fix device types of libklio stores.
 */
function logger_update_7030() {

  db_update('logger_devices')
    ->fields(array(
      'type_id' => 4
    ))
    ->condition('description', 'libklio%', 'LIKE')
    ->execute();

  return st('The device types of libklio stores have been fixed.');
}

/**
 * Fix types of cloned devices.
 */
function logger_update_7031() {

  db_update('logger_devices')
    ->fields(array(
      'type_id' => 5
    ))
    ->condition('device', 'dvdvdv%', 'LIKE')
    ->execute();

  return st('The types of cloned devices have been fixed.');
}

/**
 * Remove logger module variables.
 */
function logger_update_7032() {

  db_delete('variable')
    ->condition('name', 'logger_%', 'LIKE')
    ->execute();

  return st('Logger module variables have been removed.');
}

/**
 * Redefine variable logger_msg_service_url.
 */
function logger_update_7043() {

  variable_set('logger_msg_service_url', 'https://api.mysmartgrid.de:8443');

  return st('Variable logger_msg_service_url has been redefined.');
}

/**
 * Rename file template.rrd to derive.template.rrd
 */
function logger_update_7044() {

  $dir = drupal_get_path('module', 'logger');
  $path = "$dir/data/base";
  rename("$path/template.rrd", "$path/derive.template.rrd");  

  return st('File template.rrd has been renamed.');

}

/**
 * Remove logger module variables.
 */
function logger_update_7047() {

  db_delete('variable')
    ->condition('name', 'logger_%', 'LIKE')
    ->execute();

  variable_set('logger_msg_service_url', 'https://api.mysmartgrid.de:8443');

  return st('Logger module variables have been removed.');
}

/**
 * Creates RRD templates links.
 */
function logger_update_7048() {

  $dir = drupal_get_path('module', 'logger');
  $path = "$dir/data/base";

  exec("cd $path; ln -s derive.template.rrd template.1.rrd;");
  exec("cd $path; ln -s derive.template.rrd template.2.rrd;");
  exec("cd $path; ln -s gauge.template.rrd template.3.rrd;");
  exec("cd $path; ln -s derive.template.rrd template.4.rrd;");

  return st('RRD templates links have been created.');
}

/**
 * Updates sensor types.
 */
function logger_update_7049() {

  db_update('logger_meter_type')
    ->fields(array(
      'name' => 'Energy Consumption',
    ))
    ->condition('id', 1)
    ->execute();

  db_update('logger_meter_type')
    ->fields(array(
      'name' => 'Energy Production',
    ))
    ->condition('id', 2)
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 3,
      'name' => 'Temperature',
    ))
    ->execute();

  return st('Sensor types have been updated.');
}

/**
 * Creates new sensor types.
 */
function logger_update_7050() {

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 4,
      'name' => 'Pressure',
    ))
    ->execute();

  db_insert('logger_meter_type')
    ->fields(array(
      'id' => 5,
      'name' => 'Humidity',
    ))
    ->execute();

  return st("New sensor types have been created.");
}

/**
 * Creates new RRD templates links.
 */
function logger_update_7051() {

  $dir = drupal_get_path('module', 'logger');
  $path = "$dir/data/base";

  exec("cd $path; ln -s gauge.template.rrd template.5.rrd;");
  exec("cd $path; ln -s gauge.template.rrd template.6.rrd;");

  return st('New RRD templates links have been created.');
}

/**
 * Updates test device keys.
 */
function logger_update_7056() {

  db_update('logger_devices')
    ->fields(array(
      'sha' => 'd3a16238d92456bb0f6727743275dce0'
    ))
    ->condition('device', 'dvdvdvdvdvdvdvdvdvdvdvdvdvdvdvd1')
    ->execute();

  return st('Test device keys have been updated.');
}

/**
 * Updates test sensor tokens.
 */
function logger_update_7057() {

  db_update('logger_tokens')
    ->fields(array(
      'token' => 'd3a16238d92456bb0f6727743275dce0'
    ))
    ->condition('meter', 'dvd1mtmtmtmtmtmtmtmtmtmtmtmtmtm1')
    ->execute();

  return st('Test sensor token has been updated.');
}

/**
 * Updates test sensor meter.
 */
function logger_update_7059() {

  db_update('logger_meters')
    ->fields(array(
      'meter' => '5715a57b0c8ec958727ab3bb206d8b6e'
    ))
    ->condition('meter', 'dvd1mtmtmtmtmtmtmtmtmtmtmtmtmtm1')
    ->execute();

  db_update('logger_tokens')
    ->fields(array(
      'token' => '5715a57b0c8ec958727ab3bb206d8b6e'
    ))
    ->condition('meter', 'dvd1mtmtmtmtmtmtmtmtmtmtmtmtmtm1')
    ->execute();

  $dir = drupal_get_path('module', 'logger');
  $path = "$dir/data/base";

  exec("cd $path; mv dvd1mtmtmtmtmtmtmtmtmtmtmtmtmtm1.rrd 5715a57b0c8ec958727ab3bb206d8b6e.rrd;");

  return st('Test sensor meter has been updated.');
}

/**
 * Add field 'external_id' in table logger_meter.
 */
function logger_update_7061() {

  db_add_field('logger_meters', 'external_id', array(
    'type' => 'varchar',
    'length' => '32',
    'not null' => FALSE
  ));

  db_update('logger_meters')
    ->expression('external_id', 'meter')
    ->execute();

  db_change_field('logger_meters', 'external_id', 'external_id', array(
    'type' => 'varchar',
    'length' => '32',
    'not null' => TRUE
  ));
  return st('Field logger_meters.external_id has been created.');
}

/**
 * Creates the Device Type: RaspBerry Pi.
 */
function logger_update_7062() {

  db_insert('logger_device_type')
    ->fields(array(
      'id' => 6,
      'name' => 'RaspBerry Pi'
    ))
    ->execute();

  return st('Device Type RaspBerry Pi Store has been created.');
}

/**
 * Updates logger_meters.factor.
 */
function logger_update_7063() {

  db_update('logger_meters')
    ->fields(array(
      'factor' => 1000
    ))
    ->execute();

  return st('Field logger_meters.factor has been updated.');
}

/**
 * Add field 'remote_support' in table logger_device_type.
 */
function logger_update_7064() {

  db_add_field('logger_device_type', 'remote_support', array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '5'
  ));

  db_update('logger_device_type')
    ->fields(array(
      'remote_support' => 1
    ))
    ->condition('id', 2)
    ->execute();

  db_update('logger_device_type')
    ->fields(array(
      'remote_support' => 1
    ))
    ->condition('id', 6)
    ->execute();

  return st('Field logger_device_type.remote_support has been created.');
}

/**
 * Creates table logger_device_firmware.
 */
function logger_update_7077() {

  db_create_table('logger_device_firmware', drupal_get_schema_unprocessed('logger', 'logger_device_firmware'));

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 0,
      'version' => '0.0.0-0',
      'release_time' => '00000000_0000',
      'build' => '00000000000000000000000000000000',
      'tag' => 'custom_firmware',
      'device_type_id' => 0,
      'upgradable' => 0,
      'description' => 'Unknown Firmware'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 1,
      'version' => '1.0.0-0',
      'release_time' => '20100601_0000',
      'build' => '10010010010010010010010010010010',
      'tag' => 'flukso-1.0.0-0',
      'device_type_id' => 1,
      'upgradable' => 0,
      'description' => 'Flukso Version 1.0.0-0',

    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 2,
      'version' => '2.0.0-0',
      'release_time' => '20110601_0000',
      'build' => '20020020020020020020020020020020',
      'tag' => 'flukso-2.0.0-0',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.0-0'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 3,
      'version' => '2.0.2-0',
      'release_time' => '20111005_0000',
      'build' => '20220220220220220220220220220222',
      'tag' => 'flukso-2.0.2-0',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.2-0'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 4,
      'version' => '2.0.3-1',
      'release_time' => '20110801_0000',
      'build' => '20312031203120312031203120312031',
      'tag' => 'flukso-2.0.3-1',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.3-1'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 5,
      'version' => '2.0.4-1',
      'release_time' => '20110901_0000',
      'build' => '20412041204120412041204120412041',
      'tag' => 'flukso-2.0.4-1',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.4-1'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 6,
      'version' => '2.0.4-2',
      'release_time' => '20111001_0000',
      'build' => '20422042204220422042204220422042',
      'tag' => 'flukso-2.0.4-2',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.4-2'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 7,
      'version' => '2.0.4-3',
      'release_time' => '20111101_0000',
      'build' => '20432043204320432043204320432042',
      'tag' => 'flukso-2.0.4-3',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.4-3'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 8,
      'version' => '2.0.4-4',
      'release_time' => '20111201_0000',
      'build' => '20442044204420442044204420442042',
      'tag' => 'flukso-2.0.4-4',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.4-4'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 9,
      'version' => '2.0.4-rc3',
      'release_time' => '20120101_0000',
      'build' => '20443204432044320443204432044320',
      'tag' => 'flukso-2.0.4-rc3',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Flukso Version 2.0.4-rc3'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 10,
      'version' => '1.0.0',
      'release_time' => '20120101_0000',
      'build' => '10010010010010010010010010010010',
      'tag' => 'vzlogger-1.0.0',
      'device_type_id' => 3,
      'upgradable' => 0,
      'description' => 'VZLogger Version 1.0.0'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 11,
      'version' => '1.0.0-0',
      'release_time' => '20130701_0000',
      'build' => '10010010010010010010010010010010',
      'tag' => 'raspberry-pi-1.0.0',
      'device_type_id' => 6,
      'upgradable' => 1,
      'description' => 'Raspberry Pi Version 1.0.0'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 13,
      'version' => '2.0.5-2',
      'release_time' => '20130901_0000',
      'build' => '20522052205220522052205220522052',
      'tag' => 'flukso-2.0.5-2',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Flukso Version 2.0.5-2'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 14,
      'version' => '2.0.5-3',
      'release_time' => '20130902_0000',
      'build' => '20532053205320532053205320532053',
      'tag' => 'flukso-2.0.5-3',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Flukso Version 2.0.5-3'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 15,
      'version' => '2.0.5-4',
      'release_time' => '20130903_0000',
      'build' => '20542054205420542054205420542054',
      'tag' => 'flukso-2.0.5-4',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Flukso Version 2.0.5-4'
    ))
    ->execute();

  return st('Create table logger_device_firmware.');
}

/**
 * Add field firmware_id to table logger_devices.
 */
function logger_update_7078() {

  db_add_field('logger_devices', 'firmware_id', array(
    'type' => 'int',
    'not null' => TRUE,
    'unasigned' => TRUE,
    'default' => 0
  ));

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 1
    ))
    ->condition('type_id', 1)
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 11
    ))
    ->condition('type_id', 6)
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 2
    ))
    ->condition('firmware_version', '2.0.0-0')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 3
    ))
    ->condition('firmware_version', '2.0.2-0')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 4
    ))
    ->condition('firmware_version', '2.0.3-1')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 5
    ))
    ->condition('firmware_version', '2.0.4-1')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 6
    ))
    ->condition('firmware_version', '2.0.4-2')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 7
    ))
    ->condition('firmware_version', '2.0.4-3')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 8
    ))
    ->condition('firmware_version', '2.0.4-4')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 9
    ))
    ->condition('firmware_version', '2.0.4-rc3')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 13
    ))
    ->condition('firmware_version', '2.0.5-2')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 14
    ))
    ->condition('firmware_version', '2.0.5-3')
    ->execute();

  db_update('logger_devices')
    ->fields(array(
      'firmware_id' => 15
    ))
    ->condition('firmware_version', '2.0.5-4')
    ->execute();

  return st('Add field firmware_id to table logger_devices.');
}

/**
 * Drop field firmware_version from table logger_devices.
 */
function logger_update_7079() {

  db_drop_field('logger_devices', 'firmware_version');

  return st('Field firmware_version has been droped from table logger_devices.');
}

/**
 * Add firmware patches.
 */
function logger_update_7080() {

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 16,
      'version' => '2.0.2-1',
      'release_time' => '20110701_0000',
      'build' => '20212021202120212021202120212021',
      'tag' => 'flukso-2.0.2-1',
      'device_type_id' => 2,
      'upgradable' => 0,
      'description' => 'Flukso Version 2.0.2-1'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 17,
      'version' => '2.0.2-1a',
      'release_time' => '20130911_0000',
      'build' => '2021a2021a2021a2021a2021a2021a20',
      'tag' => 'flukso-2.0.2-1a',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Patch for Flukso Version 2.0.2-1'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 18,
      'version' => '2.0.3-1a',
      'release_time' => '20130911_0000',
      'build' => '2031a2031a2031a2031a2031a2031a20',
      'tag' => 'flukso-2.0.3-1a',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Patch for Flukso Version 2.0.3-1'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 19,
      'version' => '2.0.4-1a',
      'release_time' => '20130911_0000',
      'build' => '2041a2041a2041a2041a2041a2041a20',
      'tag' => 'flukso-2.0.4-1a',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Patch for Flukso Version 2.0.4-1'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 20,
      'version' => '2.0.4-2a',
      'release_time' => '20130911_0000',
      'build' => '2042a2042a2042a2042a2042a2042a20',
      'tag' => 'flukso-2.0.4-2a',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Patch for Flukso Version 2.0.4-2'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 21,
      'version' => '2.0.4-3a',
      'release_time' => '20130911_0000',
      'build' => '2043a2043a2043a2043a2043a2043a20',
      'tag' => 'flukso-2.0.4-3a',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Patch for Flukso Version 2.0.4-3'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 22,
      'version' => '2.0.4-4a',
      'release_time' => '20130911_0000',
      'build' => '2044a2044a2044a2044a2044a2044a20',
      'tag' => 'flukso-2.0.4-4a',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Patch for Flukso Version 2.0.4-4'
    ))
    ->execute();

  db_insert('logger_device_firmware')
    ->fields(array(
      'id' => 23,
      'version' => '2.0.4-rc3a',
      'release_time' => '20130911_0000',
      'build' => '204rc3a204rc3a204rc3a204rc3a204r',
      'tag' => 'flukso-2.0.4-rc3a',
      'device_type_id' => 2,
      'upgradable' => 1,
      'description' => 'Patch for Flukso Version 2.0.4-rc3a'
    ))
    ->execute();

  return st('Firmware patches have been added.');
}

/**
 * Create table logger_firmware_upgrade_request.
 */
function logger_update_7082() {

  db_create_table('logger_firmware_upgrade_request', drupal_get_schema_unprocessed('logger', 'logger_firmware_upgrade_request'));

  return st('Table logger_firmware_upgrade_request has been created.');
}

/**
 * Resize field build of table logger_device_firmware.
 */
function logger_update_7086() {

  db_change_field('logger_device_firmware', 'build', 'build',
    array(
      'type' => 'varchar',
      'length' => '40',
      'not null' => TRUE,
  ));

  return st('Field logger_meters.function has been changed.');
}

/**
 * Drops field upgrade from table logger_devices.
 */
function logger_update_7089() {

  db_drop_field('logger_devices', 'upgrade');

  return st('Field logger_devices.upgrade has been dropped.');
}

/**
 * Updates Firmware releases.
 */
function logger_update_7091() {

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '0000000000000000000000000000000000000000',
      'tag' => 'unknown',
      'upgradable' => 0
    ))
    ->condition('id', 0)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '1001001001001001001001001001001010101010',
      'upgradable' => 0
    ))
    ->condition('id', 1)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2002002002002002002002002002002020202020',
      'upgradable' => 1 
    ))
    ->condition('id', 2)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2022022022022022022022022022022220222022',
      'upgradable' => 1
    ))
    ->condition('id', 3)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2031203120312031203120312031203120312031',
      'upgradable' => 1
    ))
    ->condition('id', 4)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2041204120412041204120412041204120412041',
      'upgradable' => 1
    ))
    ->condition('id', 5)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2042204220422042204220422042204220422042',
      'upgradable' => 1
    ))
    ->condition('id', 6)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2043204320432043204320432043204220432043',
      'upgradable' => 1
    ))
    ->condition('id', 7)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2044204420442044204420442044204220442044',
      'upgradable' => 1
    ))
    ->condition('id', 8)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2044320443204432044320443204432020443204',
      'upgradable' => 1
    ))
    ->condition('id', 9)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '1001001001001001001001001001001010011001',
      'upgradable' => 0
    ))
    ->condition('id', 10)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => 'ec378baf8a24ea9bb9de48306fcd39a5f3f0315a',
      'tag' => 'hexapi-0.9.0-dev',
      'release_time' => '20130916_0000',
      'upgradable' => 1
    ))
    ->condition('id', 11)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2052205220522052205220522052205220522052',
      'upgradable' => 1
    ))
    ->condition('id', 13)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2053205320532053205320532053205320532053',
      'upgradable' => 1
    ))
    ->condition('id', 14)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2054205420542054205420542054205420542054',
      'upgradable' => 1
    ))
    ->condition('id', 15)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2021202120212021202120212021202120212021',
      'upgradable' => 1 
    ))
    ->condition('id', 16)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2021a2021a2021a2021a2021a2021a202021a202',
      'upgradable' => 1
    ))
    ->condition('id', 17)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2031a2031a2031a2031a2031a2031a2031a231a2',
      'upgradable' => 1
    ))
    ->condition('id', 18)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2041a2041a2041a2041a2041a2041a2041a241a2',
      'upgradable' => 1
    ))
    ->condition('id', 19)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2042a2042a2042a2042a2042a2042a2042a242a2',
      'upgradable' => 1
    ))
    ->condition('id', 20)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2043a2043a2043a2043a2043a2043a2043a243a2',
      'upgradable' => 1
    ))
    ->condition('id', 21)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '2044a2044a2044a2044a2044a2044a2044a244a2',
      'upgradable' => 1
    ))
    ->condition('id', 22)
    ->execute();

  db_update('logger_device_firmware')
    ->fields(array(
      'build' => '204rc3a204rc3a204rc3a204rc3a204rc3a2c3a2',
      'upgradable' => 1
    ))
    ->condition('id', 23)
    ->execute();

  return st('Firmware releases have been updated');
}

/**
 * Add field 'domains' to table logger_tokens.
 */
function logger_update_7093() {

  db_add_field('logger_tokens', 'domains', array(
        'type' => 'text',
        'not null' => FALSE,
  ));

  db_update('logger_tokens')
    ->fields(array(
      'domains' => 'www.mysmartgrid.de'
    ))
    ->condition('meter', '5715a57b0c8ec958727ab3bb206d8b6e')
    ->execute();

  return st('Field logger_tokens.domains has been added.');
}

/**
 * Resize field 'external_id' in table logger_meters.
 */
function logger_update_7094() {

  db_change_field('logger_meters', 'external_id', 'external_id',
    array(
      'type' => 'varchar',
      'length' => '64',
      'not null' => TRUE,
  ));
  return st('Field logger_tokens.external_id has been resized.');
}

/**
 * Updates the Raspberry Pi image version.
 */
function logger_update_7095() {

  db_update('logger_device_firmware')
    ->fields(array(
      'version' => '0.9.0',
      'build' => 'ec378baf8a24ea9bb9de48306fcd39a5f3f0315a',
      'tag' => 'hexapi-0.9.0-dev',
      'release_time' => '20130916_0000',
      'upgradable' => 1
    ))
    ->condition('id', 11)
    ->execute();

  return st('Raspberry Pi image version has been updated.');
}
