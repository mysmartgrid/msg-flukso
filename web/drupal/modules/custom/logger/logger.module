<?php

/**
 * Support module for charting flukso measurements.
 *
 * Copyright (c) 2008-2009 jokamajo.org
 *               2010 flukso.net
 *               2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

//Constants
define('SECOND', 1);
define('MINUTE', 60);
define('HOUR',   60 * MINUTE);
define('DAY',    24 * HOUR);
define('WEEK',    7 * DAY);
define('MONTH',  30 * DAY);
define('YEAR',   52 * WEEK);

define('CONSUMPTION_SENSOR_TYPE', 1);
define('PRODUCTION_SENSOR_TYPE',  2);

define('LOGGER_PATH', drupal_get_path('module', 'logger'));
define('LOGGER_CHART_HEIGHT', 350);
define('LOGGER_SLIDER_HEIGHT', 50);


function logger_init() {

  drupal_add_js(LOGGER_PATH . '/js/jscolor/jscolor.js');
  drupal_add_js(LOGGER_PATH . '/js/charts.js');

  //If IE
  if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE')) {
    drupal_add_js(LOGGER_PATH . '/js/dygraph/excanvas.js');
  }

  drupal_add_js(LOGGER_PATH . '/js/dygraph/strftime-min.js');
  drupal_add_js(LOGGER_PATH . '/js/dygraph/rgbcolor.js');
  drupal_add_js(LOGGER_PATH . '/js/dygraph/dygraph-canvas.js');
  drupal_add_js(LOGGER_PATH . '/js/dygraph/dygraph.js');

  jquery_ui_add(array('ui.datepicker'));
  drupal_add_css(LOGGER_PATH . '/style/ui.datepicker.css');

  drupal_add_js(LOGGER_PATH . '/js/flot/jquery.flot.js');
  drupal_add_js(LOGGER_PATH . '/js/flot/jquery.flot.stack.js');
}

function logger_perm() {
  return array(
    'view logger charts',
    'set user preferences',
    'list devices',
    'deactivate devices',
    'list sensors',
    'manage sensors'
  );
}

function logger_menu() {

  // Main operations

  $items['logger'] = array(
    'description'      => 'Show the home page',
    'page callback'    => '_logger_home_page',
    'page arguments'   => array(1),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview'] = array(
    'title'            => 'Overview',
    'description'      => 'Show the project overview',
    'page callback'    => '_logger_overview_page',
    'page arguments'   => array(1),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['energy'] = array(
    'title'            => 'Your energy consumption and production',
    'description'      => 'Show the energy consumption page',
    'page callback'    => '_logger_energy_page',
    'page arguments'   => array(1),
    'access arguments' => array('view logger charts'),
    'type'             => MENU_CALLBACK
  );

  $items['energy/relative'] = array(
    'title'            => 'Your relative energy consumption',
    'description'      => 'Show the relative energy consumption page',
    'page callback'    => '_logger_relative_energy_consumption_page',
    'access arguments' => array('view logger charts'),
    'type'             => MENU_CALLBACK
  );

  $items['power'] = array(
    'title'            => 'Your power consumption and production',
    'description'      => 'Show the power consumption page',
    'page callback'    => '_logger_power_page',
    'page arguments'   => array(1),
    'access arguments' => array('view logger charts'),
    'type'             => MENU_CALLBACK
  );

  $items['logger/setvariable'] = array(
    'title'            => 'Sets a logger variable',
    'page callback'    => '_logger_set_variable',
    'page arguments'   => array(2, 3),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/remove/user'] = array(
    'title'            => 'Removes a chart series',
    'page callback'    => '_logger_remove_user',
    'page arguments'   => array(3),
    'access arguments' => array('view logger charts'),
    'type'             => MENU_CALLBACK
  );

  $items['logger/file'] = array(
    'title'            => 'Downloads a chart file',
    'page callback'    => '_logger_download_chart_data_file',
    'page arguments'   => array(2),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );


  //Device operations

  $items['user/%user_uid_optional/devices'] = array(
    'title'            => 'Devices',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('logger_userdevices_form'),
    'access callback'  => '_logger_account_access',
    'access arguments' => array('list devices', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['device/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/devices']['title'],
    'page callback'    => '_logger_device_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_device_access',
    'access arguments' => array('deactivate devices', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );


  //Sensor operations

  $items['user/%user_uid_optional/sensors'] = array(
    'title'            => 'Sensors',
    'page callback'    => '_logger_user_sensors_page',
    'access callback'  => '_logger_account_access',
    'access arguments' => array('list sensors', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['sensor/edit'] = array(
    'title'            => 'Sensor Edition',
    'page callback'    => '_logger_sensor_edition_page',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('manage sensors', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/sensors']['title'],
    'page callback'    => '_logger_sensor_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('manage sensors', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/activate'] = array(
    'title'            => $items['sensor/edit']['title'],
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('logger_sensor_form', 2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('manage sensors', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );


  //Other operations

  $items['admin/settings/logger'] = array(
    'title'            => 'Logger settings',
    'description'      => 'Configure settings for logging metering values.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_logger_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['user/%user_uid_optional/privacy'] = array(
    'title'            => 'Privacy',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('logger_userprivacy_form'),
    'access arguments' => array('set user preferences'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 2,
  );
  return $items;
}

/**
 * Forwards request to a suitable home page.
 * 
 * @param $arg  any page argument.
 * @return the home page.
 */
function _logger_home_page($arg = NULL) {

  if ($arg) {
    drupal_goto('logger', NULL, NULL, 301);
  }

  if (user_access('view logger charts')) {
    return _logger_energy_page('week');

  } else {
    return _logger_overview_page('hour');
  }
}

/**
 * Builds the power consumption page.
 *
 * @param $interval The time interval.
 * @return the power consumption page.
 */
function _logger_power_page($interval) {

  module_load_include('inc', 'logger', 'logger.rrd');

  $interval = $interval ? $interval : 'hour';
  if (!_logger_get_default_time_window($interval)) {
    drupal_goto('power', NULL, NULL, 301);
  }

  drupal_set_title(t('Your power consumption and production'));

  $xvalue1 = _logger_get_xvalue(1);
  $xvalue2 = _logger_get_xvalue(2);
  $yvalue1 = _logger_get_yvalue(1);
  $yvalue2 = _logger_get_yvalue(2);
  $types = array(CONSUMPTION_SENSOR_TYPE, PRODUCTION_SENSOR_TYPE);
  $unit = _logger_get_variable('powerchart_unit', 'watt');
  $price = _logger_get_variable('price', NULL);

  $sensors = array_merge(
    _logger_get_user_sensors($types),
    _logger_get_subscribed_sensors($types)
  );

  $chart = _logger_create_chart_object('power', $types, $interval, $unit, FALSE, $sensors, array($xvalue1, $xvalue2), array($yvalue1, $yvalue2), FALSE, $price);

  return theme('logger_power_chart_area', $chart) .

    drupal_get_form('logger_powerchart_form', $chart);
}

/**
 * Builds the overview page.
 *
 * @param $interval The time interval.
 * @return the overview page.
 */
function _logger_overview_page($interval) {

  $interval = $interval ? $interval : 'hour';
  if (!_logger_get_default_time_window($interval)) {
    drupal_goto('overview', NULL, NULL, 301);
  }

  drupal_set_title(t('Overall View'));

  $cache_id = 'logger_overview';
  $cache = cache_get($cache_id, 'cache_page');

  if ($cache->data) {
    $output = $cache->data;

  } else {

    //General explanation
    $output = theme('logger_overview_topic', NULL,
      t('<b>mySmartGrid</b> is the smart device control for your home. ' .
      'It enables you to understand your energy consumption and share your ' .
      'experiences with others.'), 'content/das-projekt');

    //Latest blogpost
    $sql = 'SELECT nid FROM {node} WHERE type = "%s" ORDER BY created DESC LIMIT 1';
    $result = db_fetch_object(db_query($sql, "blogpost"));

    if ($result) {

      $blog = node_load(array('nid' => $result->nid));

      $output .= theme('logger_overview_topic', t('Blog: ') . $blog->title, $blog->teaser, 'blog');
    }

    //Counters
    $sql = "SELECT count(*) FROM {logger_devices} d WHERE d.uid <> %d";
    $devcounter = db_result( db_query($sql, 0));

    $sql = "
      SELECT
        count(*)
      FROM
        {users} u
      WHERE
        EXISTS(
          SELECT
            1
          FROM
            {logger_devices} d
          WHERE
            d.uid = u.uid
        )";

    $usercounter = db_result( db_query($sql));

    $output .= theme('logger_overview_topic', t('Total Consumption of All Participants'),
      t('Currently, <b>@devcounter</b> Flukso devices are installed ' .
        'in <b>@usercounter</b> households. The following chart shows their ' .
        'aggregate electricity consumption.',
        array(
          '@devcounter'  => $devcounter,
          '@usercounter' => $usercounter))) . '<br>';

    cache_set($cache_id, $output, 'cache_page', time() + 1 * DAY);
  }

  $types = array(CONSUMPTION_SENSOR_TYPE);
  $sensors = _logger_get_active_sensors($types);

  $chart = _logger_create_chart_object('overview', $types, $interval, 'watt', FALSE, $sensors);

  $output .= theme('logger_power_chart_area', $chart);

  return $output;
}

/**
 * Builds the relative energy consumption page.
 *
 * @return the relative energy consumption page.
 */
function _logger_relative_energy_consumption_page() {

  $meters = _logger_get_variable('selected_meters', 1);
  $all_meters = array();

  $types = array(CONSUMPTION_SENSOR_TYPE);
  $all_sensors = _logger_get_user_sensors($types);
  $unit = _logger_get_variable('relativechart_unit', 'kWh');
  $price = _logger_get_variable('price', NULL);

  $sensors = array();
  foreach($all_sensors as $sensor) {
    $all_meters[] = $sensor->meter;
    if ($meters[$sensor->meter]) {
      $sensors[] = $sensor;
    }
  }

  if (empty($sensors)) {
    $sensors = $all_sensors;
    _logger_set_variable('selected_meters', $all_meters);
  }

  $chart = _logger_create_chart_object('relative', $types, 'year', $unit, TRUE, $sensors, array(0, 0), array(0, 0), FALSE, $price);

  drupal_set_title(t('Your relative energy consumption'));

  return t('The following chart allows you to compare current and previous levels of ' .
    'energy consumption in six different time frames: hour, day, week, month, and year. ' .
    'The bars are explained in the legend bellow.') . '<br><br>' .
  
    theme('logger_energy_chart_area', $chart) .

    drupal_get_form('logger_relativechart_form', $chart);
}

/**
 * Builds the energy consumption page.
 *
 * @param $interval The time interval.
 * @return the energy consumption page.
 */
function _logger_energy_page($interval) {

  global $user;

  $interval = $interval ? $interval : 'week';
  $window = _logger_get_default_time_window($interval);
  if (!$window) {
    drupal_goto('energy', NULL, NULL, 301);
  }

  if ($interval == 'year') {
    $start = mktime(0, 0, 0, date('n') - 11, 1);
    $end   = mktime(0, 0, 0, date('n') +  1, 1) - 1;

  } else {
    $sub_interval = _logger_get_sub_interval($interval);
    $sub_time_window = _logger_get_default_time_window($sub_interval);

    $now = time();
    $start = $now - (round($window / $sub_time_window) - 1) * $sub_time_window - $now % $sub_time_window;
    $start -= $interval == 'month' ? 3 * DAY : 0;
    $end = $start + round($window / $sub_time_window) * $sub_time_window;
  }

  $all_types = array_keys(logger_get_sensor_types_options($user->uid));
  $selected_types_options = _logger_get_variable('selected_sensor_types', array());

  //User can change sensor types any time
  foreach ($selected_types_options as $type => $selected) {
    if ($selected && in_array($type, $all_types)) {
      $types[] = $type;
    }
  }
  if (empty($types)) {
    $types = $all_types;
    _logger_set_variable('selected_sensor_types', $types);
  }

  $sensors = _logger_get_user_sensors($types);
  $aggregate_sensors = _logger_get_variable('aggregate_sensors', 1);
  $unit = _logger_get_variable('energychart_unit', 'kWh');
  $price = _logger_get_variable('price', NULL);

  $chart = _logger_create_chart_object('energy', $types, $interval, $unit, FALSE, $sensors, array($start, $end), array(0, 0), $aggregate_sensors, $price);
  $consumed = $chart->data['last'][CONSUMPTION_SENSOR_TYPE];
  $produced = $chart->data['last'][PRODUCTION_SENSOR_TYPE];

  drupal_set_title(t('Your energy consumption and production'));

  $today = array('day' => 'In the last 6 hours', 'week' => 'Today', 'month' => 'This week', 'year' => 'This month');

  return t("!today you have consumed %consumed %unit and produced %produced %unit so far. " .
    "The following chart shows your energy consumption and production !interval.",
    array('!today'  => t($today[$interval]),
        '%consumed' => number_format($consumed, 2, '.', ''),
        '%produced' => number_format($produced, 2, '.', ''),
        '%unit'     => t($unit),
        '!interval' => t("along the $interval"))) . '<br><br>' .

    theme('logger_energy_chart_area', $chart) .

    drupal_get_form('logger_energychart_form', $chart);
}

/**
 * Creates an object to hold chart parameters.
 *
 * @param $context            The page where the chart is going to be placed (overview or logger).
 * @param $types              The array of sensor types.
 * @param $interval           The time interval.
 * @param $unit               The chart unit.
 * @param $stacked            Whether the chart has stacked bars or not.
 * @param $sensors            The sensors whose values are plotted on the chart.
 * @param $xaxis              An array containing the minimum and maximum timestamps of the x axis.
 * @param $yaxis              An array containing the minimum and maximum values of the y axis.
 * @param $aggregate_sensors  Whether the sensors series should be aggregated.
 * @param $price              The price of KWh, when the unit is 'eur' or 'eur/year'.
 * @return the chart object.
 */
function _logger_create_chart_object($context, $types, $interval, $unit, $stacked, $sensors, $xaxis = array(0, 0), $yaxis = array(0, 0), $aggregate_sensors = FALSE, $price = NULL) {

  $chart = new stdClass();
  $chart->context = $context;
  $chart->types = $types;
  $chart->interval = $interval;
  $chart->unit = $unit;
  $chart->price = $price;
  $chart->stacked = $stacked;

  $chart->resolution = _logger_get_resolution($interval);
  $chart->offset = _logger_get_timezone_offset();
  $chart->colors = _logger_get_series_colors($context);
  $chart->period = _logger_get_period($interval, $chart->resolution, $xaxis[0], $xaxis[1]);
  $chart->sensors = $sensors;
  $chart->aggregate_sensors = $aggregate_sensors;

  if (!($xaxis[0] > 0 && $xaxis[1] > 0)) {
    $xaxis[1] = time();
    $xaxis[0] = $xaxis[1] - _logger_get_default_time_window($interval);
  }
  $chart->yaxis = $yaxis;
  $chart->xaxis = $xaxis;

  $lifetime = 15 * MINUTE;
  $t1 = $chart->period['start'] - ($chart->period['start'] % $lifetime);
  $t2 = $chart->period['end']   - ($chart->period['end']   % $lifetime);
  $unique_id = "$context " . implode(',', $types) . " $unit $price $chart->resolution $t1 $t2 $aggregate_sensors";
  foreach ($chart->sensors as $sensor) {
    $unique_id .= " $sensor->meter $sensor->type";
  }

  $chart->id = 'logger_' . $interval . '_chart_data_' . md5($unique_id);
  $cache = cache_get($chart->id, 'cache_page');
  $chart->data = $cache->data;

  if (!$chart->data) {
    $get_data = '_logger_get_' . $chart->context . '_chart_data';
    $chart->data = $get_data($chart);
    
    cache_set($chart->id, $chart->data, 'cache_page', time() + $lifetime);
  }
  return $chart;
}

/**
 * Downloads a chart data file.
 *
 * @param $cache_id  The chart cache id.
 */
function _logger_download_chart_data_file($cache_id) {

  drupal_set_header('Content-Type: text/plain');
  drupal_set_header('Content-disposition: attachment; filename=chart-data-file.txt');

  $cache = cache_get($cache_id, 'cache_page');
  if ($cache->data) {
    $header = t('Serie');
    $s = 1;

    foreach($cache->data['series'] as $uid => $userdata) {
      foreach($userdata as $username => $sensors) {
        foreach($sensors as $sensor => $typedata) {
          foreach($typedata as $type => $measurements) {
            $header .= ',S' . $s++;

            foreach($measurements as $timestamp => $value) {
              $values[$timestamp] .= ',' . $value;
            }
          }
        }
      }
    }

    $lines = '';
    foreach($values as $timestamp => $values_list) {
      $lines .= str_replace(array('&nbsp;', '<br>'), ' ', $timestamp); //Removes HTML tags
      $lines .= $values_list . "\r\n"; //These characters work both in Linux and Windows
    }
  }
  print $header . PHP_EOL . $lines;
  exit(0);
}

/**
 * Returns an array containing all relative energy consumption chart data.
 *
 * @return the chart data.
 */
function _logger_get_relative_chart_data($chart) {

  global $user;
  module_load_include('inc', 'logger', 'logger.rrd');

  $now = getdate();
  $extra_days['month'] = $now['mday'] - 1;                       //Days since 1st day of the month
  $extra_days['year']  = $now['yday'];                           //Days since 1st day of the year
  $extra_days['week']  = $now['wday'] > 0? $now['wday'] - 1 : 6; //Days since last Monday

  $intervals = array(
    'hour'  => t('Hour'),
    'day'   => t('Day'),
    'week'  => t('Week'),
    'month' => t('Month'),
    'year'  => t('Year')
  );

  $legend = array(
    array('Serie' => '<b>' . t('Current')  . '</b>' . ' - ' . t('How much has been consumed so far in the current time frame.')),
    array('Serie' => '<b>' . t('Previous') . '</b>' . ' - ' . t('How much was consumed in the previous time frame.')),
    array('Serie' => '<b>' . t('Excess')   . '</b>' . ' - ' . t('How much the current consumption has exceeded the previous one.')),
  );

  foreach ($intervals as $interval => $label) {

    $resolution = _logger_get_resolution($interval);
    $adjustment = $extra_days[$interval] * DAY + ($now[0] % ($interval == 'hour' ? HOUR : DAY));

    if ($interval == 'month') {
      $last_day = getdate($now[0] - $adjustment - 12 * HOUR);
      $window = $last_day['mday'] * DAY; //Consider exactly 1 month, and not simply 30 days
    } else {
      $window = _logger_get_default_time_window($interval);
    }

    $time1 = $now[0] - $adjustment - $window;
    $time2 = $time1 + $window;
    $time3 = $time2 + $window;

    $period1 = array('start' => $time1, 'end' => $time2 - 1); //Until the last second
    $period2 = array('start' => $time2, 'end' => $time3 - 1); //Until the last second

    $current  = logger_rrd_query_energy($chart->sensors, $chart->unit, $interval, $chart->offset, $period2, $resolution, $chart->price);
    $previous = logger_rrd_query_energy($chart->sensors, $chart->unit, $interval, $chart->offset, $period1, $resolution, $chart->price);

    $so_far    = min($previous, $current);
    $remaining = max($previous - $current, 0);
    $excess    = max($current - $previous, 0);

    $series['current'][$label]  = @($so_far / $previous) * 100;
    $series['previous'][$label] = @($remaining / $previous) * 100;
    $series['excess'][$label]   = @($excess / ($previous? $previous : $excess)) * 100;

    $data_labels['current'][0][$label]  = $so_far;
    $data_labels['previous'][0][$label] = $previous;
    $data_labels['excess'][0][$label]   = $excess ? $previous + $excess : 0;

    $legend[0][$label] = _logger_format_period($interval, $period2, $chart->offset);
    $legend[1][$label] = _logger_format_period($interval, $period1, $chart->offset);
    $legend[2][$label] = _logger_format_period($interval, $period2, $chart->offset);
  }
  $data['series'][$user->uid][$user->name][] = $series;
  $data['labels'] = $data_labels;
  $data['legend'] = $legend;

  return $data;
}

function _logger_format_period($interval, $period, $offset) {

  $start = $period['start'] + $offset;
  $end   = $period['end'] + $offset;

  switch ($interval) {
    case 'hour':
      return date('H:i', $start);

    case 'dayquarter':
      return _logger_format_period_line($start, $end, 'H:i');

    case 'day':
      return date('d/m', $start);

    case 'week':
      return _logger_format_period_line($start, $end, 'd/m');

    case 'month':
      return t(date('F', $start));

    case 'year':
      return t(date('Y', $start)) . '<br>';
  }
}

function _logger_format_period_line($start, $end, $format) {
  return t('from: ') . '&nbsp;&nbsp;' . date($format, $start) . '<br>' .
         t('to: ')   . '&nbsp;&nbsp;' . date($format, $end);
}

/**
 * Returns an array containing all energy consumption chart data.
 *
 * @return the chart data.
 */
function _logger_get_energy_chart_data(&$chart) {

  global $user;
  module_load_include('inc', 'logger', 'logger.rrd');
  $last = array();

  $groups = array();
  foreach ($chart->sensors as &$sensor) {
    $key = $chart->aggregate_sensors? $sensor->type : $sensor->meter;
    $groups[$key][] = $sensor;
  }

  $sub_interval = _logger_get_sub_interval($chart->interval);
  $sub_time_window = _logger_get_default_time_window($sub_interval);

  foreach ($groups as $key => &$series_sensors) {

    $min_day = 0;
    $max_day = 0;
    $min = NULL;
    $max = NULL;
    $sum = 0;
    $total = 0;
    $series = array();
    $data_labels = array();

    $from = $chart->xaxis[0];
    $to = $chart->xaxis[1] - $sub_time_window;
    for ($time = $from; $time <= $to; $time += $sub_time_window) {

      if ($chart->interval == 'year') {
        $start = mktime(0, 0, 0, date('n', $time + WEEK),     1, date('Y', $time + WEEK));
        $end   = mktime(0, 0, 0, date('n', $time + WEEK) + 1, 1, date('Y', $time + WEEK)) - 1;

      } else {
        $start = $time;
        $end = $time + $sub_time_window - 1;
      }

      $period = array('start' => $start, 'end' => $end); //from 00:00:00 until 23:59:59
      $value = logger_rrd_query_energy($series_sensors, $chart->unit, $sub_interval, $chart->offset, $period, $chart->resolution, $chart->price);

      switch ($chart->interval) {
        case 'day':
          $formatted_time = t(date('l', $start)) . ' ' . t('day quarter ' . (ceil(date("H", $end) / 6)));
          $complement = _logger_format_period('dayquarter', $period, 0);
          break;
        case 'week':
          $formatted_time = t(date("l", $start));
          $complement = date("d-M", $start);
          break;
        case 'month':
          $formatted_time = t('Week') . ' ' . date("W", $start);
          $complement = _logger_format_period('week', $period, 0);
          break;
        case 'year':
          $formatted_time = t(date("M", $start));
          $complement = date("Y", $start);
          break;
      }
      $title = $formatted_time . '<br>' . $complement;

      if (!$min || ($value < $min && $time < $to)) {
        $min = $value;
        $min_day = $formatted_time;
      }

      if (!$max || $value > $max) {
        $max = $value;
        $max_day = $formatted_time;
      }

      $sum += $value;
      $total++;

      $series[$title] = $value;
      $data_labels[$title] = $value;
    }

    $sensor = $series_sensors[0];
    $type_id = $sensor->type_id;
    $last[$type_id] = $last[$type_id] + $value;

    if ($chart->aggregate_sensors) {
      $sensor = new stdClass();
      $sensor->uid = $user->uid;
      $sensor->username = $user->name;
      $sensor->function = t('All');
      $sensor->type = t($key);
    }

    $data['series'][$sensor->uid][$sensor->username][$sensor->function][t($sensor->type)] = $series;
    $data['labels'][$sensor->function][t($sensor->type)] = $data_labels;
    $data['legend'][] = _logger_create_energy_legend_line($sensor, $min, $max, $total, $sum, $min_day, $max_day, $chart->interval);
  }
  $data['last'] = $last;

  return $data;
}

function _logger_create_energy_legend_line(&$sensor, $min, $max, $total, $sum, $min_day, $max_day, $interval) {

  return array(
    t('User')   => $sensor->username,
    t('Sensor') => $sensor->function,
    t('Type')   => t($sensor->type),
    t('Min')    => $total > 0 ? _logger_format_energy_legend_day($min, $min_day, $interval) : '',
    t('Max')    => $total > 0 ? _logger_format_energy_legend_day($max, $max_day, $interval) : '',
    t('Avg')    => $total > 0 ? $sum / $total : '',
    t('Sum')    => $total > 0 ? $sum : ''
  );
}

function _logger_format_energy_legend_day($value, $formatted_time, $interval) {

  $prep = $interval == 'year' ? 'in' : 'am';

  return t("%value $prep %day", array(
    '%value' => number_format($value, 2, '.', ''), 
    '%day'   => $formatted_time));
}

/**
 * Returns an array containing all power consumption chart data.
 * 
 * @return the chart data.
 */
function _logger_get_power_chart_data($chart) {

  global $user;
  module_load_include('inc', 'logger', 'logger.rrd');

  $i = 0;
  foreach ($chart->sensors as &$sensor) {

    $measurements = logger_rrd_query_sensor($chart->interval, $sensor, $chart->unit, $chart->offset, $chart->period, $chart->resolution, $chart->price);

    $values = _logger_format_power_series_data($chart, $measurements);

    $data['series'][$sensor->uid][$sensor->username][$sensor->function][$sensor->type] = $values;

    $operations = ($sensor->uid > 0 && $sensor->uid != $user->uid)?
      '<a href="javascript: void(0)" 
        OnClick="javascript: removePowerSeries(' . "$sensor->uid, $i, '$sensor->username'" . ');">' .
        t('Remove') . '</a>' : '';

    $data['legend'][] = _logger_create_power_legend_line($sensor->username, $sensor->function, t($sensor->type), $i++, $operations);
  }
  return $data;
}

/**
 * Returns an array containing all overview chart data.
 *
 * @return the chart data.
 */
function _logger_get_overview_chart_data($chart) {

  module_load_include('inc', 'logger', 'logger.rrd');

  $measurements = logger_rrd_query_agg($chart->interval, $chart->sensors, $chart->unit, $chart->offset, $chart->period, $chart->resolution);

  $values = _logger_format_power_series_data($chart, $measurements);
  $type = $chart->sensors[0]->type;//For instance, just consumption

  $data['series'][0][t('All')][t('All')][$type] = $values;
  $data['legend'][] = _logger_create_power_legend_line(t('All'), t('All'), t($type), 0);

  return $data;
}

function _logger_format_power_series_data($chart, $measurements) {

  $start = $chart->period['start'] + $chart->offset - $chart->period['start'] % $chart->resolution;
  $end   = $chart->period['end']   + $chart->offset - $chart->period['end']   % $chart->resolution;

  $diff = $chart->offset / HOUR;
  $tz = 'GMT' . ($diff < 0? '-' : '+') . (abs($diff) > 9 ? '' : '0') . abs($diff) . '00';

  for($timestamp = $start; $timestamp <= $end; $timestamp += $chart->resolution) {

    $key = date('Y-m-d H:i', $timestamp) . " $tz";
    $value = $measurements[$timestamp];

    $formatted[$key] = $value? number_format($value, 3, '.', '') : '';
  }
  return $formatted;
}

function _logger_create_power_legend_line($username, $sensor, $type, $i, $operations = '') {

  return array(
      t('User')       => $username,
      t('Sensor')     => $sensor,
      t('Type')       => $type,
      t('Max')        => "<div id='max$i'/>",
      t('Min')        => "<div id='min$i'/>",
      t('Avg')        => "<div id='avg$i'/>",
      t('Last')       => "<div id='last$i'/>",
      t('Operation')  => $operations
  );
}

/**
 * Returns an array containing all sensors owned by the user.
 *
 * @param $types  The types of sensors to be returned.
 * @return the array of user sensors.
 */
function _logger_get_user_sensors($types) {

  global $user;
  $sensors = array();

  if (!empty($types)) {

    $sql = "
      SELECT
        lm.uid,
        '%s' AS username,
        lm.meter,
        lm.function,
        st.name AS type,
        st.id AS type_id,
        lm.unit,
        lu.private
      FROM
        {logger_meter_type} st,
        {logger_meters} lm
        INNER JOIN {logger_users} lu ON lm.uid = lu.uid
      WHERE
        lm.uid = %d AND
        lm.type IN (%s) AND
        lm.type = st.id AND
        lm.function IS NOT NULL
      ORDER BY
        lm.function";

    $result = db_query($sql, $user->name, $user->uid, implode(',', $types));

    while ($sensor = db_fetch_object($result)) {
      $sensors[] = $sensor;
    }
  }
  return $sensors;
}

/**
 * Returns an array containing all sensors from other users, selected to be plotted on the chart.
 *
 * @param $types  The types of sensors to be returned.
 * @return the array of user sensors.
 */
function _logger_get_subscribed_sensors($types) {

  global $user;
  $sensors = array();

  if (user_access('view logger charts') && !empty($types)) {

    $sql = "
      SELECT
        u.uid,
        u.name AS username,
        lm.meter,
        lm.function,
        st.name AS type,
        st.id AS type_id,
        lm.unit,
        lu.private
      FROM
        {logger_meter_type} st,
        ((({users} u
        INNER JOIN {user_relationships} ur ON u.uid = ur.requestee_id)
        INNER JOIN {user_relationship_types} urt ON ur.rtid = urt.rtid)
        INNER JOIN {logger_meters} lm ON u.uid = lm.uid)
        INNER JOIN {logger_users} lu ON u.uid = lu.uid
      WHERE
        ur.requester_id = %d AND
        urt.name = '%s' AND
        lm.type IN (%s) AND
        lm.type = st.id AND
        lm.function IS NOT NULL
      ORDER BY
        ur.rid";

    $result = db_query($sql, $user->uid, 'subscription', implode(',', $types));

    while($sensor = db_fetch_object($result)) {
      $sensors[] = $sensor;
    }
  }
  return $sensors;
}

/**
 * Returns an array containing all active sensors.
 *
 * @param $type       The types of sensors to be returned.
 * @return the array of user sensors.
 */
function _logger_get_active_sensors($types) {

  $sensors = array();

  if (!empty($types)) {

    $sql = "
      SELECT
        lm.meter,
        st.name AS type,
        st.id AS type_id
      FROM
        {logger_meter_type} st,
        {logger_meters} lm
      WHERE
        lm.uid > 0 AND
        lm.type = st.id AND
        lm.type IN (%s) AND
        lm.function IS NOT NULL";

    $result = db_query($sql, implode(',', $types));

    while ($sensor = db_fetch_object($result)) {
      $sensors[] = $sensor;
    }
  }
  return $sensors;
}

/**
 * Returns an array of user devices' serial numbers indexed by their respective
 * hash codes.
 *
 * @return the array of devices.
 */
function logger_get_devices_options() {

  global $user;

  $devices = array();
  if ($user->uid) {

    $sql = "SELECT serial, device FROM {logger_devices} WHERE uid = %d ORDER BY serial";
    $result = db_query($sql, $user->uid);

    while ($row = db_fetch_array($result)) {
      $devices[$row['device']] = $row['serial'];
    }
  }
  return $devices;
}

/**
 * Returns the user timezone offset.
 *
 * @return the user timezone offset.
 */
function _logger_get_timezone_offset() {

  global $user;

  if ($user->uid) {
    return $user->timezone;

  } else { //If user is not logged in

    //Returns timezone used in the browser. Auto Timezone option must be turned on.
    return $_SESSION['timezone'];
  }
}

function logger_theme() {

  return array(
    'logger_power_chart_area' => array(
      'arguments' => array(
        'chart' => NULL),
    ),

    'logger_energy_chart_area' => array(
      'arguments' => array(
        'chart' => NULL),
    ),

    'logger_overview_topic' => array(
      'arguments' => array(
        'title' => NULL,
        'body' => NULL,
        'link' => NULL),
    ),

    'logger_userdevices' => array(
      'arguments' => array(
        'form' => NULL),
      'file' => 'logger.admin.inc',
    ),

    'logger_userdevices_list' => array(
      'arguments' => array(
        'items' => NULL),
      'file' => 'logger.admin.inc',
    ),

    'logger_usersensors_list' => array(
      'arguments' => array(
        'items' => NULL),
      'file' => 'logger.admin.inc',
    ),

    'logger_smoothing_level' => array(
      'arguments' => array(
        'element' => NULL),
    ),

    'logger_value_range' => array(
      'arguments' => array(
        'element' => NULL),
    ),

    'logger_time_period' => array(
      'arguments' => array(
        'element' => NULL),
    ),

    'logger_color_picker' => array(
      'arguments' => array(
        'chartId'   => NULL,
        'index'     => NULL,
        'colors'    => NULL),
    ),

    'logger_unit_selector' => array(
      'arguments' => array(
        'element' => NULL),
    ),
  );
}

/**
 * Builds a topic of the Overview page.
 *
 * @param $title  The topic title.
 * @param $body   The topic body.
 * @param $link   The topic link.
 * @return the topic.
 */
function theme_logger_overview_topic($title, $body, $link = NULL) {

  if($title) {
    $output .= '<br><h3 class="node-headline">' . $title . '</h3>';
  }
  $output .= "<p> $body </p>";

  if($link) {
    $output .= '<p>' . l(t('read more'), $link) . '</p>';
  }
  return $output;
}

/**
 * Builds the power chart area.
 *
 * @param $chart   The power chart object.
 * @return the power chart area output.
 */
function theme_logger_power_chart_area($chart) {

  $xvalue1 = $chart->xaxis[0] * 1000;
  $xvalue2 = $chart->xaxis[1] * 1000;
  $yvalue1 = $chart->yaxis[0] + 0;
  $yvalue2 = $chart->yaxis[1] + 0;

  $chart_properties = array(
    'height'             => LOGGER_CHART_HEIGHT,
    'dateWindow'         => "[$xvalue1, $xvalue2]",
    'drawCallback'       => 'updatePowerChartForm',
    'zoomCallback'       => 'updateSliderChart',
    'pointClickCallback' => 'addPowerAnnotation'
  );

  if ($yvalue1 >= 0 && $yvalue2 > 0) {
    $chart_properties['valueRange'] = "[$yvalue1, $yvalue2]";
  }

  $slider_properties = array(
    'height'           => LOGGER_SLIDER_HEIGHT,
    'gridLineColor'    => '"transparent"',
    'yValueFormatter'  => 'hideZero',
    'zoomCallback'     => 'updatePowerChart',
    'clickCallback'    => 'slidePowerChart',
    'underlayCallback' => 'highlightPowerChart'
  );

  $options = _logger_get_power_units_options();
  $unit = $options[$chart->unit];

  return
    _logger_create_interval_menu($chart->context) .
    '<div>' . t($unit) . '</div>' .

    _logger_create_dygraph('powerChart', $chart, TRUE, $chart_properties) .
    _logger_create_dygraph('sliderChart', $chart, false, $slider_properties) .

    _logger_create_chart_legend($chart);
}

/**
 * Builds the energy consumption chart area.
 *
 * @param $chart   The energy consumption chart object.
 * @return the chart area output.
 */
function theme_logger_energy_chart_area($chart) {

  if (!$chart->data['series'] || !$chart->data['labels']) {
    return "<div style='width: 640px; height: " . LOGGER_CHART_HEIGHT . "px;'></div>";
  }

  foreach ($chart->data['series'] as $uid => $userdata) {
    foreach($userdata as $username => $sensors) {
      foreach($sensors as $sensor => $sensordata) {
        foreach($sensordata as $type => $values) {
          $series[] = implode(', ', $values);
        }
      }
    }
  }
  $names = array_keys($values);

  foreach ($chart->data['labels'] as $function => $typedata) {
    foreach ($typedata as $type => $values) {
      $data_labels[] = implode(', ', $values);
    }
  }

  $id = $chart->context . 'Chart';
  $menu = $chart->context == 'energy' ? _logger_create_interval_menu($chart->context) : '';

  return " $menu
    <div id='$id' style='width: 640px; height: " . LOGGER_CHART_HEIGHT . "px;'></div>
    <script type='text/javascript'>
      $id = createBarChart('$id',
        [ [ " . implode('], [' , $series)        . " ] ],
        ['"   . implode("', '" , $names)         . "'],
        ['"   . implode("', '" , $chart->colors) . "'],
        [ [ " . implode('], [' , $data_labels)   . " ] ], " .
        ($chart->stacked ? 'true' : 'false') . ");
    </script>" .
                
    '<br>' . t('Unit') . ': ' . t($chart->unit) .

    '<br><br>' . _logger_create_chart_legend($chart);
}

/**
 * Creates a Dygraph chart.
 *
 * @param $id             The chart div id.
 * @param $chart          The chart object.
 * @param $create_labels  If a div needs to be created to show labels.
 * @param $properties     The Dygraph properties.
 * @return the Dygraph output.
 */
function _logger_create_dygraph($id, $chart, $create_labels, $properties) {

  $properties = array_merge($properties, array(
    'labelsDiv'         => '"chartLabels"',
    'colors'            => '["' . implode('","', $chart->colors) . '"]',
    'width'             => 640,
    'yAxisLabelWidth'   => 50,
    'axisLabelFontSize' => 12,
    'includeZero'       => 'true',
    'stepPlot'          => _logger_get_variable('step_plot', 0),
    'rollPeriod'        => _logger_get_variable('smooting_level', 1)
  ));

  if ($create_labels) {
    $labels_output = '<div id=' . $properties['labelsDiv'] . ' style="min-height: 20px; padding-bottom: 10px;"></div>';
  }

  foreach ($properties as $key => $value) {
    $pairs[] = "$key: $value";
  }

  return '<div id="' . $id . '"></div><br>' .
    $labels_output .
    '<script type="text/javascript">' .
        $id . ' = new Dygraph(
          document.getElementById("' . $id . '"),
          "/logger/file/' . $chart->id . '", {' .
          implode(', ', $pairs) . ' }
      );
    </script> ';
}

/**
 * Creates the chart intervals' horizontal menu.
 *
 * @param $context  The page where the menu is going to be placed.
 * @return the list of intervals' menus.
 */
function _logger_create_interval_menu($context) {

  if ($context == 'energy') {
    $items = array(
      l(t('Day'),    "$context/day"),
      l(t('Week'),   "$context/week"),
      l(t('Month'),  "$context/month"),
      l(t('Year'),   "$context/year")
    );

  } else {
    $items = array(
      l(t('Hour'),   "$context/hour"),
      l(t('Day'),    "$context/day"),
      l(t('3 Days'), "$context/days"),
      l(t('Week'),   "$context/week"),
      l(t('Month'),  "$context/month"),
      l(t('Year'),   "$context/year")
    );
  }
  return theme_item_list($items, NULL, 'ul', array('class' => 'tabs secondary'));
}

/**
 * Builds the chart legend.
 *
 * @param $chart  The chart object.
 * @return the chart legend table.
 */
function _logger_create_chart_legend($chart) {

  $data = $chart->data['legend'];
  $header = array(
    array('data' => t('Color'))
  );

  if (!$data) {
    return '';
  }

  foreach ($data as $line_id => $cells) {

    $mark = theme('logger_color_picker', $chart->context, $line_id, $chart->colors);

    $lines[$line_id] = array(
      array('data' => $mark)
    );

    foreach ($cells as $title => $value) {

      if (is_numeric($value)) {
        $value = $value > 0 ? number_format($value, 2) : '';
        $align = 'right';
      } else {
        $align = 'left';
      }

      $lines[$line_id][] = array('data' => $value, 'align' => $align);
      $header[$title] = array('data' => t($title));
    }
  }
  return theme('table', $header, $lines, array('id' => 'logger-legend-table')) .
    '<p align="right">' . l(t('Save Data'), "logger/file/" . $chart->id) . '</p>';
}

/**
 * Returns the list of colors used in chart series.
 *
 * @param $chart_id   The chart id.
 * @return array of colors.
 */
function _logger_get_series_colors($chart_id) {

  $palettes['power'] = array(
    '#0000FC', //BLUE
    '#C11700', //RED
    '#4D7060', //GREEN4
    '#B54FC6', //PINK
    '#F37E2B', //ORANGE
    '#809090', //GREY
    '#665C00', //BROWN
    '#050305', //BLACK
    '#0080FF', //SKYBLUE
    '#00FF00', //GREEN2
    '#DED00F', //BROWN2
    '#377037', //GREEN
    '#F27D79', //PINK2
    '#00ffff', //CYAN
    '#FBEB0D', //YELLOW
    '#C0C0C0', //GRAY2
    '#BFD9D3', //GREEN5
    '#4D7060'  //GREEN4
  );
  $palettes['energy'] = array_reverse($palettes['power']);
  $palettes['overview'] = $palettes['power'];
  $palettes['relative'] = $palettes['energy'];

  $palette = $palettes[$chart_id];

  for($i = 0; $i < count($palette); $i++) {
    $default = $palette[$i % count($palette)];
    $user_palette[$i] = _logger_get_variable("series_color_$chart_id" . "_$i", $default);
  }
  return $user_palette;
}

function logger_block($op = 'list', $delta = 0, $edit = array()) {

  global $user;

  switch ($op) {
    case 'list':
      $blocks['posts']['info'] = t('Recent blog posts');
      $blocks['posts']['status'] = TRUE;
      $blocks['posts']['region'] = 'right';
      $blocks['posts']['weight'] = 3;
      $blocks['posts']['pages'] = '<front>\nlogger/\nlogger/*';
      $blocks['posts']['cache'] = BLOCK_CACHE_GLOBAL;
      return $blocks;

    case 'view':
      if ($delta == 'posts' && user_access('access content')) {
        $block = _logger_create_recent_blogs_block();
      }
      return $block;
  }
}

function _logger_create_recent_blogs_block() {

  $block = array();

  $sql = "
    SELECT
      n.nid,
      n.title,
      n.created
    FROM
      {node} n
    WHERE
      n.type = 'blogpost' AND
      n.status = 1
    ORDER BY
      n.created DESC";

  $result = db_query_range(db_rewrite_sql($sql), 0, 5);
  $node_title_list = node_title_list($result);

  if ($node_title_list) {
    $block['subject'] = t('Recent blog posts');
    $block['content'] = $node_title_list;
    $block['content'] .= theme('more_link', url('blog'), t('Read the latest blog entries.'));
  }
  return $block;
}

function logger_form_contact_mail_page_alter(&$form, $form_state) {

  $devices = logger_get_devices_options();
  $options = array_flip($devices);

  $form['devices'] = array(
    '#type'          => 'select',
    '#options'       => $options,
    '#default_value' => array_keys($options),
    '#multiple'      => TRUE,
    '#size'          => 1,
    '#attributes'    => array('style' => 'visibility:hidden;'),
  );
}

function logger_mail_alter(&$message) {

  switch($message['id']) {

    case 'contact_page_mail':
      $devices = $message['params']['devices'];

      if (count($devices) > 0) {
        $message['body'][] = t("User Devices: ") . implode(', ', $devices);
      }
    break;
  }
}

function logger_energychart_form(&$form_state, $chart) {

  global $user;
  $types_options = logger_get_sensor_types_options($user->uid);
  $attributes = array('onchange' => 'submitEnergyChartForm(this)');

  $form['#validate'] = array('_logger_chartform_validate');

  $form['aggregate_sensors'] = array(
    '#type'          => 'checkbox',
    '#title'         => t("Sum of sensor readings"),
    '#description'   => t('Do you want to sum up all sensors?'),
    '#default_value' => _logger_get_variable('aggregate_sensors', 1),
    '#return_value'  => 1,
    '#required'      => TRUE,
    '#attributes'    => $attributes
  );

  $form['selected_sensor_types'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Sensor types'),
    '#description'   => t('Select the types of sensors to be shown on the chart.'),
    '#default_value' => _logger_get_variable('selected_sensor_types', array_keys($types_options)),
    '#options'       => $types_options,
    '#required'      => TRUE,
    '#attributes'    => $attributes
  );

  $form['unit'] = array(
    '#type'           => 'select',
    '#theme'          => 'logger_unit_selector',
    '#title'          => t('Chart Unit'),
    '#description'    => t('Select the chart unit.'),
    '#options'        => _logger_get_energy_units_options(),
    '#default_value'  => $chart->unit,
    '#price'          => $chart->price,
    '#required'       => TRUE,
    '#attributes'     => $attributes
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Refresh')
  );
  return $form;
}

function logger_relativechart_form(&$form_state, $chart) {

  $attributes = array('onchange' => 'submitRelativeChartForm(this)');

  $form['#validate'] = array('_logger_chartform_validate');

  $form['selected_meters'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Sensors'),
    '#description'   => t('Select the sensors you want to plot on the chart.'),
    '#default_value' => _logger_get_variable('selected_meters', 1),
    '#options'       => _logger_get_meters_options($chart->types),
    '#required'      => TRUE,
    '#attributes'    => $attributes
  );

  $form['unit'] = array(
    '#type'           => 'select',
    '#theme'          => 'logger_unit_selector',
    '#title'          => t('Chart Unit'),
    '#description'    => t('Select the chart unit.'),
    '#options'        => _logger_get_energy_units_options(),
    '#default_value'  => $chart->unit,
    '#price'          => $chart->price,
    '#required'       => TRUE,
    '#attributes'     => $attributes
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Refresh')
  );
  return $form;
}

function logger_powerchart_form(&$form_state, $chart) {

  global $base_path;

  $form['new_user'] = array(
    '#type'           => 'select',
    '#title'          => t('Add User'),
    '#description'    => t('Select a user to be added to the chart.'),
    '#options'        => _logger_get_users_options(),
    '#default_value'  => 0,
    '#attributes'     => array('onchange' => 'submitPowerChartForm(true)')
  );

  $form['unit'] = array(
    '#type'           => 'select',
    '#theme'          => 'logger_unit_selector',
    '#title'          => t('Chart Unit'),
    '#description'    => t('Select the chart unit.'),
    '#options'        => _logger_get_power_units_options(),
    '#default_value'  => $chart->unit,
    '#price'          => $chart->price,
    '#required'       => TRUE,
    '#attributes'     => array('onchange' => 'submitPowerChartForm(true)')
  );

  $form['step_plot'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Stepped Lines'),
    '#description'    => t('Do you want the chart series to use stepped lines?'),
    '#default_value'  => _logger_get_variable('step_plot', 0),
    '#return_value'   => 1,
    '#required'       => TRUE,
    '#attributes'     => array('onchange' => 'submitPowerChartForm()')
  );

  $form['smoothing_level'] = array(
    '#type'           => 'textfield',
    '#theme'          => 'logger_smoothing_level',
    '#title'          => t('Smoothing Level'),
    '#description'    => t("Increase this number to smooth the series' lines and make the chart more readable."),
    '#maxlength'      => 5,
    '#size'           => 5,
    '#text-align'     => 'center',
    '#default_value'  => _logger_get_variable('smooting_level', 1),
    '#required'       => TRUE
  );

  $form['yvalue'] = array(
    '#type'           => 'textfield',
    '#theme'          => 'logger_value_range',
    '#title'          => t('Value Range'),
    '#description'    => t("Enter the value range shown on the Y axis, and click the Refresh button."),
    '#maxlength'      => 12,
    '#size'           => 12,
    '#text-align'     => 'right'
  );

  $form['xvalue'] = array(
    '#type'           => 'textfield',
    '#theme'          => 'logger_time_period',
    '#title'          => t('Time Period'),
    '#description'    => t("Enter the time period shown on the X axis, and click the Refresh button."),
    '#text-align'     => 'center'
  );

  $form['resolution'] = array(
    '#type'           => 'select',
    '#title'          => t('Time Resolution'),
    '#description'    => t('Select the amount of time represented by each point on the chart.'),
    '#options'        => _logger_get_resolutions_options(),
    '#attributes'     => array('onchange' => 'submitPowerChartForm()')
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Refresh')
  );
  return $form;
}

/**
 * Builds the Smoothing Level field.
 *
 * @param $element  The Drupal form field element.
 * @return the field HTML code.
 */
function theme_logger_smoothing_level($element) {

  function _operation_button($field_id, $caption, $step) {
    return '<input type="button" value="' . $caption . '" '.
      'onClick="javascript: return updateSmoothingLevel(' . "'$field_id', " . $step . ');"/>';
  }

  $id = $element['#id'];
  $value = check_plain($element['#value']);

  $output =
    _operation_button($id, '<<', -10) .
    _operation_button($id, '<',  -1) .

    _logger_create_custom_field($element, '', $value, $attributes) .

    _operation_button($id, '>',   1) .
    _operation_button($id, '>>',  10);

  return theme('form_element', $element, $output);
}

/**
 * Builds the group of fields for informing value range.
 *
 * @param $element  The Drupal form field element.
 * @return the field HTML code.
 */
function theme_logger_value_range($element) {

  $field1 = _logger_create_custom_field($element, 1, '');
  $field2 = _logger_create_custom_field($element, 2, '');

  return _logger_compose_range_fields($element, $field1, $field2);
}

/**
 * Builds the group of fields for informing a time period.
 *
 * @param $element  The Drupal form field element.
 * @return the field HTML code.
 */
function theme_logger_time_period($element) {

  $field1 = _logger_create_time_fields($element, 1);
  $field2 = _logger_create_time_fields($element, 2);

  return _logger_compose_range_fields($element, $field1, $field2);
}

function theme_logger_unit_selector($element) {

  $size = $element['#size'] ? ' size="' . $element['#size'] . '"' : '';
  $multiple = $element['#multiple'];
  $name = $element['#name'];
  $attributes = drupal_attributes($element['#attributes']);

  $unit = $element['#default_value'];
  $visible = strpos(" $unit", 'eur', 1) > 0 ? 'visible' : 'hidden';
  $price = $element['#price'] ? $element['#price'] : 0.18;

  _form_set_class($element, array('form-select'));

  $field2 = '<div style="display: inline; visibility: ' . $visible . ';">' .
    t('price') . ':&nbsp;&nbsp;€ ' . '<input type="text" name="price" size="4" ' .
    'value="' . $price . '" style="text-align: right;"/> / kWh</div>';

  $field1 = '<select name="' . $name . '' . ($multiple ? '[]' : '') . '"' .
    ($multiple ? ' multiple="multiple" ' : '') .
    $attributes . ' id="' . $element['#id'] . '" ' . $size . '>' .
    form_select_options($element) . '</select>';

  return theme('form_element', $element, "$field1 &nbsp;&nbsp;&nbsp;$field2");
}

/**
 * Builds a color picker component.
 *
 * @param $i          The color index.
 * @param $colors     The array of colors.
 * @param $picker_id  The picker id.
 * @return the picker HTML code.
 */
function theme_logger_color_picker($chart_id, $i, $colors) {

  $id = 'series_color' . $i;

  return '
    <input
      class="color {valueElement:' . "'$id'" . '}
      type="button"
      style="width: 10px; height: 10px; color: transparent;"/>

    <input
      id="' . $id . '"
      type="hidden"
      value="' . $colors[$i % count($colors)] . '"
      onchange="javascript: ' . "setSeriesColor('$chart_id', $i, this.value)" . ';"/>';
}

/**
 * Creates two fields to represent a timestamp: one for date and another for time.
 *
 * @param $element  The Drupal form field element.
 * @param $sufix    A sufix for the field id and name.
 * @return the fields HTML code.
 */
function _logger_create_time_fields($element, $sufix) {

  $picker_properties = "{
      yearRange: '-1:+0',
      showAnim: 'fadeIn',
      dateFormat: 'dd/mm/yy',
      currentText: '" . t('Today') . "',
      nextText: '" . t('Next Month') . "',
      prevText: '" . t('Previous Month') . "',
      dayNamesMin: [" . t("'Su','Mo','Tu','We','Th','Fr','Sa'") . "],
      monthNames: ['" . t('January') . "', '" . t('February') . "', '" . t('March') . "', '" . t('April') . "', '" . t('May') . "', '" . t('June') . "', '" . t('July') . "', '" . t('August') . "', '" . t('September') . "', '" . t('October') . "', '" . t('November') . "', '" . t('December') . "']
    }";

  drupal_add_js('$(document).ready(function(){$("#edit-xvalue' . $sufix . 'date").datepicker('. $picker_properties .');});', 'inline');

  return
    _logger_create_custom_field($element, $sufix . 'date', '', 10, 10) .
    _logger_create_custom_field($element, $sufix . 'time', '', 5, 5);
}

/**
 * Arrange fields to represent a range.
 *
 * @param $element  The Drupal form field element.
 * @param $field1   The field that contains the lowest value.
 * @param $field2   The field that contains the highest value.
 * @return the fields HTML code.
 */
function _logger_compose_range_fields($element, $field1, $field2) {

  $output = t('from: ') . $field1 . ' &nbsp;&nbsp;&nbsp;' . t('to: ') . $field2;
  return theme('form_element', $element, $output);
}

/**
 * Create a customized form field.
 *
 * @param $element     The Drupal form field element.
 * @param $sufix       A sufix for the field id and name.
 * @param $value       The field value.
 * @param $size        The field size.
 * @param $maxlength   The field maximum length.
 * @return the field HTML code.
 */
function _logger_create_custom_field($element, $sufix, $value, $size = 0, $maxlength = 0) {

  $name      = $element['#name'] . $sufix;
  $id        = $element['#id']   . $sufix;
  $align     = $element['#text-align'] . ';';
  $size      = $size > 0 ? $size : $element['#size'];
  $maxlength = $maxlength > 0 ? $maxlength : $element['#maxlength'];

  $attributes = isset($element['#attributes']) ? drupal_attributes($element['#attributes']) : '';

  return
    '<input type="text" ' .
    'name="'              . $name      . '" ' .
    'id="'                . $id        . '" ' .
    'maxlength="'         . $maxlength . '" ' .
    'size="'              . $size      . '" ' .
    'value="'             . $value     . '" ' .
    'style="text-align: ' . $align     . '" ' .
    $attributes . ' />';
}

function logger_powerchart_form_validate($form, &$form_state) {

  $smoothing_level = $form_state['values']['smoothing_level'];

  if ($smoothing_level < 1) {
    form_set_error('smoothing_level', t('The smoothing level must be greater than 0.'));
  }

  $step_plot = $form_state['values']['step_plot'];

  if ($step_plot != 1 && $step_plot != 0) {
    form_set_error('step_plot', t('The stepped lines option must be either 0 or 1.'));
  }

  $yvalue1 = _logger_get_yvalue(1);
  $yvalue2 = _logger_get_yvalue(2);

  if (!($yvalue1 == '' && $yvalue2 == '') && !($yvalue1 >= 0 && $yvalue2 > $yvalue1)) {
    form_set_error('yvalue', t('The value range is invalid.'));
  }

  $xvalue1 = _logger_get_xvalue(1);
  $xvalue2 = _logger_get_xvalue(2);
  
  if (!($xvalue1 > 0 && $xvalue2 > 0 && $xvalue2 > $xvalue1)) {
    form_set_error('xvalue', t('Time period is invalid.'));
  }

  _logger_chartform_validate($form, $form_state);
}

function _logger_chartform_validate($form, &$form_state) {

  global $_REQUEST;
  $price = $_REQUEST['price'];

  if ($price && !is_numeric($price)) {
    form_set_error('unit', t('The price is invalid.'));
  }
}

function logger_energychart_form_submit($form, &$form_state) {

  global $_REQUEST;
  $aggregate = $form_state['values']['aggregate_sensors'];
  $types     = $form_state['values']['selected_sensor_types'];
  $unit      = $form_state['values']['unit'];
  $price     = $_REQUEST['price'];

  _logger_set_variable('aggregate_sensors', $aggregate);
  _logger_set_variable('selected_sensor_types', $types);
  _logger_set_variable('energychart_unit', $unit);

  if ($price) {
    _logger_set_variable('price', $price);
  }
}

function logger_powerchart_form_submit($form, &$form_state) {

  global $_REQUEST;
  $new_user        = $form_state['values']['new_user'];
  $step_plot       = $form_state['values']['step_plot'];
  $smoothing_level = $form_state['values']['smoothing_level'];
  $unit            = $form_state['values']['unit'];
  $price           = $_REQUEST['price'];

  if ($new_user > 0) {
    _logger_add_user($new_user);
  }

  if ($price) {
    _logger_set_variable('price', $price);
  }

  _logger_set_variable('powerchart_unit', $unit);
  _logger_set_variable('step_plot', $step_plot);
  _logger_set_variable('smooting_level', $smoothing_level);

  $form_state['redirect'] = array($_GET['q'], $_REQUEST);
}

function logger_relativechart_form_submit($form, &$form_state) {

  global $_REQUEST;
  $meters = $form_state['values']['selected_meters'];
  $unit   = $form_state['values']['unit'];
  $price  = $_REQUEST['price'];

  _logger_set_variable('selected_meters', $meters);
  _logger_set_variable('relativechart_unit', $unit);

  if ($price) {
    _logger_set_variable('price', $price);
  }
}

/**
 * Returns a list of all sensor types.
 *
 * @return an array of sensor types.
 */
function logger_get_sensor_types_options($uid = NULL) {

  if ($uid) {
  
    $sql = "
      SELECT
        t.id,
        t.name
      FROM
        {logger_meter_type} t,
        {logger_meters} m
      WHERE
        m.type = t.id AND
        m.uid = %d
      ORDER BY
        t.id";

      $result = db_query($sql, $uid);

  } else {

    $sql = "SELECT id, name FROM {logger_meter_type} ORDER BY id";
    $result = db_query($sql);
  }

  $options = array();
  while ($type = db_fetch_object($result)) {
    $options[$type->id] = t($type->name);
  }
  return $options;
}

/**
 * Returns a list of all meters of the informed type.
 *
 * @param $types  sensor types.
 * @return an array of meters.
 */
function _logger_get_meters_options($types) {

  $sensors =_logger_get_user_sensors($types);
  $options = array();
  foreach($sensors as $sensor) {
    $options[$sensor->meter] = $sensor->function;
  }
  return $options;
}

/**
 * Returns an array of power units indexed by their respective acronym.
 *
 * @return the array of units.
 */
function _logger_get_power_units_options() {

  return array(
    'watt'      => t('watt'),
    'kWh/year'  => t('kWh/year'),
    'eur/year'  => t('euro/year')
  );
}

function _logger_get_energy_units_options() {

  return array(
    'kWh'  => t('kWh'),
    'eur'  => t('eur')
  );
}

/**
 * Returns either the lowest or the highest value shown on the Y axis.
 *
 * @param $index Inform 1 for the lowest, 2 for the highest.
 * @return the value.
 */
function _logger_get_yvalue($index) {
  global $_REQUEST;
  return $_REQUEST['yvalue' . $index];
}

/**
 * Returns either the lowest or the highest value shown on the X axis.
 *
 * @param $index Inform 1 for the lowest, 2 for the highest.
 * @return the value.
 */
function _logger_get_xvalue($index) {

  global $_REQUEST;
  $formatted = $_REQUEST['xvalue' . $index. 'date'] . ' ' . $_REQUEST['xvalue' . $index. 'time'];

  //Parses a datetime string formatted as dd/mm/yyyy hh:mm to a Unix timestamp.
  $str = "$formatted:00 GMT+00:00";
  $d = strtok($str, '/');
  $m = strtok('/');
  $r = strtok('/');
  $timestamp = strtotime("$m/$d/$r");
  $timestamp -= _logger_get_timezone_offset();

  return $timestamp > 0 ? $timestamp : 0;
}

/**
 * Returns the chart resolution of a time interval menu option.
 *
 * @param $interval  The time interval menu option.
 * @return the chart resolution.
 */
function _logger_get_resolution($interval) {

  global $_REQUEST;
  $resolution = $_REQUEST['resolution'];
  if ($resolution > 0) {
    return $resolution;
  }

  $options = array(
    'hour'  =>  1 * MINUTE,
    'day'   => 15 * MINUTE,
    'days'  => 15 * MINUTE,
    'week'  => 15 * MINUTE,
    'month' =>  1 * DAY,
    'year'  =>  1 * WEEK
  );
  return $options[$interval];
}

/**
 * Returns an array of chart resolutions.
 *
 * @return the array of chart resolutions.
 */
function _logger_get_resolutions_options() {

  return array(
     1 * MINUTE =>  1 . ' ' . t('Minute'),
    15 * MINUTE => 15 . ' ' . t('Minutes'),
     1 * DAY    =>  1 . ' ' . t('Day'),
     1 * WEEK   =>  1 . ' ' . t('Week')
  );
}

/**
 * Returns the default time window associated with a time interval menu option.
 *
 * @param $interval  The time interval menu option.
 * @return the amount of seconds of the time window.
 */
function _logger_get_default_time_window($interval) {

  $windows = array(
    'hour'       =>   1 * HOUR,
    'dayquarter' =>   6 * HOUR,
    'day'        =>   1 * DAY,
    'days'       =>   3 * DAY,
    'week'       =>   7 * DAY,
    'month'      =>  30 * DAY,
    'year'       => 365 * DAY
  );
  return $windows[$interval];
}

function _logger_get_sub_interval($interval) {
  $windows = array(
    'dayquarter' => 'hour',
    'day'        => 'dayquarter',
    'days'       => 'day',
    'week'       => 'day',
    'month'      => 'week',
    'year'       => 'month'
  );
  return $windows[$interval];
}

/**
 * Returns an array containing two timestamps representing period of time of
 * the slider chart.
 *
 * @param $interval    The time interval menu option.
 * @param $resolution  The time resolution.
 * @param $start       The initial timestamp, if known.
 * @param $end         The final timestamp, if known.
 * @return the period of time as an array.
 */
function _logger_get_period($interval, $resolution, $start = 0, $end = 0) {

  module_load_include('inc', 'logger', 'logger.rrd');
  $storage_period = logger_rrd_get_storage_period($resolution);

  //If period not informed, consider default time window
  $window = $start > 0 && $end > 0 ? $end - $start :
    _logger_get_default_time_window($interval);

  $now = time();
  if ($end < ($now - $storage_period)) {
    $end = $now;
  }

  //Expand window to fill slider
  $window *= (LOGGER_CHART_HEIGHT / LOGGER_SLIDER_HEIGHT);

  //RRD requires the time window to be covered by RRD
  $max_window = $storage_period - ($now - $end);
  $window = min($window, $max_window);

  return array('start' => ($end - $window), 'end' => $end);
}

/**
 * Returns an array of fluksonian users indexed by their respective user id.
 * Only users not yet plotted on the chart are returned.
 *
 * @return the array of fluksonian users.
 */
function _logger_get_users_options() {

  global $user;

  $sql = "
    SELECT
      f.uid,
      f.name
    FROM
      {users} f,
      {users_roles} ur,
      {role} r
    WHERE
      f.uid <> %d AND
      f.uid = ur.uid AND
      ur.rid = r.rid AND
      r.name = '%s' AND
      NOT EXISTS(
        SELECT
          1
        FROM
          {user_relationships} urel,
          {user_relationship_types} t
        WHERE
          t.name = '%s' AND
          urel.rtid = t.rtid AND
          urel.requestee_id = f.uid AND
          urel.requester_id = %d
      )
    ORDER BY
      f.name";

  $fluksonians = db_query($sql, $user->uid, 'fluksonian', 'subscription', $user->uid);

  $options = array(0 => '');
  while($fluksonian = db_fetch_object($fluksonians)) {
    $options[$fluksonian->uid] = $fluksonian->name;
  }
  return $options;
}

/**
 * Adds an user to the chart.
 *
 * @param $uid  The id of the user to be added.
 */
function _logger_add_user($uid) {

  global $user;

  //Users are not allowed to add themselves
  if ($uid != $user->uid) {

    $sql = "SELECT rtid FROM {user_relationship_types} WHERE name = '%s'";
    $rtid = db_result(db_query($sql, 'subscription'));

    user_relationships_request_relationship($user->uid, $uid, $rtid, TRUE);
  }
}

/**
 * Removes an user from the chart.
 *
 * @param $requestee_id  The id of the user to be removed.
 */
function _logger_remove_user($requestee_id) {

  global $user;

  $sql = "DELETE FROM {user_relationships} WHERE requester_id = %d AND requestee_id = %d";
  db_query($sql, $user->uid, $requestee_id);
}

/**
 * Returns the value of a persistent variable.
 *
 * @param $id            The variable id.
 * @param $default_value The value to be returned if the variable is not yet defined.
 * @return the variable value.
 */
function _logger_get_variable($id, $default_value) {

  global $user;
  $id = "logger_$id";

  if ($user->uid) {
    $id .= '_' . $user->uid;
    return variable_get($id, $default_value);

  } else {
    return isset($_COOKIE[$id])? $_COOKIE[$id] : $default_value;
  }
}

/**
 * Sets the value of a persistent variable.
 *
 * @param $id     The variable id.
 * @param $value  The variable value.
 */
function _logger_set_variable($id, $value) {

  global $user;
  $id = "logger_$id";

  if ($user->uid) {
    $id .= '_' . $user->uid;
    variable_set($id, $value);

  } else {
    setcookie($id, $value, time() + WEEK, '/');
  }
}

function logger_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'user_login') {
    $form['#redirect'] = 'logger';
    $form['name']['#size'] = 20;
    $form['pass']['#size'] = 20;
  }
}

function _logger_account_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the sensor is accessible only to the owner.
 */
function _logger_sensor_access($permission, $meter) {

  $sql = "SELECT uid FROM {logger_meters} WHERE meter = '%s'";
  $sensor = db_fetch_object(db_query($sql, $meter));

  return ($sensor->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the device is accessible only to the owner.
 */
function _logger_device_access($permission, $serial) {

  $sql = "SELECT uid FROM {logger_devices} WHERE serial = %d";
  $device = db_fetch_object(db_query($sql, $serial));

  return ($device->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Queries the databases for measurements reported by sensors of a single device.
 *
 * @param $interval The time interval.
 * @param $device   The device's hash code.
 * @param $offset   The user timezone offset.
 * @return the array of sensors' measurements, formatted as [meter][function][ [timestamp, value] ].
 */
function logger_query_device_measurements($interval, $device, $offset) {

  module_load_include('inc', 'logger', 'logger.rrd');

  $sql = "SELECT m.meter, m.function FROM {logger_meters} m WHERE m.device = '%s'";
  $sensors = db_query($sql, $device);

  $resolution = _logger_get_resolution($interval);
  $period = _logger_get_period($interval, $resolution);

  $measurements = array();
  while($sensor = db_fetch_object($sensors)) {

    $measurements[$sensor->meter][$sensor->function] = logger_rrd_query_sensor($interval, $sensor, 'watt', $offset, $period, $resolution);
  }
  return $measurements;
}