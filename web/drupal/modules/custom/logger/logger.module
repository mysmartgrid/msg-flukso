<?php

/**
 * Support module for charting data stored in RRD's.
 *
 * Copyright (c) 2008-2009 jokamajo.org
 *               2010 flukso.net
 *               2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

//Constants
define('RED',     'F1572F');
define('BLUE',    '44C3D3');
define('GREEN',   '7AAB5A');
define('ORANGE',  'F37E2B');
define('YELLOW',  'FBEB0D');
define('PURPLE',  'A052A0');
define('BROWN',   '808000');
define('PINK',    'FF0080');
define('CYAN',    '00ffff');
define('SKYBLUE', '0080FF');

define('ROOT_PATH',   drupal_get_path('module', 'logger'));
define('GRAPH_PATH',  ROOT_PATH . '/graphs');
define('DATA_PATH',   ROOT_PATH . '/data/base');
define('AGG_DB_PATH', DATA_PATH . "/aggregate.rrd");
define('RRDTOOL',     ROOT_PATH . '/rrdtool');

function logger_init() {
  global $user;
  // Workaround for collapse.js not being loaded within  _logger_fluksonians_form  when block caching is on.
  if ($user->uid > 0) {
    drupal_add_js('misc/collapse.js');
  }
}

function logger_perm() {
  return array('logger', 'register devices');
}

function logger_menu() {

  $items = array();

  $items['admin/settings/logger'] = array(
    'title'            => 'Logger settings',
    'description'      => 'Configure settings for logging metering values.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_logger_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['logger'] = array(
    'title'            => 'your dashboard', // isn't printed as title on the page, therefore resort to drupal_set_title (t('your ecological dashboard')) in ecology_dashboard;
    'description'      => 'Configure settings for logging metering values.',
    'page callback'    => '_logger_dashboard', //takes the callback from the MENU_DEFAULT_LOCAL_TASK -> lightest level-two menu
    'page arguments'   => array('electricity', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );

  $items['logger/add'] = array(
    'title'            => 'add this user to the chart',
    'page callback'    => '_logger_add',
    'access arguments' => array('logger'),
    'type'             => MENU_CALLBACK,
  );

  $items['logger/remove'] = array(
    'title'            => 'remove this user from the chart',
    'page callback'    => '_logger_remove',
    'access arguments' => array('logger'),
    'type'             => MENU_CALLBACK,
  );

  $items['logger/unit'] = array(
    'title'            => 'change the unit',
    'page callback'    => '_logger_unit',
    'access arguments' => array('logger'),
    'type'             => MENU_CALLBACK,
  );

  $items['logger/electricity'] = array(
    'title'            => 'electricity',
    //'page callback'  => '_logger_dashboard',
    //'page arguments' => array('electricity', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );

  /*
  $items['logger/water'] = array(
    'title'            => 'water',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('water', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_LOCAL_TASK,
  );

  $items['logger/gas'] = array(
    'title'            => 'gas',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('gas', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_LOCAL_TASK,
  );
  */

  $items['logger/electricity/hour'] = array(
    'title'            => 'hour',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 0,
  );

  $items['logger/electricity/day'] = array(
    'title'            => 'day',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'day'),
    'access callback'  => TRUE,
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 1,
  );

  $items['logger/electricity/month'] = array(
    'title'            => 'month',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'month'),
    'access callback'  => TRUE,
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 2,
  );

  $items['logger/electricity/year'] = array(
    'title'            => 'year',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'year'),
    'access callback'  => TRUE,
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 3,
  );

  $items['logger/electricity/night'] = array(
    'title'            => 'night',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'night'),
    'access callback'  => TRUE,
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 4,
  );

  $items['installation'] = array(
    'title'            => '',
    'description'      => 'Howto install a Fluksometer',
    'page callback'    => '_logger_installation',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );

  $items['user/%user_uid_optional/privacy'] = array(
    'title'            => 'Privacy',
    'page callback'    => '_logger_account_privacy',
    'access callback'  => '_logger_account_access',
    'access arguments' => array('logger', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 2,
  );

  $items['user/%user_uid_optional/devices'] = array(
    'title'            => 'Devices',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_logger_account_devices'),
    'access callback'  => '_logger_account_access',
    'access arguments' => array('register devices', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['user/%user_uid_optional/sensors'] = array(
    'title'            => 'Sensors',
    'page callback'    => '_logger_account_sensors',
    'access callback'  => '_logger_account_access',
    'access arguments' => array('logger', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['sensor/edit'] = array(
    'title'            => 'Sensor Edition',
    'page callback'    => '_logger_sensor_edit',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/sensors']['title'],
    'page callback'    => '_logger_sensor_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/activate'] = array(
    'title'            => $items['sensor/edit']['title'],
    'page callback'    => '_logger_sensor_activate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['device/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/devices']['title'],
    'page callback'    => '_logger_device_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_device_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  return $items;
}

function _logger_installation() {

  return
    '<div class="install">' . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'><img src='http://www.flukso.net/sites/default/files/images/step1.png' height='120' width='150' alt='step 1'/></a>" . PHP_EOL .

    "<p><b>STEP 1: CONFIGURING WIFI</b><br/>Power up the Fluksometer. Connect your computer to the Fluksometer's ethernet port. Surf to <a href = 'http://192.168.255.1'>http://192.168.255.1</a>. Configure the wireless interface with the proper name and security key.</p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'><img src='http://www.flukso.net/sites/default/files/images/step2.png' height='120' width='150' alt='step 2'/></a>" . PHP_EOL .

    "<p><b>STEP 2: SECURING THE FLUKSOMETER</b><br/>Disconnect all cables from the Fluksometer. Find a suitable location near the fuse box to install the Fluksometer. Secure the Fluksometer with the plastic cable tie.</p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'><img src='http://www.flukso.net/sites/default/files/images/step3.png' height='120' width='150' alt='step 3'/></a>" .

    "<p><b>STEP 3: ATTACHING THE CURRENT CLAMP</b><br/>For safety reasons, switch off the main electricity supply. For a single phase supply, attach the current clamp to one of the two cables running from the electricity meter to the fuse box. Close the clamp firmly.</p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'><img src='http://www.flukso.net/sites/default/files/images/step4.png' height='120' width='150' alt='step 4'/></a>" . PHP_EOL .

    "<p><b>STEP 4: CONNECTING THE CLAMP'S SENSOR CABLE</b><br/>Connect the cable from the current clamp to the Fluksometer's input port. Take care of connecting the black and red cable as shown in the drawing on the left. Only apply gentle force when fastening the two screws.</p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'><img src='http://www.flukso.net/sites/default/files/images/step5.png' height='120' width='150' alt='step 4'/></a>" . PHP_EOL .

    "<p><b>STEP 5: POWERING UP</b><br/>Switch the main electricity supply back on. Activate the Fluksometer by connecting the power plug.</p>" . PHP_EOL .
    "</div>". PHP_EOL;
}

function _logger_front_page() {

}

/**
 * Builds the dashboard page.
 * 
 * @param $type     the sensor type.
 * @param $function the sensor function.
 * @param $interval the time interval.
 * @return the dashboard page
 */
function _logger_dashboard($type, $function, $interval) {

  $sensors = _logger_get_user_sensors($type, $function);
  if (empty($sensors)) {
    return theme('chart', '');
  }

  $chart = _logger_get_chart_params($interval, $type, $sensors[0]->unit);
  $chart->line = ' COMMENT:"\s"';
  $chart->def = '';

  $colors = array(RED, BLUE, GREEN, YELLOW, PURPLE, ORANGE, BROWN, PINK, CYAN, SKYBLUE);
  $i = 0;

  global $user;

  foreach ($sensors as &$sensor) {

    //Check if the user whose datastream is to be superimposed on the graph is in private mode
    $shifted = $sensor->private && ($sensor->uid != $user->uid);
    $caption = user_access('logger') && !$shifted ? $sensor->function : $sensor->username;

    $file_path = $chart->data_path . '/' . $sensor->meter . '.rrd';
    $color = $colors[$i % count($colors)];

    $chart->def  .= _logger_chart_def($i, $file_path, $chart->factor, $shifted);
    $chart->line .= _logger_chart_line($i, $color, $caption, $shifted);

    $i++;
  }

  $TZ = _logger_get_timezone_attribution();

  //insert the TZ prior to launching rrdtool to obtain a proper time conversion
  $command = $TZ . ' ' . RRDTOOL . ' graph ' . $chart->file_path . ' -s ' . $chart->start .
    ' --vertical-label ' . $chart->unit . 
    ' --lower-limit 0 -w 500 -h 350 -E -X 0' .
    ' --font LEGEND:8:' . $chart->def . $chart->line;

  exec($command, $output, $return);

  drupal_set_title(t('Your power consumption'));

  return theme('chart', $chart->file_path);
}

function _logger_get_chart_params($interval, $type, $unformatted_unit) {

  $params = new stdClass();

  //generate random number for the png chart so that the browser doesn't use the cached one, use cron to clean up the dir hourly
  $unique_id = md5(uniqid());

  //Default
  $params->unit = 'watt';
  $params->factor = 3600; // 1Wh/s = 3600 W
  $params->data_path = DATA_PATH;
  $params->file_path = GRAPH_PATH . "/$interval/$unique_id.png";

  switch ($interval) {
    case 'hour':
      $params->start = 'end-1h';
      break;

    case 'day':
      $params->start = 'end-1d';
      break;

    case 'month':
      $params->start = 'end-60d';
      break;

    case 'year':
      $params->start = 'end-1y';
      break;

    case 'night':
      $params->start = 'end-60d';
      $params->data_path = DATA_PATH . "/night";
      break;
  }

  switch ($type) {
    case 'electricity':
      switch ($unformatted_unit) {
        case 'kwh':
          $params->unit = 'kWh/year';
          $params->factor = 31536;
          break;

        case 'eur':
          $params->unit = 'euro/year';
          $params->factor = 5676; // 18 EURcent/kWh
          break;

        case 'aud':
          $params->unit = 'aud/year';
          $params->factor = 5991; // 19 AUDcent/kWh
          break;
      }
  }
  return $params;
}

/**
 * Returns an array containing all sensors either owned by the user or 
 * selected by him to be plotted on the chart.
 * 
 * @param $type       the type of sensors to be returned.
 * @param $function   the function of the sensors to be returned.
 * @return the array of user sensors.
 */
function _logger_get_user_sensors($type, $function) {

  global $user;
  $sensors = array();

  $sql = "
    SELECT
      lm.uid,
      '%s' AS username,
      lm.meter,
      lm.function,
      lm.unit,
      lu.private
    FROM
      {logger_meters} lm
      INNER JOIN {logger_users} lu ON lm.uid = lu.uid
    WHERE
      lm.uid = %d AND
      lm.type = '%s'
    ORDER BY
      lm.function";

  $result = db_query($sql, $user->name, $user->uid, $type);

  while ($sensor = db_fetch_object($result)) {
    $sensors[] = $sensor;
  }

  if (user_access('logger')) {

    $sql = "
      SELECT
        u.uid,
        u.name AS username,
        lm.meter,
        lm.function,
        lm.unit,
        lu.private
      FROM
        ((({users} u
        INNER JOIN {user_relationships} ur ON u.uid = ur.requestee_id)
        INNER JOIN {user_relationship_types} urt ON ur.rtid = urt.rtid)
        INNER JOIN {logger_meters} lm ON u.uid = lm.uid)
        INNER JOIN {logger_users} lu ON u.uid = lu.uid
      WHERE
        ur.requester_id = %d AND
        urt.name = '%s' AND
        lm.type = '%s' AND
        lm.function = '%s'
      ORDER BY
        ur.rid";

    $result = db_query($sql, $user->uid, 'subscription', $type, $function);

    while($sensor = db_fetch_object($result)) {
      $sensors[] = $sensor;
    }
  }
  return $sensors;
}

/**
 * Returns the user timezone attribution statement formatted as 'TZ=GMT-02:00'.
 *
 * @return the timezone attribution statement.
 */
function _logger_get_timezone_attribution() {

  global $user;

  if ($user->timezone > 0) {
    $signal = '-';

  } elseif ($user->timezone < 0) {
    $signal = '+';

  } else {
    $signal = '';
  }

  $hours = gmdate('h:i', abs($user->timezone));

  return 'TZ="GMT' . $signal . $hours . '"';
}

function _logger_chart_def($i, $file_path, $factor, $shifted) {

  $def =
    ' DEF:data'   . $i . '='. $file_path . ':meter:AVERAGE' .
    ' CDEF:meter' . $i . '=data' . $i . ',' . $factor . ',*';

  $def .= $shifted ?
    ' SHIFT:meter' . $i . ':-31556926' :

    ' VDEF:min'  . $i . '=meter' . $i . ',MINIMUM' .
    ' VDEF:max'  . $i . '=meter' . $i . ',MAXIMUM' .
    ' VDEF:avg'  . $i . '=meter' . $i . ',AVERAGE' .
    ' VDEF:last' . $i . '=meter' . $i . ',LAST';

  return $def;
}

function _logger_chart_line($i, $color, $caption, $shifted) {

  $caption = substr($caption . '               ', 0, 15);

  $line =
    ' LINE1:meter' . $i . '#' . $color . ':' . '"' . $caption . '"';

  $line .= $shifted ?
    ' COMMENT:"min\:  prv"' .
    ' COMMENT:"\tmax\:  prv"' .
    ' COMMENT:"\tavg\:  prv"' .
    ' COMMENT:"\tlast\:  prv\l"' :

    ' GPRINT:min'  . $i . ':"min\:%5.0lf"'.
    ' GPRINT:max'  . $i . ':"\tmax\:%5.0lf"'.
    ' GPRINT:avg'  . $i . ':"\tavg\:%5.0lf"'.
    ' GPRINT:last' . $i . ':"\tlast\:%5.0lf\l"';

  return $line;
}

function _logger_add($uid) {

  global $user;
  $rtid = db_result(db_query("SELECT rtid
                              FROM {user_relationship_types}
                              WHERE name = '%s'", 'subscription'));

  $result = db_fetch_array(db_query("SELECT COUNT(rid), MAX(rid)
                                     FROM {user_relationships}
                                     WHERE requester_id = %d AND rtid = %d
                                     GROUP BY rtid", $user->uid, $rtid));

  // don't allow users to add themselves
  if ($uid != $user->uid) { 

    // max subscriptions = 4
    if ($result['COUNT(rid)'] < 4) {
      user_relationships_request_relationship($user->uid, $uid, $rtid, TRUE);

    } else {
      //check whether the requested relationship doesn't already exist
      if (!db_result(db_query("SELECT rid
                               FROM {user_relationships}
                               WHERE requester_id = %d AND requestee_id = %d AND rtid = %d", $user->uid, $uid, $rtid))) {

        // if not, delete the most recently added relationship and replace it with the newly selected one
        db_query("DELETE
                  FROM {user_relationships}
                  WHERE rid = %d", $result['MAX(rid)']);

        user_relationships_request_relationship($user->uid, $uid, $rtid, TRUE);
      }
    }
    _logger_cache_clear('fluksonians');
  }

  $destination = drupal_get_destination();
  drupal_goto($destination);
}

function _logger_remove($rid) {

  global $user;

  // check whether the to-be-deleted relationship was created by the same user
  if ($user->uid == db_result(db_query("SELECT requester_id
                                        FROM {user_relationships}
                                        WHERE rid = %d", $rid))) {
    db_query("DELETE
              FROM {user_relationships}
              WHERE rid = %d", $rid);

  } else {
    watchdog('relationships', 'attempt to delete rid %rid by non-authorized user %uid', array('%rid' => $rid, '%uid' => $user->uid), WATCHDOG_ERROR);
  }

  _logger_cache_clear('fluksonians');

  $destination = drupal_get_destination();
  drupal_goto($destination);
}

function _logger_unit($unit) {

  global $user;

  // hardcoded type and function
  db_query("UPDATE {logger_meters}
            SET unit = '%s'
            WHERE uid = %d AND type = '%s' AND function = '%s'", $unit, $user->uid, 'electricity', 'main');

  _logger_cache_clear('unit');
  $destination = drupal_get_destination();
  drupal_goto($destination);
}

/**
 * Clear the specific (per user) cache entry in the {cache_block} table
 */
function _logger_cache_clear($delta) {

  global $theme;

  //the theme variable isn't set on these callbacks so force it
  $theme = 'flukso';

  $block = db_fetch_object(db_query("
    SELECT *
    FROM {blocks}
    WHERE module = '%s' AND delta = '%s' AND theme = '%s'", 'logger', $delta, 'flukso'));

  $cid = _block_get_cache_id($block);

  // prevent the whole chache_block being cleared when _block_get_cache_id returns an empty string (e.g. uid = 1)
  if ($cid != '') {
    cache_clear_all($cid, 'cache_block');
  }
  //watchdog('block_cache', '%cid | %cache', array('%cid' => $cid, '%cache' => variable_get('block_cache', 100)), WATCHDOG_DEBUG);
}

/**
 * Implementation of hook_user() for logger
 * Flush the fluksonians block entries in the block cache 
 */
function logger_user($op) {
  switch($op) {
    // new user is being inserted into the database
    case 'insert':
      // flush the fluksonians block entries
      cache_clear_all('logger:fluksonians', 'cache_block', TRUE);
      break;
  }
}

function logger_theme() {

  return array(
    'chart' => array(
      'arguments' => array('chart' => NULL),
    ),

    'logger_item_list' => array(
      'arguments' => array('items' => NULL, 'title' => NULL),
    ),

    'logger_account_devices' => array(
      'arguments' => array('form' => NULL),
      'file'      => 'logger.admin.inc',
    ),

    'logger_account_devices_list' => array(
      'arguments' => array('items' => NULL),
      'file'      => 'logger.admin.inc',
    ),

    'logger_account_sensors_list' => array(
      'arguments' => array('items' => NULL),
      'file'      => 'logger.admin.inc',
    ),
  );
}

/**
 * Theming the chart
 */
function theme_chart($chart) {
  $output .=
    '<p id="chart">
      <img src="'. base_path() . $chart .'" alt="Flukso"/>
    </p><!-- end chart-->';
  return $output;
}

/**
 * Implementation of hook_block() for logger
 * Adds two blocks to the logger pages for (de-)selecting users and
 * another one for selecting the desired unit
 */
function logger_block($op = 'list', $delta = 0, $edit = array()) {

  global $user;

  switch ($op) {
    case 'list':
      $blocks['fluksonians']['info'] = t('Fluksonians');
      $blocks['fluksonians']['status'] = TRUE;
      $blocks['fluksonians']['region'] = 'content';
      $blocks['fluksonians']['weight'] = 1;
      $blocks['fluksonians']['pages'] = '<front>\nlogger/\nlogger/*';
      $blocks['fluksonians']['cache'] = BLOCK_CACHE_PER_USER;

      $blocks['unit']['info'] = t('Unit');
      $blocks['unit']['status'] = TRUE;
      $blocks['unit']['region'] = 'right';
      $blocks['unit']['weight'] = 2;
      $blocks['unit']['pages'] = '<front>\nlogger/\nlogger/*';
      $blocks['unit']['cache'] = BLOCK_CACHE_PER_USER;

      $blocks['posts']['info'] = t('Recent blog posts');
      $blocks['posts']['status'] = TRUE;
      $blocks['posts']['region'] = 'right';
      $blocks['posts']['weight'] = 3;
      $blocks['posts']['pages'] = '<front>\nlogger/\nlogger/*';
      $blocks['posts']['cache'] = BLOCK_CACHE_GLOBAL;

      return $blocks;

    case 'view':
      //pass along our current destination in the query string so that logger_add and logger_remove can return after processing their task
      $destination = drupal_get_destination();

      if ($delta == 'fluksonians' && user_access('logger')) {
        $block['content'] = drupal_get_form('_logger_fluksonians_form');

      } elseif ($delta == 'unit' && user_access('logger')) {

        //hardcoded the type and function parameters for now
        $unit = db_result(db_query("SELECT unit
                                    FROM {logger_meters}
                                    WHERE uid = %d AND type = '%s' AND function = '%s'", $user->uid, 'electricity', 'main'));

        $items = array();
        $items[0] = l('watt', 'logger/unit/watt', array('attributes' => array('title' => "switch to watt"), 'query' => $destination, 'alias' => TRUE));
        $items[1] = l('kWh/year', 'logger/unit/kwh', array('attributes' => array('title' => "switch to kWh/year"), 'query' => $destination, 'alias' => TRUE));
        $items[2] = l('euro/year [@ 0.18eur/kWh]', 'logger/unit/eur', array('attributes' => array('title' => "switch to euro/year"), 'query' => $destination, 'alias' => TRUE));
        $items[3] = l('aud/year [@ 0.19aud/kWh]', 'logger/unit/aud', array('attributes' => array('title' => "switch to aud/year"), 'query' => $destination, 'alias' => TRUE));

        // 'unlink' the currently selected unit option
        switch ($unit) {
          case 'watt':
            $items[0] = 'watt';
            break;

          case 'kwh':
            $items[1] = 'kWh/year';
            break;

          case 'eur':
            $items[2] = 'euro/year [@ 0.18eur/kWh]';
            break;

          case 'aud':
            $items[3] = 'aud/year [@ 0.19aud/kWh]';
            break;
        }

        $block['subject'] = t('Unit');
        $block['content'] = theme('logger_item_list', $items);

      } elseif ($delta == 'posts' && user_access('access content')) {

        $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.created FROM {node} n WHERE n.type = 'blogpost' AND n.status = 1 ORDER BY n.created DESC"), 0, 5);
        $node_title_list = node_title_list($result);

        if ($node_title_list) {
          $block['subject'] = t('Recent blog posts');
          $block['content'] = $node_title_list;
          $block['content'] .= theme('more_link', url('blog'), t('Read the latest blog entries.'));
        }
      }

      return $block;
  }
}

/**
 * Implementing a simple non-bulleted list for the logger_block
 */
function theme_logger_item_list($items, $title = NULL) {
  $output = '';
  foreach ($items as $item) {
    $output .= $item . '<br/>';
  }
  return $output;
}

/**
 * Generates the fluksonians block form.
 */
function _logger_fluksonians_form() {

  global $user;
  $destination = drupal_get_destination();

  $fluksonians = db_query("SELECT u.uid, u.name
                           FROM ({users} u
                           INNER JOIN {users_roles} ur ON u.uid = ur.uid)
                           INNER JOIN {role} r ON ur.rid = r.rid
                           WHERE r.name = '%s' AND NOT u.uid = %d
                           ORDER BY u.name", 'fluksonian', $user->uid);

  $subscriptions = db_query("SELECT u.uid, u.name, ur.rid
                             FROM ({users} u
                             INNER JOIN {user_relationships} ur ON u.uid = ur.requestee_id)
                             INNER JOIN {user_relationship_types} urt ON ur.rtid = urt.rtid
                             WHERE ur.requester_id = %d AND urt.name = '%s'
                             ORDER BY u.name", $user->uid, 'subscription');

  $i = 0;
  $rows = array();
  $row = array();
  $subscription = db_fetch_object($subscriptions);

  while ($fluksonian = db_fetch_object($fluksonians)) {

    if ($i > 3) {
      $rows[] = $row;
      $row = array();
      $i = 0;
    }

    if ($fluksonian->uid == $subscription->uid) {
      $row[] = l('[x]', 'logger/remove/'. $subscription->rid, array('attributes' => array('title' => "unsubscribe from ". $subscription->name ."'s stream"), 'query' => $destination, 'alias' => TRUE)) .' '. l($subscription->name, 'user/'. $subscription->uid, array('alias' => FALSE));
      $subscription = db_fetch_object($subscriptions);

    } else {
      $row[] = l('[+]', 'logger/add/'. $fluksonian->uid,
              array('attributes' => array('title' => "subscribe to ". $fluksonian->name ."'s stream"),
                  'query' => $destination, 'alias' => TRUE)) .' '. l($fluksonian->name, 'user/'. $fluksonian->uid, array('alias' => FALSE));
    }
    $i++;
  }
  $rows[] = $row;

  $form['fluksonians'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Fluksonians'),
    '#description' => t('Select the Fluksonians you wish to add to [+] or clear from [x] the chart.'),
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE,
  );

  $form['fluksonians']['list'] = array(
    '#type'    => 'item',
    //'#title' => t('Title'),
    '#value'   => theme('table', array(), $rows),
  );

  return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function logger_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'user_login') {
    $form['#redirect'] = 'logger';
    $form['name']['#size'] = 20;
    $form['pass']['#size'] = 20;
  }
}

/**
 * Access callback ensuring the user account tabs are visible only to the
 * owner.
 *
 * @param $permission Required permission to view the item.
 * @param $account    A user object.
 */
function _logger_account_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the sensor is accessible only to the owner.
 */
function _logger_sensor_access($permission, $meter) {

  $sql = "SELECT uid FROM {logger_meters} WHERE meter = '%s'";

  $sensor = db_fetch_object(db_query($sql, $meter));

  return ($sensor->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the device is accessible only to the owner.
 */
function _logger_device_access($permission, $serial) {

  $sql = "SELECT uid FROM {logger_devices} WHERE serial = %d";

  $device = db_fetch_object(db_query($sql, $serial));

  return ($device->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Cron will call this hook periodically [e.g. 1 hour interval] to perform housekeeping on the png's.
 */
function logger_cron() {

  exec('rm ' . GRAPH_PATH . '/hour/*');
  exec('rm ' . GRAPH_PATH . '/day/*');
  exec('rm ' . GRAPH_PATH . '/month/*');
  exec('rm ' . GRAPH_PATH . '/year/*');
  exec('rm ' . GRAPH_PATH . '/night/*');

  _logger_aggregate();
}

function _logger_aggregate() {

  $TZ = _logger_get_timezone_attribution();

  if (!file_exists(AGG_DB_PATH)) {

    //Creates datafile
    $ds_name = 'aggregation';
    $ds_type = 'DERIVE';
    $reset_time = 100 * 24 * 60 * 60; //100 days
    $min = 0;
    $max = 20;

    $command = $TZ . ' ' . RRDTOOL . ' create ' . AGG_DB_PATH . ' ' .
      "-b 1199487600 -s 60 DS:$ds_name:$ds_type:$reset_time:$min:$max " .
      "RRA:AVERAGE:0.5:1:120 " .
      "RRA:AVERAGE:0.5:15:192 " .
      "RRA:AVERAGE:0.5:1440:60 " .
      "RRA:AVERAGE:0.5:10080:520";
  }

  $sql = "SELECT SUM(m.value) FROM {logger_meters} m WHERE m.type = '%s' AND m.unit = '%s'";
  $total = db_fetch_object( db_query($sql, 'electricity', 'watt'));
  $timestamp = time();

  $command = $TZ . ' ' . RRDTOOL . ' update ' . AGG_DB_PATH . " $timestamp:$total";

  system($command, $return);

  //TODO: error logging
}