<?php

/**
 * Support module for charting flukso measurements.
 *
 * Copyright (c) 2008-2009 jokamajo.org
 *               2010 flukso.net
 *               2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

//Constants
define('ROOT_PATH',  drupal_get_path('module', 'logger'));
define('GRAPH_PATH', ROOT_PATH . '/graphs');

define('MINUTE', 60);
define('HOUR',   60 * MINUTE);
define('DAY',    24 * HOUR);
define('WEEK',    7 * DAY);
define('YEAR',  520 * WEEK);

define('CHART_UNIT', 'logger_chart_unit');
define('SERIES_COLOR_ID', 'logger_series_color_id');
define('SMOOTHING_LEVEL_ID', 'logger_smooting_level_id');
define('STEP_PLOT_ID', 'logger_step_plot');

function logger_init() {
  
  global $user;

  // Workaround for collapse.js not being loaded within _logger_fluksonians_form when block caching is on.
  if ($user->uid > 0) {
    drupal_add_js('misc/collapse.js');
  }

  drupal_add_js(ROOT_PATH . '/js/jscolor/jscolor.js');

  //If IE
  if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE')) {
    drupal_add_js(ROOT_PATH . '/js/excanvas.js');
  }

  drupal_add_js(ROOT_PATH . '/js/strftime-min.js');
  drupal_add_js(ROOT_PATH . '/js/rgbcolor.js');
  drupal_add_js(ROOT_PATH . '/js/dygraph-canvas.js');
  drupal_add_js(ROOT_PATH . '/js/dygraph.js');
}

function logger_perm() {
  return array('logger', 'register devices');
}

function logger_menu() {

  $items = array();

  // Dashboard operations

  $items['logger'] = array(
    'title'            => 'Your power consumption',
    'description'      => 'Show the dashboard.',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  /*
  $items['logger/water'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('water', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/gas'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('gas', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );*/

  $items['logger/electricity/hour'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/day'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'day'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/month'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'month'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/year'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'year'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/night'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'night'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );


  // Overview operations

  $items['overview'] = array(
    'title'            => 'Overall View',
    'description'      => 'Show the project overall view.',
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  /*
  $items['overview/water'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('water', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );

  $items['overview/gas'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('gas', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );*/

  $items['overview/electricity/hour'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/day'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'day'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/month'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'month'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/year'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'year'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/night'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'night'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );


  //Chart operations

  $items['logger/remove'] = array(
    'title'            => 'Remove this user from the chart',
    'page callback'    => '_logger_remove_user',
    'page arguments'   => array(2),
    'access arguments' => array('logger'),
    'type'             => MENU_CALLBACK
  );

  $items['logger/color'] = array(
    'title'            => 'Change the series color',
    'page callback'    => '_logger_series_color',
    'page arguments'   => array(2, 3),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );


  //Devices' operations

  $items['user/%user_uid_optional/devices'] = array(
    'title'            => 'Devices',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_logger_account_devices'),
    'access callback'  => '_logger_account_access',
    'access arguments' => array('register devices', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['device/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/devices']['title'],
    'page callback'    => '_logger_device_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_device_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );


  //Sensors' operations

  $items['user/%user_uid_optional/sensors'] = array(
    'title'            => 'Sensors',
    'page callback'    => '_logger_account_sensors',
    'access callback'  => '_logger_account_access',
    'access arguments' => array('logger', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['sensor/edit'] = array(
    'title'            => 'Sensor Edition',
    'page callback'    => '_logger_sensor_edit',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/sensors']['title'],
    'page callback'    => '_logger_sensor_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/activate'] = array(
    'title'            => $items['sensor/edit']['title'],
    'page callback'    => '_logger_sensor_activate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );


  /* Other operations */

  $items['installation'] = array(
    'title'            => '',
    'description'      => 'Howto install a Fluksometer',
    'page callback'    => '_logger_installation',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );

  $items['admin/settings/logger'] = array(
    'title'            => 'Logger settings',
    'description'      => 'Configure settings for logging metering values.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_logger_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['user/%user_uid_optional/privacy'] = array(
    'title'            => 'Privacy',
    'page callback'    => '_logger_account_privacy',
    'access callback'  => '_logger_account_access',
    'access arguments' => array('logger', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 2,
  );

  return $items;
}

function _logger_installation() {

  return
    '<div class="install">' . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step1.png'
       height='120' width='150' alt='step 1'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 1: CONFIGURING WIFI</b><br/>
       Power up the Fluksometer. Connect your computer to the Fluksometer's
       ethernet port. Surf to
       <a href = 'http://192.168.255.1'>http://192.168.255.1</a>.
       Configure the wireless interface with the proper name and security key.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step2.png'
       height='120' width='150' alt='step 2'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 2: SECURING THE FLUKSOMETER</b><br/>
       Disconnect all cables from the Fluksometer.
       Find a suitable location near the fuse box to install the Fluksometer.
       Secure the Fluksometer with the plastic cable tie.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step3.png'
       height='120' width='150' alt='step 3'/>
     </a>" .

    "<p><b>STEP 3: ATTACHING THE CURRENT CLAMP</b><br/>
       For safety reasons, switch off the main electricity supply.
       For a single phase supply, attach the current clamp to one of the two
       cables running from the electricity meter to the fuse box.
       Close the clamp firmly.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step4.png'
       height='120' width='150' alt='step 4'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 4: CONNECTING THE CLAMP'S SENSOR CABLE</b><br/>
       Connect the cable from the current clamp to the Fluksometer's input port.
       Take care of connecting the black and red cable as shown in the drawing
       on the left. Only apply gentle force when fastening the two screws.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step5.png'
       height='120' width='150' alt='step 4'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 5: POWERING UP</b><br/>
       Switch the main electricity supply back on.
       Activate the Fluksometer by connecting the power plug.
     </p>"  . PHP_EOL .
    "</div>". PHP_EOL;
}

/**
 * Builds the dashboard page.
 * 
 * @param $type     The sensor type.
 * @param $interval The time interval.
 * @return the dashboard page
 */
function _logger_dashboard($type, $interval) {

  if (user_access('logger')) {

    drupal_set_title(t('Your power consumption'));

    $sensors = _logger_get_user_sensors($type);

    return _logger_create_user_dygraph($sensors, $type, $interval);

  } else {

    return _logger_overview($type, $interval);
  }
}

/**
 * Builds the overview page.
 *
 * @param $type     The sensor type.
 * @param $interval The time interval.
 * @return the overview page
 */
function _logger_overview($type, $interval) {

  drupal_set_title(t('Overall View'));

  //General explanation
  $output .= theme('logger_overview_topic', NULL,
    t('<b>mySmartGrid</b> is the smart device control for your home. ' .
    'It enables you to understand your energy consumption and share your ' .
    'experiences with others.'), 'content/das-projekt');

  //Latest blogpost
  $sql = 'SELECT nid FROM {node} WHERE type = "%s" ORDER BY created DESC LIMIT 1';
  $result = db_fetch_object(db_query($sql, "blogpost"));

  if ($result) {

    $blog = node_load(array('nid' => $result->nid));

    $output .= theme('logger_overview_topic', t('Blog: ') . $blog->title, $blog->teaser, 'blog');
  }

  //Counters
  $sql = "SELECT count(*) FROM {logger_devices} d WHERE d.uid <> %d";
  $devcounter = db_result( db_query($sql, 0));

  $sql = "
    SELECT
      count(*)
    FROM
      {users} u
    WHERE
      EXISTS(
        SELECT
          1
        FROM
          {logger_devices} d
        WHERE
          d.uid = u.uid
      )";

  $usercounter = db_result( db_query($sql));

  $output .= theme('logger_overview_topic', t('Total Consumption of All Participants'),
    t('Currently, <b>@devcounter</b> Flukso devices are installed ' .
      'in <b>@usercounter</b> households. The following chart shows their ' .
      'aggregate electricity consumption.',
      array(
        '@devcounter'  => $devcounter,
        '@usercounter' => $usercounter))) . '<br>';

  $sensors = _logger_get_active_sensors($type);

  $output .= _logger_create_dygraph_agg_chart($sensors, $type, $interval) . '<br>';

  return $output;
}

/**
 * Creates an Aggregated Consumption Chart using DyGraphs.
 *
 * @param $sensors  The array of sensors to be aggregated.
 * @param $type     The sensor type.
 * @param $interval The time interval.
 * @return the chart output.
 */
function _logger_create_dygraph_agg_chart($sensors, $type, $interval) {

  module_load_include('inc', 'logger', 'logger.rrd');

  $chart = _logger_create_chart_object($interval, $type, 'overview');
  $offset = _logger_get_timezone_offset();

  $chart->data[0][t('All')][t('All')] = logger_rrd_query_agg($interval, $sensors, $chart->factor, $chart->start, $offset);

  return theme('logger_dygraph', $chart);
}

/**
 * Creates an User Dashboard Chart using DyGraphs.
 *
 * @param $sensors  The array of sensors to be plotted.
 * @param $type     The sensor type.
 * @param $interval The time interval.
 * @return the chart output.
 */
function _logger_create_user_dygraph($sensors, $type, $interval) {

  module_load_include('inc', 'logger', 'logger.rrd');

  $chart = _logger_create_chart_object($interval, $type, 'logger');
  $offset = _logger_get_timezone_offset();

  foreach ($sensors as &$sensor) {

    $chart->data[$sensor->uid][$sensor->username][$sensor->function] = logger_rrd_query_sensor($interval, $sensor, $chart->factor, $chart->start, $offset);
  }

  return theme('logger_dygraph', $chart);
}

/**
 * Creates an object to hold all chart parameters.
 *
 * @param $type      The sensor type.
 * @param $interval  The time interval.
 * @param $context   The page where the chart is going to be placed (overview or logger).
 * @return the chart parameters.
 */
function _logger_create_chart_object($interval, $type, $context) {

  $params = new stdClass();

  //Default
  $params->unit = 'watt';
  $params->factor = 3600; // 1Wh/s = 3600 W
  $params->data = array();
  $params->interval = $interval;
  $params->context = $context;

  switch ($interval) {
    case 'hour':
      $params->start = 'end-1h';
      break;

    case 'day':
      $params->start = 'end-1d';
      break;

    case 'month':
      $params->start = 'end-60d';
      break;

    case 'year':
      $params->start = 'end-1y';
      break;

    case 'night':
      $params->start = 'end-60d';
      break;
  }

  $unformatted_unit = _logger_get_unit();

  switch ($type) {
    case 'electricity':
      switch ($unformatted_unit) {
        case 'kw':
          $params->unit = 'kW';
          $params->factor = 0.001;
          break;

        case 'kwh':
          $params->unit = 'kWh/year';
          $params->factor = 31536;
          break;

        case 'eur':
          $params->unit = 'euro/year';
          $params->factor = 5676; // 18 EURcent/kWh
          break;

        case 'aud':
          $params->unit = 'aud/year';
          $params->factor = 5991; // 19 AUDcent/kWh
          break;
      }
  }
  return $params;
}

/**
 * Returns an array containing all sensors either owned by the user or selected
 * by him to be plotted on the chart.
 * 
 * @param $type       The type of sensors to be returned.
 * @return the array of user sensors.
 */
function _logger_get_user_sensors($type) {

  global $user;
  $sensors = array();

  $sql = "
    SELECT
      lm.uid,
      '%s' AS username,
      lm.meter,
      lm.function,
      lm.unit,
      lu.private
    FROM
      {logger_meters} lm
      INNER JOIN {logger_users} lu ON lm.uid = lu.uid
    WHERE
      lm.uid = %d AND
      lm.type = '%s' AND
      lm.function IS NOT NULL
    ORDER BY
      lm.function";

  $result = db_query($sql, $user->name, $user->uid, $type);

  while ($sensor = db_fetch_object($result)) {
    $sensors[] = $sensor;
  }

  if (user_access('logger')) {

    $sql = "
      SELECT
        u.uid,
        u.name AS username,
        lm.meter,
        lm.function,
        lm.unit,
        lu.private
      FROM
        ((({users} u
        INNER JOIN {user_relationships} ur ON u.uid = ur.requestee_id)
        INNER JOIN {user_relationship_types} urt ON ur.rtid = urt.rtid)
        INNER JOIN {logger_meters} lm ON u.uid = lm.uid)
        INNER JOIN {logger_users} lu ON u.uid = lu.uid
      WHERE
        ur.requester_id = %d AND
        urt.name = '%s' AND
        lm.type = '%s' AND
        lm.function IS NOT NULL
      ORDER BY
        ur.rid";

    $result = db_query($sql, $user->uid, 'subscription', $type);

    while($sensor = db_fetch_object($result)) {
      $sensors[] = $sensor;
    }
  }
  return $sensors;
}

/**
 * Returns an array containing all active sensors.
 *
 * @param $type       The type of sensors to be returned.
 * @return the array of user sensors.
 */
function _logger_get_active_sensors($type) {

  $sql = "
    SELECT
      lm.meter AS meter
    FROM
      {logger_meters} lm
    WHERE
      lm.uid > 0 AND
      lm.type = '%s' AND
      lm.function IS NOT NULL";

  $result = db_query($sql, $type);

  $sensors = array();
  while ($sensor = db_fetch_object($result)) {

    $sensors[] = $sensor;
  }
  return $sensors;
}

/**
 * Returns the user timezone offset.
 *
 * @return the user timezone offset.
 */
function _logger_get_timezone_offset() {

  global $user;

  if ($user->uid) {
    $offset = $user->timezone;

  } else { //If user is not logged in

    //Gets timezone used in the browser. Auto Timezone option must be turned on.
    $offset = $_SESSION['timezone'];
  }

  return $offset;
}

function logger_theme() {

  return array(
    'logger_dygraph' => array(
      'arguments' => array(
        'chart' => NULL),
    ),

    'logger_overview_topic' => array(
      'arguments' => array(
        'title' => NULL,
        'body' => NULL,
        'link' => NULL),
    ),

    'logger_item_list' => array(
      'arguments' => array(
        'items' => NULL,
        'title' => NULL),
    ),

    'logger_account_devices' => array(
      'arguments' => array(
        'form' => NULL),
      'file' => 'logger.admin.inc',
    ),

    'logger_account_devices_list' => array(
      'arguments' => array(
        'items' => NULL),
      'file' => 'logger.admin.inc',
    ),

    'logger_account_sensors_list' => array(
      'arguments' => array(
        'items' => NULL),
      'file' => 'logger.admin.inc',
    ),

    'logger_smoothing_level' => array(
      'arguments' => array(
        'element' => NULL),
    ),
  );
}

/**
 * Theming a topic of the Overview page.
 *
 * @param $title  The topic title.
 * @param $body   The topic body.
 * @param $link   The topic link.
 * @return the topic.
 */
function theme_logger_overview_topic($title, $body, $link = NULL) {

  if($title) {
    $output .= '<br><h3 class="node-headline">' . $title . '</h3>';
  }

  $output .= "<p> $body </p>";

  if($link) {
    $output .= '<p>' . l(t('read more'), $link) . '</p>';
  }

  return $output;
}

/**
 * Theming the DyGraph chart.
 *
 * @param $chart   The chart parameters.
 * @return the chart output.
 */
function theme_logger_dygraph($chart) {

  $file_path = _logger_save_chart_file($chart);
  $colors = _logger_get_series_colors();
  $smoothing_level = _logger_get_smoothing_level();
  $step_plot = _logger_get_step_plot()? 'true' : 'false';

  $output = _logger_create_interval_menu($chart->context);

  $output .= '
    <div>' . $chart->unit . '</div>
    <div id="dygraphdiv"></div>
    <div id="dygraphstatus" style="min-height:20px; width=450px; padding-top:10px; padding-bottom:5px;"></div>

    <script type="text/javascript">

      new Dygraph(
        document.getElementById("dygraphdiv"),
        "/' . $file_path . '",
        {
          labelsDiv: document.getElementById("dygraphstatus"),
          colors: ["' . implode('","', $colors) . '"],
          width: 600,
          height: 350,
          yAxisLabelWidth: 50,
          includeZero: true,
          showRoller: false,
          stepPlot: ' . $step_plot . ',
          rollPeriod: ' . $smoothing_level . '
        }
      );
    </script>';

  $output .= _logger_create_graph_legend($chart->data, $colors);

  if ($chart->context == 'logger') {
    $output .= drupal_get_form('logger_control_form');
  }

  $output .= l(t('Save Data'), $file_path);

  return $output;
}

/**
 * Saves chart to a file.
 *
 * @param $chart   The chart parameters.
 * @return the data file path.
 */
function _logger_save_chart_file($chart) {

  //Generate random number for the png chart so that the browser doesn't use the cached one.
  //Cron is used to clean up the dir.
  $unique_id = md5(uniqid());
  $file_path = GRAPH_PATH . '/' . $chart->interval . "/msg-chart-$unique_id.csv";

  $header = t('Time');
  $values = array();
  $timestamps = _logger_get_all_timestamps($chart->data);
  $s = 1;

  foreach($chart->data as $uid => $userdata) {
    foreach($userdata as $username => $sensors) {
      foreach($sensors as $sensor => $measurements) {
        $header .= ',S' . $s++;

        foreach($timestamps as $timestamp) {
          $value = $measurements[$timestamp];
          $value = $value? number_format($value, 3, '.', '') : '';
          $values[$timestamp] .= ',' . $value;
        }
      }
    }
  }

  $series = $header . PHP_EOL;
  foreach($values as $timestamp => $values_list) {
    $series .= date('Y-m-d H:i', $timestamp) . $values_list . PHP_EOL;
  }

  $fh = fopen($file_path, 'w');
  fwrite($fh, $series);
  fclose($fh);

  return $file_path;
}

/**
 * Returns a sorted array of measurements' timestamps.
 *
 * @param $data  The chart series data. {user => {sensor => {timestamp => value}}}
 * @return the array of timestamps.
 */
function _logger_get_all_timestamps($data) {
  $timestamps = array();
  foreach($data as $uid => $userdata) {
    foreach($userdata as $username => $sensors) {
      foreach($sensors as $sensor => $measurements) {
        foreach(array_keys($measurements) as $timestamp) {
          $timestamps[$timestamp] = null;
        }
      }
    }
  }
  $timestamps = array_keys($timestamps);
  sort($timestamps);
  return $timestamps;
}

/**
 * Creates the chart intervals' horizontal menu.
 *
 * @param $context  The page where the menu is going to be placed (overview or logger).
 * @return the list of intervals' menus.
 */
function _logger_create_interval_menu($context) {
  
  $items = array(
    l(t('Hour'),  "$context/electricity/hour"),
    l(t('Day'),   "$context/electricity/day"),
    l(t('Month'), "$context/electricity/month"),
    l(t('Year'),  "$context/electricity/year"),
    l(t('Night'), "$context/electricity/night")
  );

  return theme_item_list($items, NULL, 'ul', array('class' => 'tabs secondary'));
}

/**
 * Creates the chart legend.
 *
 * @param $data   The series data.
 * @param $colors The series colors.
 * @return the chart legend as a table.
 */
function _logger_create_graph_legend($data, $colors) {

  global $user;

  function _format($value) {
    return $value > 0? number_format($value, 2) : '';
  }

  $i = 0;
  foreach($data as $uid => $userdata) {
    foreach($userdata as $username => $sensors) {
      foreach($sensors as $meter => $measurements) {

        $total = 0;
        $last = 0;
        $max = 0;
        $min = null;
        $sum = 0;
        $avg = 0;

        foreach($measurements as $timestamp => $value) {
          if ($value) {
            $total++;
            $last = $value;
            $max = $value > $max? $value: $max;
            $min = !$min || $value < $min? $value: $min;
            $sum += $value;
          }
        }
        $avg = $total > 0? $sum / $total : 0;

        $color = $colors[$i % count($colors)];

        $id = SERIES_COLOR_ID . $i;
        $mark = '<input class="color {valueElement:' . "'$id'" . '} type="button"
          style="width: 10px; height: 10px;"/>
          <input id="' . $id . '" type="hidden" value="' . $color . '"
          onchange="' . "document.location='/logger/color/$i/' + escape('#' + this.value) + '?" . drupal_get_destination() . "';" . '"/>';

        $operations = ($uid > 0 && $uid != $user->uid)?
        '<a href="' . "/logger/remove/$uid?" . urldecode(drupal_get_destination()) . '">' . t('Remove') . '</a>' : '';
        //TODO: make it work: l(t('Remove'), "logger/remove/$uid?" . drupal_get_destination(), array('html' => TRUE)) : '';

        $lines[] = array(
            'mark'      => $mark,
            'user'      => $username,
            'sensor'    => $meter,
            'max'       => _format($max),
            'min'       => _format($min),
            'avg'       => _format($avg),
            'last'      => _format($last),
            'operation' => $operations
        );
        $i++;
      }
    }
  }

  $headers = array(
    array('data'  => t('Color')),
    array('data'  => t('User')),
    array('data'  => t('Sensor')),
    array('data'  => t('Max')),
    array('data'  => t('Min')),
    array('data'  => t('Avg')),
    array('data'  => t('Last')),
    array('data'  => t('Operation'))
  );

  return '<br>' . theme('table', $headers, $lines);
}

/**
 * Sets the chart series color.
 *
 * @param $i      The chart series' index.
 * @param $color  The new chart series' color.
 */
function _logger_series_color($i, $color) {

  global $_REQUEST;
  global $user;
  $id = SERIES_COLOR_ID . $i;

  if ($user) {
    $id .= $user->uid;
    variable_set($id, $color);

  } else {
    setcookie($id, $unit, time() + WEEK, '/');
  }

  drupal_goto($_REQUEST['destination']);
}

/**
 * Returns the list of colors used in chart series.
 *
 * @return array of colors.
 */
function _logger_get_series_colors() {

  function _get_color($i, $default) {

    global $user;
    $id = SERIES_COLOR_ID . $i;

    if ($user) {
      $id .= $user->uid;
      $color = variable_get($id, $default);

    } else {
      $color = isset($_COOKIE[$id])? $_COOKIE[$id] : $default;
    }

    return $color;
  }

  return array(
    _get_color( 0, '#377037'), //GREEN
    _get_color( 1, '#C11700'), //RED
    _get_color( 2, '#0000FC'), //BLUE
    _get_color( 3, '#F37E2B'), //ORANGE
    _get_color( 4, '#B54FC6'), //PINK
    _get_color( 5, '#665C00'), //BROWN
    _get_color( 6, '#050305'), //BLACK
    _get_color( 7, '#809090'), //GREY
    _get_color( 8, '#9ED3C0'), //REEN3
    _get_color( 9, '#00FF00'), //GREEN2
    _get_color(10, '#0080FF'), //SKYBLUE
    _get_color(11, '#00ffff'), //CYAN
    _get_color(12, '#FBEB0D'), //YELLOW
    _get_color(13, '#DED00F')  //BROWN2
    );
}

function logger_block($op = 'list', $delta = 0, $edit = array()) {

  global $user;

  switch ($op) {
    case 'list':
      $blocks['posts']['info'] = t('Recent blog posts');
      $blocks['posts']['status'] = TRUE;
      $blocks['posts']['region'] = 'right';
      $blocks['posts']['weight'] = 3;
      $blocks['posts']['pages'] = '<front>\nlogger/\nlogger/*';
      $blocks['posts']['cache'] = BLOCK_CACHE_GLOBAL;

      return $blocks;

    case 'view':

      if ($delta == 'posts' && user_access('access content')) {

        $block = _logger_create_recent_blogs_block();
      }

      return $block;
  }
}

function _logger_create_recent_blogs_block() {

  $block = array();

  $sql = "
    SELECT
      n.nid,
      n.title,
      n.created
    FROM
      {node} n
    WHERE
      n.type = 'blogpost' AND
      n.status = 1
    ORDER BY
      n.created DESC";

  $result = db_query_range(db_rewrite_sql($sql), 0, 5);
  $node_title_list = node_title_list($result);

  if ($node_title_list) {
    $block['subject'] = t('Recent blog posts');
    $block['content'] = $node_title_list;
    $block['content'] .= theme('more_link', url('blog'), t('Read the latest blog entries.'));
  }

  return $block;
}

/**
 * Implementing a simple non-bulleted list for the logger_block
 */
function theme_logger_item_list($items, $title = NULL) {
  $output = '';
  foreach ($items as $item) {
    $output .= $item . '<br/>';
  }
  return $output;
}

function logger_control_form() {

  global $base_path;

  $attributes = array(
    'onchange'      => '
      document.getElementById("logger-control-form").submit();'
  );

  $form['new_user'] = array(
    '#type'           => 'select',
    '#title'          => t('Add User'),
    '#description'    => t('Select a user to be added to the chart.'),
    '#options'        => _logger_get_users_options(),
    '#default_value'  => 0,
    '#attributes'     => $attributes
  );

  $form['unit'] = array(
    '#type'           => 'select',
    '#title'          => t('Chart Unit'),
    '#description'    => t('Select the chart unit.'),
    '#options'        => _logger_get_units_options(),
    '#default_value'  => _logger_get_unit(),
    '#required'       => TRUE,
    '#attributes'     => $attributes
  );

  $form['step_plot'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Stepped Lines'),
    '#description'    => t('Do you want the chart series to use stepped lines?'),
    '#default_value'  => _logger_get_step_plot(),
    '#return_value'   => 1,
    '#required'       => TRUE,
    '#attributes'     => $attributes
  );

  $form['smoothing_level'] = array(
    '#type'           => 'textfield',
    '#theme'          => 'logger_smoothing_level',
    '#title'          => t('Smoothing Level'),
    '#description'    => t("Increase this number to smooth the series' lines and make the chart more readable."),
    '#maxlength'      => 5,
    '#size'           => 5,
    '#default_value'  => _logger_get_smoothing_level(),
    '#required'       => TRUE,
    '#attributes'     => $attributes
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Refresh')
  );
  
  return $form;
}

function theme_logger_smoothing_level($element) {

  function _operation_button($field, $caption, $step) {

    $onclick = "
      var field = document.getElementById('$field');
      var level = field.value - (-1 * ($step));
      field.value = level < 1? 1: level;
      field.onchange();";

    return '<input type="button" value="' . $caption . '" onclick="' . $onclick . '"/>';
  }

  _form_set_class($element, array('form-text'));

  $id = $element['#id'];

  $output =
    _operation_button($id, '<<', -10) .
    _operation_button($id, '<',  -1) .

    '<input type="text" ' .
    'name="'      . $element['#name']               . '" ' .
    'id="'        . $id                             . '" ' .
    'maxlength="' . $element['#maxlength']          . '" ' .
    'size="'      . $element['#size']               . '" ' .
    'value="'     . check_plain($element['#value']) . '" ' .
    'style="text-align: center;" ' .
    drupal_attributes($element['#attributes']) . ' />' .

    _operation_button($id, '>',   1) .
    _operation_button($id, '>>',  10);

  return theme('form_element', $element, $output);
}

function logger_control_form_validate($form, &$form_state) {

  $smoothing_level = $form_state['values']['smoothing_level'];

  if ($smoothing_level < 1) {
    form_set_error('smoothing_level', t('The smoothing level must be greater than 0.'));
  }

  $step_plot = $form_state['values']['step_plot'];

  if ($step_plot != 1 && $step_plot != 0) {
    form_set_error('step_plot', t('The stepped lines option must be either 0 or 1.'));
  }
}

function logger_control_form_submit($form, &$form_state) {

  global $_REQUEST;
  
  $new_user        = $form_state['values']['new_user'];
  $unit            = $form_state['values']['unit'];
  $step_plot       = $form_state['values']['step_plot'];
  $smoothing_level = $form_state['values']['smoothing_level'];

  if ($new_user > 0) {
    _logger_add_user($new_user);
  }

  _logger_set_unit($unit);
  _logger_set_step_plot($step_plot);
  _logger_set_smoothing_level($smoothing_level);

  $form_state['redirect'] = $_REQUEST['destination'];
}

/**
 * Returns an array of units indexed by their respective acronym.
 *
 * @return the array of units.
 */
function _logger_get_units_options() {

  $options['watt'] = t('watt');
  $options['kwh']  = t('kWh/year');
  $options['eur']  = t('euro/year [@ 0.18eur/kWh]');
  $options['aud']  = t('aud/year [@ 0.19aud/kWh]');

  return $options;
}

/**
 * Sets the chart unit.
 *
 * @param $unit  The new unit.
 */
function _logger_set_unit($unit) {

  global $user;
  $id = CHART_UNIT;

  if ($user) {
    $id .= $user->uid;
    variable_set($id, $unit);

  } else {
    setcookie($id, $unit, time() + WEEK, '/');
  }
}

/**
 * Returns the chart unit.
 *
 * @return the chart unit.
 */
function _logger_get_unit() {

  global $user;
  $id = CHART_UNIT;

  if ($user) {
    $id .= $user->uid;
    $unit = variable_get($id, 'watt');

  } else {
    $unit = isset($_COOKIE[$id])? $_COOKIE[$id] : 'watt';
  }
  return $unit;
}

/**
 * Sets the chart smooting level.
 *
 * @param $level  The new smooting level.
 */
function _logger_set_smoothing_level($level) {

  global $user;
  $id = SMOOTHING_LEVEL_ID . $user->uid;

  variable_set($id, $level);
}

/**
 * Returns the chart smooting level.
 *
 * @return The chart smooting level.
 */
function _logger_get_smoothing_level() {

  global $user;

  if ($user) {
    $id = SMOOTHING_LEVEL_ID . $user->uid;
    $level = variable_get($id, 1);

  } else {
    $level = 1;
  }

  return $level;
}

/**
 * Returns whether the chart is stepped or not.
 *
 * @return 1 if it is, 0 otherwise.
 */
function _logger_get_step_plot() {

  global $user;

  if ($user) {
    $id = STEP_PLOT_ID . $user->uid;
    $step_plot = variable_get($id, 0);

  } else {
    $step_plot = 0;
  }

  return $step_plot;
}

/**
 * Sets  whether the chart is stepped or not.
 *
 * @param $step_plot  1 if it is, 0 otherwise.
 */
function _logger_set_step_plot($step_plot) {

  global $user;
  $id = STEP_PLOT_ID . $user->uid;

  variable_set($id, $step_plot);
}

/**
 * Returns an array of fluksonian users indexed by their respective user id.
 * Only users not yet plotted on the chart are returned.
 *
 * @return the array of fluksonian users.
 */
function _logger_get_users_options() {

  global $user;

  $sql = "
    SELECT
      f.uid,
      f.name
    FROM
      {users} f,
      {users_roles} ur,
      {role} r
    WHERE
      f.uid <> %d AND
      f.uid = ur.uid AND
      ur.rid = r.rid AND
      r.name = '%s' AND
      NOT EXISTS(
        SELECT
          1
        FROM
          {user_relationships} urel,
          {user_relationship_types} t
        WHERE
          t.name = '%s' AND
          urel.rtid = t.rtid AND
          urel.requestee_id = f.uid AND
          urel.requester_id = %d
      )
    ORDER BY
      f.name";

  $fluksonians = db_query($sql, $user->uid, 'fluksonian', 'subscription', $user->uid);

  $options = array(0 => '');
  while($fluksonian = db_fetch_object($fluksonians)) {
    $options[$fluksonian->uid] = $fluksonian->name;
  }
  return $options;
}

function _logger_add_user($uid) {

  global $user;

  // don't allow users to add themselves
  if ($uid != $user->uid) {

    $sql = "SELECT rtid FROM {user_relationship_types} WHERE name = '%s'";
    $rtid = db_result(db_query($sql, 'subscription'));

    user_relationships_request_relationship($user->uid, $uid, $rtid, TRUE);
  }
}

function _logger_remove_user($requestee_id) {

  global $_REQUEST;
  global $user;

  $sql = "
    DELETE
      FROM {user_relationships}
    WHERE
      requester_id = %d AND
      requestee_id = %d";

  db_query($sql, $user->uid, $requestee_id);

  drupal_goto($_REQUEST['destination']);
}

function logger_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'user_login') {
    $form['#redirect'] = 'logger';
    $form['name']['#size'] = 20;
    $form['pass']['#size'] = 20;
  }
}

/**
 * Access callback ensuring the user account tabs are visible only to the owner.
 *
 * @param $permission Required permission to view the item.
 * @param $account    A user object.
 */
function _logger_account_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the sensor is accessible only to the owner.
 */
function _logger_sensor_access($permission, $meter) {

  $sql = "SELECT uid FROM {logger_meters} WHERE meter = '%s'";

  $sensor = db_fetch_object(db_query($sql, $meter));

  return ($sensor->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the device is accessible only to the owner.
 */
function _logger_device_access($permission, $serial) {

  $sql = "SELECT uid FROM {logger_devices} WHERE serial = %d";

  $device = db_fetch_object(db_query($sql, $serial));

  return ($device->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Queries the databases for measurements reported by sensors of a single device.
 *
 * @param $interval The time interval.
 * @param $start    The start time.
 * @param $device   The device's hash code.
 * @param $offset   The user timezone offset.
 * @return the array of sensors' measurements, formatted as [meter][function][ [timestamp, value] ].
 */
function logger_query_device_measurements($interval, $start, $device, $offset) {

  module_load_include('inc', 'logger', 'logger.rrd');

  $sql = "SELECT m.meter, m.function FROM {logger_meters} m WHERE m.device = '%s'";
  $sensors = db_query($sql, $device);
  $measurements = array();

  while($sensor = db_fetch_object($sensors)) {

    $measurements[$sensor->meter][$sensor->function] = logger_rrd_query_sensor($interval, $sensor, 3600, $start, $offset);
  }
  return $measurements;
}

function logger_cron() {

  $intervals = array('hour', 'day', 'month', 'year', 'night');

  //Delete png files older than 30 minutes.
  //This limit prevents chart files from being removed before they are sent to the user.

  foreach($intervals as $interval) {

    exec('find ' . GRAPH_PATH . "/$interval/*"  . ' -mmin +30 -exec rm {} \;');
  }
}