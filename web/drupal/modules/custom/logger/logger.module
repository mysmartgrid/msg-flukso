<?php

/**
 * Support module for charting data stored in RRD's.
 *
 * Copyright (c) 2008-2009 jokamajo.org
 *               2010 flukso.net
 *               2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

//Constants
define('RED',     'F1572F');
define('BLUE',    '44C3D3');
define('GREEN',   '7AAB5A');
define('ORANGE',  'F37E2B');
define('YELLOW',  'FBEB0D');
define('PURPLE',  'A052A0');
define('BROWN',   '808000');
define('PINK',    'FF0080');
define('CYAN',    '00ffff');
define('SKYBLUE', '0080FF');

define('ROOT_PATH',   drupal_get_path('module', 'logger'));
define('GRAPH_PATH',  ROOT_PATH . '/graphs');
define('DATA_PATH',   ROOT_PATH . '/data/base');
define('AGG_DB_PATH', DATA_PATH . "/aggregate.rrd");
define('RRDTOOL',     ROOT_PATH . '/rrdtool');

define('MINUTE', 60);
define('HOUR',   60 * MINUTE);
define('DAY',    24 * HOUR);
define('WEEK',    7 * DAY);
define('MONTH',  30 * DAY);
define('YEAR',  365 * DAY);


function logger_init() {
  
  global $user;

  // Workaround for collapse.js not being loaded within  _logger_fluksonians_form when block caching is on.
  if ($user->uid > 0) {
    drupal_add_js('misc/collapse.js');
  }
}

function logger_perm() {
  return array('logger', 'register devices');
}

function logger_menu() {

  $items = array();

  //TODO: remove the function name "main" from the callbacks

  // Dashboard operations

  $items['logger'] = array(
    'title'            => 'Your power consumption',
    'description'      => 'Show the dashboard.',
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  /*
  $items['logger/water'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('water', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/gas'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('gas', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );*/

  $items['logger/electricity/hour'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/day'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'day'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/month'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'month'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/year'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'year'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['logger/electricity/night'] = array(
    'title'            => $items['logger']['title'],
    'page callback'    => '_logger_dashboard',
    'page arguments'   => array('electricity', 'main', 'night'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );


  // Overview operations

  $items['overview'] = array(
    'title'            => 'Overall View',
    'description'      => 'Show the project overall view.',
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  /*
  $items['overview/water'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('water', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );

  $items['overview/gas'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('gas', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );*/

  $items['overview/electricity/hour'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'hour'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/day'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'day'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/month'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'month'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/year'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'year'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );

  $items['overview/electricity/night'] = array(
    'title'            => $items['overview']['title'],
    'page callback'    => '_logger_overview',
    'page arguments'   => array('electricity', 'night'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK
  );


  //Chart operations

  $items['logger/add'] = array(
    'title'            => 'Add this user to the chart',
    'page callback'    => '_logger_add',
    'access arguments' => array('logger'),
    'type'             => MENU_CALLBACK,
  );

  $items['logger/remove'] = array(
    'title'            => 'Remove this user from the chart',
    'page callback'    => '_logger_remove',
    'access arguments' => array('logger'),
    'type'             => MENU_CALLBACK,
  );

  $items['logger/unit'] = array(
    'title'            => 'Change the unit',
    'page callback'    => '_logger_unit',
    'access arguments' => array('logger'),
    'type'             => MENU_CALLBACK,
  );


  //Devices' operations

  $items['user/%user_uid_optional/devices'] = array(
    'title'            => 'Devices',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_logger_account_devices'),
    'access callback'  => '_logger_account_access',
    'access arguments' => array('register devices', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['device/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/devices']['title'],
    'page callback'    => '_logger_device_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_device_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );


  //Sensors' operations

  $items['user/%user_uid_optional/sensors'] = array(
    'title'            => 'Sensors',
    'page callback'    => '_logger_account_sensors',
    'access callback'  => '_logger_account_access',
    'access arguments' => array('logger', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 3,
  );

  $items['sensor/edit'] = array(
    'title'            => 'Sensor Edition',
    'page callback'    => '_logger_sensor_edit',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/deactivate'] = array(
    'title'            => $items['user/%user_uid_optional/sensors']['title'],
    'page callback'    => '_logger_sensor_deactivate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );

  $items['sensor/activate'] = array(
    'title'            => $items['sensor/edit']['title'],
    'page callback'    => '_logger_sensor_activate',
    'page arguments'   => array(2),
    'access callback'  => '_logger_sensor_access',
    'access arguments' => array('logger', 2),
    'type'             => MENU_CALLBACK,
    'file'             => 'logger.admin.inc'
  );


  /* Other operations */

  $items['installation'] = array(
    'title'            => '',
    'description'      => 'Howto install a Fluksometer',
    'page callback'    => '_logger_installation',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );

  $items['admin/settings/logger'] = array(
    'title'            => 'Logger settings',
    'description'      => 'Configure settings for logging metering values.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_logger_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['user/%user_uid_optional/privacy'] = array(
    'title'            => 'Privacy',
    'page callback'    => '_logger_account_privacy',
    'access callback'  => '_logger_account_access',
    'access arguments' => array('logger', 1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'logger.admin.inc',
    'weight'           => 2,
  );

  return $items;
}

function _logger_installation() {

  return
    '<div class="install">' . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step1.png'
       height='120' width='150' alt='step 1'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 1: CONFIGURING WIFI</b><br/>
       Power up the Fluksometer. Connect your computer to the Fluksometer's
       ethernet port. Surf to
       <a href = 'http://192.168.255.1'>http://192.168.255.1</a>.
       Configure the wireless interface with the proper name and security key.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step2.png'
       height='120' width='150' alt='step 2'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 2: SECURING THE FLUKSOMETER</b><br/>
       Disconnect all cables from the Fluksometer.
       Find a suitable location near the fuse box to install the Fluksometer.
       Secure the Fluksometer with the plastic cable tie.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step3.png'
       height='120' width='150' alt='step 3'/>
     </a>" .

    "<p><b>STEP 3: ATTACHING THE CURRENT CLAMP</b><br/>
       For safety reasons, switch off the main electricity supply.
       For a single phase supply, attach the current clamp to one of the two
       cables running from the electricity meter to the fuse box.
       Close the clamp firmly.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step4.png'
       height='120' width='150' alt='step 4'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 4: CONNECTING THE CLAMP'S SENSOR CABLE</b><br/>
       Connect the cable from the current clamp to the Fluksometer's input port.
       Take care of connecting the black and red cable as shown in the drawing
       on the left. Only apply gentle force when fastening the two screws.
     </p>" . PHP_EOL .
    "<a class='img' href = 'http://www.flukso.net/installation'>
       <img src='http://www.flukso.net/sites/default/files/images/step5.png'
       height='120' width='150' alt='step 4'/>
     </a>" . PHP_EOL .

    "<p><b>STEP 5: POWERING UP</b><br/>
       Switch the main electricity supply back on.
       Activate the Fluksometer by connecting the power plug.
     </p>"  . PHP_EOL .
    "</div>". PHP_EOL;
}

/**
 * Builds the dashboard page.
 * 
 * @param $type     The sensor type.
 * @param $function The sensor function.
 * @param $interval The time interval.
 * @return the dashboard page
 */
function _logger_dashboard($type, $function, $interval) {

  if (user_access('logger')) {

    drupal_set_title(t('Your power consumption'));

    $sensors = _logger_get_user_sensors($type, $function);
    $chart = _logger_get_chart_params($interval, $type, $sensors[0]->unit);

    global $user;
    $colors = array(RED, BLUE, GREEN, YELLOW, PURPLE, ORANGE, BROWN, PINK, CYAN, SKYBLUE);
    $i = 0;

    foreach ($sensors as &$sensor) {

      $shifted = $sensor->private && ($sensor->uid != $user->uid);

      if ($sensor->uid == $user->uid) {
        $caption = $sensor->function;

      } else {
        $caption = $sensor->username . ' ' . $sensor->function;
      }

      $file_path = $chart->data_path . '/' . $sensor->meter . '.rrd';
      $color = $colors[$i % count($colors)];

      $chart->def  .= _logger_chart_def($i, $file_path, $chart->factor, $shifted);
      $chart->line .= _logger_chart_line($i, $color, $caption, $shifted);

      $i++;
    }

    _logger_create_chart_file($chart);

    return theme('chart', $chart->file_path, 'logger');

  } else {

    return _logger_overview($type, $interval);
  }
}

function _logger_overview($type, $interval) {

  drupal_set_title(t('Overall View'));

  //General explanation
  $output .= theme('overview_topic', NULL,
    t('<b>mySmartGrid</b> is the smart device control for your home.
    It enables you to understand your energy consumption and share your
    experiences with others.'), 'content/das-projekt');

  //Latest blogpost
  $sql = 'SELECT nid FROM {node} WHERE type = "%s" ORDER BY created DESC LIMIT 1';
  $result = db_fetch_object(db_query($sql, "blogpost"));

  if ($result) {

    $blog = node_load(array('nid' => $result->nid));

    $output .= theme('overview_topic', t('Blog: ') . $blog->title, $blog->teaser, 'blog');
  }

  //Current Status
  $sql = "SELECT count(*) as total FROM {logger_devices} d WHERE d.uid <> %d";
  $result = db_fetch_object( db_query($sql, 0));
  $devcounter = $result->total;

  $sql = "
    SELECT
      count(*) as total
    FROM
      {users} u
    WHERE
      EXISTS(
        SELECT
          1
        FROM
          {logger_devices} d
        WHERE
          d.uid = u.uid
      )";

  $result = db_fetch_object( db_query($sql));
  $usercounter = $result->total;

  $output .= theme('overview_topic', t('Total Consumption of All Participants'),
    t('Currently, <b>@devcounter</b> Flukso devices are installed 
      in <b>@usercounter</b> households. The following chart shows their
      aggregate electricity consumption.',
      array(
        '@devcounter'  => $devcounter,
        '@usercounter' => $usercounter)));

  $output .= "<br>";

  //Chart
  $chart = _logger_get_chart_params($interval, $type);
  $chart->def  .= _logger_chart_def(0, AGG_DB_PATH, $chart->factor);
  $chart->line .= _logger_chart_line(0, BLUE, t('All'));

  _logger_create_chart_file($chart);

  $output .= theme('chart', $chart->file_path, 'overview');

  return $output;
}

function _logger_get_chart_params($interval, $type, $unformatted_unit = 'watt') {

  $params = new stdClass();

  //generate random number for the png chart so that the browser doesn't use the cached one, use cron to clean up the dir hourly
  $unique_id = md5(uniqid());

  //Default
  $params->unit = 'watt';
  $params->factor = 3600; // 1Wh/s = 3600 W
  $params->data_path = DATA_PATH;
  $params->file_path = GRAPH_PATH . "/$interval/$unique_id.png";
  $params->line = ' COMMENT:"\s" ';
  $params->def = '';

  switch ($interval) {
    case 'hour':
      $params->start = 'end-1h';
      break;

    case 'day':
      $params->start = 'end-1d';
      break;

    case 'month':
      $params->start = 'end-60d';
      break;

    case 'year':
      $params->start = 'end-1y';
      break;

    case 'night':
      $params->start = 'end-60d';
      $params->data_path = DATA_PATH . "/night";
      break;
  }

  switch ($type) {
    case 'electricity':
      switch ($unformatted_unit) {
        case 'kw':
          $params->unit = 'kW';
          $params->factor = 0.001;
          break;

        case 'kwh':
          $params->unit = 'kWh/year';
          $params->factor = 31536;
          break;

        case 'eur':
          $params->unit = 'euro/year';
          $params->factor = 5676; // 18 EURcent/kWh
          break;

        case 'aud':
          $params->unit = 'aud/year';
          $params->factor = 5991; // 19 AUDcent/kWh
          break;
      }
  }
  return $params;
}

/**
 * Returns an array containing all sensors either owned by the user or selected
 * by him to be plotted on the chart.
 * 
 * @param $type       The type of sensors to be returned.
 * @param $function   The function of the sensors to be returned.
 * @return the array of user sensors.
 */
function _logger_get_user_sensors($type, $function) {

  global $user;
  $sensors = array();

  $sql = "
    SELECT
      lm.uid,
      '%s' AS username,
      lm.meter,
      lm.function,
      lm.unit,
      lu.private
    FROM
      {logger_meters} lm
      INNER JOIN {logger_users} lu ON lm.uid = lu.uid
    WHERE
      lm.uid = %d AND
      lm.type = '%s' AND
      lm.function IS NOT NULL
    ORDER BY
      lm.function";

  $result = db_query($sql, $user->name, $user->uid, $type);

  while ($sensor = db_fetch_object($result)) {
    $sensors[] = $sensor;
  }

  //TODO: If the user has multiple sensors, should they all be aggregated?

  if (user_access('logger')) {

    $sql = "
      SELECT
        u.uid,
        u.name AS username,
        lm.meter,
        lm.function,
        lm.unit,
        lu.private
      FROM
        ((({users} u
        INNER JOIN {user_relationships} ur ON u.uid = ur.requestee_id)
        INNER JOIN {user_relationship_types} urt ON ur.rtid = urt.rtid)
        INNER JOIN {logger_meters} lm ON u.uid = lm.uid)
        INNER JOIN {logger_users} lu ON u.uid = lu.uid
      WHERE
        ur.requester_id = %d AND
        urt.name = '%s' AND
        lm.type = '%s' AND
        lm.function IS NOT NULL
      ORDER BY
        ur.rid";

    $result = db_query($sql, $user->uid, 'subscription', $type);

    while($sensor = db_fetch_object($result)) {
      $sensors[] = $sensor;
    }
  }
  return $sensors;
}

/**
 * Returns the user timezone formatted for display.
 *
 * @return the formatted timezone.
 */
function _logger_get_formatted_timezone() {

  global $user;

  if ($user->uid) {
    $offset = $user->timezone;

  } else {
    //Default: GMT+2:00
    $offset = 2 * 60 * 60;
  }

  $hours = gmdate('h:i', abs($offset));

  if ($offset > 0) {
    $signal = '-';

  } elseif ($offset < 0) {
    $signal = '+';

  } else {
    $signal = '';
    $hours = '';
  }

  return "GMT$signal$hours";
}

function _logger_add($uid) {

  global $user;

  $sql = "SELECT rtid FROM {user_relationship_types} WHERE name = '%s'";
  $rtid = db_result(db_query($sql, 'subscription'));

  $sql = "
    SELECT
      COUNT(rid),
      MAX(rid)
    FROM
      {user_relationships}
    WHERE
      requester_id = %d AND
      rtid = %d
    GROUP BY
      rtid";

  $result = db_fetch_array(db_query($sql, $user->uid, $rtid));

  // don't allow users to add themselves
  if ($uid != $user->uid) { 

    // max subscriptions = 4
    if ($result['COUNT(rid)'] < 4) {
      user_relationships_request_relationship($user->uid, $uid, $rtid, TRUE);

    } else {
      //check whether the requested relationship doesn't already exist

      $sql = "
        SELECT
          rid
        FROM
          {user_relationships}
        WHERE
          requester_id = %d AND
          requestee_id = %d AND
          rtid = %d";
      
      if (!db_result(db_query($sql, $user->uid, $uid, $rtid))) {

        //if not, delete the most recently added relationship and replace it with the newly selected one

        $sql = "DELETE FROM {user_relationships} WHERE rid = %d";
        db_query($sql, $result['MAX(rid)']);

        user_relationships_request_relationship($user->uid, $uid, $rtid, TRUE);
      }
    }
    _logger_cache_clear('fluksonians');
  }

  $destination = drupal_get_destination();
  drupal_goto($destination);
}

function _logger_remove($rid) {

  global $user;

  //check whether the to-be-deleted relationship was created by the same user
  
  $sql = "SELECT requester_id FROM {user_relationships} WHERE rid = %d";
  
  if ($user->uid == db_result(db_query($sql, $rid))) {
    db_query("DELETE FROM {user_relationships} WHERE rid = %d", $rid);

  } else {
    watchdog('relationships', 'attempt to delete rid %rid by non-authorized user %uid', array('%rid' => $rid, '%uid' => $user->uid), WATCHDOG_ERROR);
  }

  _logger_cache_clear('fluksonians');

  $destination = drupal_get_destination();
  drupal_goto($destination);
}

function _logger_unit($unit) {

  global $user;

  //hardcoded type

  $sql = "
    UPDATE
      {logger_meters}
    SET
      unit = '%s'
    WHERE
      uid = %d AND
      type = '%s' AND
      function IS NOT NULL";

  db_query($sql, $unit, $user->uid, 'electricity');

  _logger_cache_clear('unit');

  $destination = drupal_get_destination();
  drupal_goto($destination);
}

/**
 * Clear the specific (per user) cache entry in the {cache_block} table.
 */
function _logger_cache_clear($delta) {

  global $theme;

  //the theme variable isn't set on these callbacks so force it
  $theme = 'flukso';

  $sql = "
    SELECT
      *
    FROM
      {blocks}
    WHERE
      module = '%s' AND
      delta = '%s' AND
      theme = '%s'";

  $block = db_fetch_object(db_query($sql, 'logger', $delta, 'flukso'));

  $cid = _block_get_cache_id($block);

  // prevent the whole chache_block being cleared when _block_get_cache_id returns an empty string (e.g. uid = 1)
  if ($cid != '') {
    cache_clear_all($cid, 'cache_block');
  }
  //watchdog('block_cache', '%cid | %cache', array('%cid' => $cid, '%cache' => variable_get('block_cache', 100)), WATCHDOG_DEBUG);
}

/**
 * Implementation of hook_user() for logger.
 * Flush the fluksonians block entries in the block cache.
 */
function logger_user($op) {
  switch($op) {
    // new user is being inserted into the database
    case 'insert':
      // flush the fluksonians block entries
      cache_clear_all('logger:fluksonians', 'cache_block', TRUE);
      break;
  }
}

function logger_theme() {

  return array(
    'chart' => array(
      'arguments' => array(
        'chart' => NULL),
    ),

    'overview_topic' => array(
      'arguments' => array(
        'title' => NULL,
        'body' => NULL,
        'link' => NULL),
    ),

    'logger_item_list' => array(
      'arguments' => array(
        'items' => NULL,
        'title' => NULL),
    ),

    'logger_account_devices' => array(
      'arguments' => array(
        'form' => NULL),
      'file'      => 'logger.admin.inc',
    ),

    'logger_account_devices_list' => array(
      'arguments' => array(
        'items' => NULL),
      'file'      => 'logger.admin.inc',
    ),

    'logger_account_sensors_list' => array(
      'arguments' => array(
        'items' => NULL),
      'file'      => 'logger.admin.inc',
    ),
  );
}

/**
 * Theming the chart.
 */
function theme_chart($chart_file_path, $context) {

  /*
  $primary = array(
    l(t('Electricity'), "$context/electricity")
  );

  $output .= theme_item_list($primary,   NULL, 'ul', array('class' => 'tabs primary'));
  */
  
  $secondary = array(
    l(t('Hour'),  "$context/electricity/hour"),
    l(t('Day'),   "$context/electricity/day"),
    l(t('Month'), "$context/electricity/month"),
    l(t('Year'),  "$context/electricity/year"),
    //l(t('Night'), "$context/electricity/night")
  );

  $output .= theme_item_list($secondary, NULL, 'ul', array('class' => 'tabs secondary'));

  $output .= '
    <p id="chart">
      <img src="'. base_path() . $chart_file_path .'" alt="Flukso"/>
    </p>';

  return $output;
}

function theme_overview_topic($title, $body, $link = NULL) {

  if($title) {
    $output .= '<br><h3 class="node-headline">' . $title . '</h3>';
  }
  
  $output .= "<p> $body </p>";

  if($link) {
    $output .= '<p>' . l(t('read more'), $link) . '</p>';
  }

  return $output;
}

function logger_block($op = 'list', $delta = 0, $edit = array()) {

  global $user;

  switch ($op) {
    case 'list':
      $blocks['fluksonians']['info'] = t('Fluksonians');
      $blocks['fluksonians']['status'] = TRUE;
      $blocks['fluksonians']['region'] = 'content';
      $blocks['fluksonians']['weight'] = 1;
      $blocks['fluksonians']['pages'] = 'logger/\nlogger/*';
      $blocks['fluksonians']['cache'] = BLOCK_CACHE_PER_USER;

      $blocks['unit']['info'] = t('Unit');
      $blocks['unit']['status'] = TRUE;
      $blocks['unit']['region'] = 'content';
      $blocks['unit']['weight'] = 2;
      $blocks['unit']['pages'] = 'logger/\nlogger/*';
      $blocks['unit']['cache'] = BLOCK_CACHE_PER_USER;

      $blocks['posts']['info'] = t('Recent blog posts');
      $blocks['posts']['status'] = TRUE;
      $blocks['posts']['region'] = 'right';
      $blocks['posts']['weight'] = 3;
      $blocks['posts']['pages'] = '<front>\nlogger/\nlogger/*';
      $blocks['posts']['cache'] = BLOCK_CACHE_GLOBAL;

      return $blocks;

    case 'view':

      if ($delta == 'fluksonians' && user_access('logger')) {

        $block['content'] = drupal_get_form('_logger_fluksonians_form');

      } elseif ($delta == 'unit' && user_access('logger')) {

        $block['content'] = drupal_get_form('_logger_units_form');

      } elseif ($delta == 'posts' && user_access('access content')) {

        $block = _logger_create_recent_blogs_block();
      }

      return $block;
  }
}

function _logger_create_recent_blogs_block() {

  $block = array();

  $sql = "
    SELECT
      n.nid,
      n.title,
      n.created
    FROM
      {node} n
    WHERE
      n.type = 'blogpost' AND
      n.status = 1
    ORDER BY
      n.created DESC";

  $result = db_query_range(db_rewrite_sql($sql), 0, 5);
  $node_title_list = node_title_list($result);

  if ($node_title_list) {
    $block['subject'] = t('Recent blog posts');
    $block['content'] = $node_title_list;
    $block['content'] .= theme('more_link', url('blog'), t('Read the latest blog entries.'));
  }

  return $block;
}

/**
 * Implementing a simple non-bulleted list for the logger_block
 */
function theme_logger_item_list($items, $title = NULL) {
  $output = '';
  foreach ($items as $item) {
    $output .= $item . '<br/>';
  }
  return $output;
}

/**
 * Generates the fluksonians block form.
 */
function _logger_fluksonians_form() {

  global $user;
  $destination = drupal_get_destination();

  $sql = "
    SELECT
      u.uid,
      u.name
    FROM
      ({users} u
      INNER JOIN {users_roles} ur ON u.uid = ur.uid)
      INNER JOIN {role} r ON ur.rid = r.rid
    WHERE
      r.name = '%s' AND
      NOT u.uid = %d
    ORDER BY
      u.name";

  $fluksonians = db_query($sql, 'fluksonian', $user->uid);

  $sql = "
    SELECT
      u.uid,
      u.name,
      ur.rid
    FROM
      ({users} u
      INNER JOIN {user_relationships} ur ON u.uid = ur.requestee_id)
      INNER JOIN {user_relationship_types} urt ON ur.rtid = urt.rtid
    WHERE
      ur.requester_id = %d AND
      urt.name = '%s'
    ORDER BY
      u.name";

  $subscriptions = db_query($sql, $user->uid, 'subscription');

  $i = 0;
  $rows = array();
  $row = array();
  $subscription = db_fetch_object($subscriptions);

  while ($fluksonian = db_fetch_object($fluksonians)) {

    if ($i > 3) {
      $rows[] = $row;
      $row = array();
      $i = 0;
    }

    if ($fluksonian->uid == $subscription->uid) {
      $row[] = l('[x]', 'logger/remove/'. $subscription->rid, array('attributes' => array('title' => "unsubscribe from ". $subscription->name ."'s stream"), 'query' => $destination, 'alias' => TRUE)) .' '. l($subscription->name, 'user/'. $subscription->uid, array('alias' => FALSE));
      $subscription = db_fetch_object($subscriptions);

    } else {
      $row[] = l('[+]', 'logger/add/'. $fluksonian->uid,
              array('attributes' => array('title' => "subscribe to ". $fluksonian->name ."'s stream"),
                  'query' => $destination, 'alias' => TRUE)) .' '. l($fluksonian->name, 'user/'. $fluksonian->uid, array('alias' => FALSE));
    }
    $i++;
  }
  $rows[] = $row;

  $form['fluksonians'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Fluksonians'),
    '#description' => t('Select the Fluksonians you wish to add to [+] or clear from [x] the chart.'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );

  $form['fluksonians']['list'] = array(
    '#type'    => 'item',
    //'#title' => t('Title'),
    '#value'   => theme('table', array(), $rows),
  );

  return $form;
}

/**
 * Generates the units block form.
 */
function _logger_units_form() {

  global $user;

  //pass along our current destination in the query string so that logger_add and logger_remove can return after processing their task
  $destination = drupal_get_destination();

  //hardcoded the type parameter for now

  $sql = "
    SELECT DISTINCT
      unit
    FROM
      {logger_meters}
    WHERE
      uid = %d AND
      type = '%s'";

  $unit = db_result(db_query($sql, $user->uid, 'electricity'));

  $items = array();
  $items[0] = l('watt', 'logger/unit/watt', array('attributes' => array('title' => "switch to watt"), 'query' => $destination, 'alias' => TRUE));
  $items[1] = l('kWh/year', 'logger/unit/kwh', array('attributes' => array('title' => "switch to kWh/year"), 'query' => $destination, 'alias' => TRUE));
  $items[2] = l('euro/year [@ 0.18eur/kWh]', 'logger/unit/eur', array('attributes' => array('title' => "switch to euro/year"), 'query' => $destination, 'alias' => TRUE));
  $items[3] = l('aud/year [@ 0.19aud/kWh]', 'logger/unit/aud', array('attributes' => array('title' => "switch to aud/year"), 'query' => $destination, 'alias' => TRUE));

  // 'unlink' the currently selected unit option
  switch ($unit) {
    case 'watt':
      $items[0] = 'watt';
      break;

    case 'kwh':
      $items[1] = 'kWh/year';
      break;

    case 'eur':
      $items[2] = 'euro/year [@ 0.18eur/kWh]';
      break;

    case 'aud':
      $items[3] = 'aud/year [@ 0.19aud/kWh]';
      break;
  }

  $form['units'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Unit'),
    '#description' => t('Select the chart unit.'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );

  $form['units']['list'] = array(
    '#type'    => 'item',
    //'#title' => t('Title'),
    '#value'   => theme('logger_item_list', $items),
  );

  return $form;
}

function logger_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'user_login') {
    $form['#redirect'] = 'logger';
    $form['name']['#size'] = 20;
    $form['pass']['#size'] = 20;
  }
}

/**
 * Access callback ensuring the user account tabs are visible only to the owner.
 *
 * @param $permission Required permission to view the item.
 * @param $account    A user object.
 */
function _logger_account_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the sensor is accessible only to the owner.
 */
function _logger_sensor_access($permission, $meter) {

  $sql = "SELECT uid FROM {logger_meters} WHERE meter = '%s'";

  $sensor = db_fetch_object(db_query($sql, $meter));

  return ($sensor->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Access callback ensuring the device is accessible only to the owner.
 */
function _logger_device_access($permission, $serial) {

  $sql = "SELECT uid FROM {logger_devices} WHERE serial = %d";

  $device = db_fetch_object(db_query($sql, $serial));

  return ($device->uid == $GLOBALS['user']->uid && user_access($permission));
}

function logger_cron() {

  //Delete png files
  exec('rm ' . GRAPH_PATH . '/hour/*');
  exec('rm ' . GRAPH_PATH . '/day/*');
  exec('rm ' . GRAPH_PATH . '/month/*');
  exec('rm ' . GRAPH_PATH . '/year/*');
  exec('rm ' . GRAPH_PATH . '/night/*');

  _logger_aggregate();
}

/**
 * Aggregates power consumption of all users.
 */
function _logger_aggregate() {

  $sql = "
    SELECT
      SUM(m.value) AS total
    FROM
      {logger_meters} m
    WHERE
      m.type = '%s' AND
      m.unit = '%s' AND
      m.function IS NOT NULL";

  $aggregation = db_fetch_object( db_query($sql, 'electricity', 'watt'));

  if (!file_exists(AGG_DB_PATH)) {

    _logger_create_aggregate_rrd(2 * $aggregation->total);
  }

  _logger_update_aggregate_rrd($aggregation->total);
}

/**
 * Creates aggregate power consumption RRD database.
 *
 * @param $max  The maximum valid value.
 */
function _logger_create_aggregate_rrd($max) {

  $step = 15 * MINUTE;
  $timeout = 1 * DAY;
  $start_time = 1199487600; //04 Jan 2008 23:00:00 GMT

  $command = RRDTOOL . ' create ' . AGG_DB_PATH . ' ' .
    "--start $start_time " .
    "--step $step " .

    "DS:meter:DERIVE:$timeout:0:$max " .

    _logger_rra_average( 15 * MINUTE,   2 * DAY,    $step) .
    _logger_rra_average( 30 * MINUTE,   2 * DAY,    $step) .
    _logger_rra_average(  1 * HOUR,     7 * DAY,    $step) .
    _logger_rra_average(  1 * DAY,      2 * MONTH,  $step) .
    _logger_rra_average(  1 * WEEK,    10 * YEAR,   $step);

  exec($command);
}

/**
 * Creates an RRA tag of an RRD chart.
 *
 * @param $frequency    The period of time whose results are averaged.
 * @param $storage_time The period of time during when the averages are stored.
 * @param $step         The period of time within which a new value is received.
 * @return the RRA definition.
 */
function _logger_rra_average($frequency, $storage_time, $step) {

  $f = $frequency / $step;
  $s = $storage_time / $frequency;

  return "RRA:AVERAGE:0.5:$f:$s ";
}

/**
 * Updates the database with a new power consmumption aggregate.
 *
 * @param $total the power consmumption aggregate.
 */
function _logger_update_aggregate_rrd($total) {

  $tz = _logger_get_formatted_timezone();
  $now = time();

  $command = "TZ=\"$tz\" " . RRDTOOL . ' update ' . AGG_DB_PATH . " $now:$total";

  exec($command);
}

/**
 * Creates a DEF tag of an RRD chart.
 *
 * @param $i          The meter index.
 * @param $file_path  The data file path.
 * @param $factor     The unit conversion factor.
 * @param $shifted    Whether the series are to be shifted to the left, in order to be hidden.
 * @return the RRD DEF tag.
 */
function _logger_chart_def($i, $file_path, $factor, $shifted = FALSE) {

  $def =
    "DEF:data$i"   . '='. $file_path . ':meter:AVERAGE ' .
    "CDEF:meter$i" . '='. "data$i,$factor,* ";

  $def .= $shifted ?
    "SHIFT:meter$i" . ':-31556926 ' :

    "VDEF:min$i"  . "=meter$i" . ',MINIMUM ' .
    "VDEF:max$i"  . "=meter$i" . ',MAXIMUM ' .
    "VDEF:avg$i"  . "=meter$i" . ',AVERAGE ' .
    "VDEF:last$i" . "=meter$i" . ',LAST ';

  return $def;
}

/**
 * Creates a LINE tag of an RRD chart.
 *
 * @param $i        The meter index.
 * @param $color    The series color.
 * @param $caption  The series caption.
 * @param $shifted  Whether the series are to be shifted to the left, in order to be hidden.
 * @return the RRD LINE tag.
 */
function _logger_chart_line($i, $color, $caption, $shifted = FALSE) {

  $caption = substr($caption . '               ', 0, 15);
  
  $line =
    "LINE1:meter$i" . "#$color:" . "\"$caption\" ";

  $line .= $shifted ?
    'COMMENT:"min\:  prv" ' .
    'COMMENT:"\tmax\:  prv" ' .
    'COMMENT:"\tavg\:  prv" ' .
    'COMMENT:"\tlast\:  prv\l" ' :

    "GPRINT:min$i"  . ':"min\:%5.0lf" '.
    "GPRINT:max$i"  . ':"\tmax\:%5.0lf" '.
    "GPRINT:avg$i"  . ':"\tavg\:%5.0lf" '.
    "GPRINT:last$i" . ':"\tlast\:%5.0lf\l" ';

  return $line;
}

/**
 * Creates a RRD chart file.
 *
 * @param $chart  The chart properties.
 */
function _logger_create_chart_file($chart) {

  $tz = _logger_get_formatted_timezone();

  //insert the TZ prior to launching rrdtool to obtain a proper time conversion
  $command = "TZ=\"$tz\" " . RRDTOOL . ' graph ' . $chart->file_path . ' ' .
    '--start ' . $chart->start . ' ' .
    '--vertical-label ' . $chart->unit . ' ' .
    '--lower-limit 0  ' .
    '--width 500 ' .
    '--height 350 ' .
    '--slope-mode ' . 
    '--units-exponent 0 ' .
    '--font LEGEND:8: ' .
    $chart->def . ' ' .
    $chart->line;

  exec($command);
}