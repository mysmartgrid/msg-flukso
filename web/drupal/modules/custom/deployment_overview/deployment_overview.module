<?php
// $Id$

//Device states
define('UNINSTALLED',  t('Uninstalled'));
define('NO_HEARTBEAT', t('No Heartbeat'));
define('CORRUPTED',    t('Corrupted Heartbeat'));
define('WORKING',      t('Working'));


/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function deployment_overview_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#deployment_overview":
      $output = '<p>'.t("Informs Flukso devices' deployment statuses.").'</p>';
      break;
  }
  return $output;
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the onthisdate module
 */
function deployment_overview_perm() {
  return array('device deployment overview');
}

/**
 * Menu items.
 */
function deployment_overview_menu() {
      
  $items = array();

  $items['deploymentoverview'] = array(
    'title' => 'Deployment Overview',
    'page callback' => 'deployment_overview_list',
    'access arguments' => array('device deployment overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['devicecheckup'] = array(
    'title' => 'Device Check Up',
    'page callback' => 'deployment_overview_show_checkup',
    'access arguments' => array('device deployment overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function deployment_overview_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function deployment_overview_list() {

  $headers = array(
    array('data' => t('Device'),        'field' => 'serial', 'sort'=> 'desc'),
    array('data' => t('User'),          'field' => 'name',   'sort'=> 'desc'),
    array('data' => t('Latest Update'), 'field' => 'latest', 'sort'=> 'desc'),
    array('data' => t('State'),         'field' => 'state',  'sort'=> 'desc')
  );

  $data = _get_devices($headers);

  if($data){
    $output = theme('table', $headers, $data);
    $output .= theme('pager', NULL, $limit, 0);
  }

  return $output;
}

function _get_devices($headers = NULL, $limit = 15, $serial = NULL) {

  global $user;
  $tzdif = $user->timezone / (60 * 60);
  $tz = $tzdif < 0 ? "'$tzdif:00'" : "'+$tzdif:00'";

  $output = '';

  $states = array(
	 0 => UNINSTALLED,
	 1 => NO_HEARTBEAT,
	 2 => CORRUPTED,
	 3 => WORKING);

  $sql = "
    SELECT
      d.serial AS serial,
      u.name AS name,
      CONVERT_TZ(IF(d.access = 0, FROM_UNIXTIME(d.created), FROM_UNIXTIME(d.access)),'+00:00',$tz) AS latest,
      IF(u.uid = 0, 0,
        IF(SYSDATE() > (FROM_UNIXTIME(d.access) + INTERVAL 2 HOUR), 1,
          IF(EXISTS(
            SELECT 
              1
            FROM
	      {logger_meters} m
            WHERE
              d.device = m.device AND
              m.type = 'electricity' AND
              SYSDATE() > (FROM_UNIXTIME(m.access) + INTERVAL 2 HOUR)), 2, 3
      ))) AS state
    FROM
      {logger_devices} d
      LEFT OUTER JOIN {users} u ON d.uid = u.uid";

  $sql_count = NULL;
  $args = array();
  
  if($serial) {
    $sql .= " WHERE d.serial = %d";
    $args[] = $serial;

    $sql_count = "
      SELECT
        count(*)
      FROM
        {logger_devices} d";

    $sql_count = db_rewrite_sql($sql_count); 
  }

  if ($headers) {
    $sql .= tablesort_sql($headers);
  }

  $result = pager_query($sql, $limit, 0, $sql_count, $args);
  $data = array();

  while($entry = db_fetch_array($result)) {
      
    $state_id = $entry['state'];

    $data[] = array(
      'serial' => $entry['serial'],
      'name' => $entry['name'],
      'latest' => $entry['latest'], 
      'state' => $states[$state_id]);
  }
  return $data;
}

function deployment_overview_show_checkup() {
  $output .= drupal_get_form('deployment_overview_checkup_form');
  return $output;
}

function deployment_overview_checkup_form() {
    
  $form['serial'] = array(
    '#type' => 'textfield',
    '#title' => t("Serial"),
    '#size' => 32,
    '#maxlength' => 40,
    '#required' => 1,
    '#description' => t('Enter the device serial number you want to check up')
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Check Up")
  );
 
  return $form;
}

function deployment_overview_checkup_form_submit($form, &$form_state) {

  $serial = $form_state['values']['serial'];
  $result = _get_devices(NULL, 1, $serial);

  if (empty($result)) {
    drupal_set_message(t('No device was found with such serial number.'));

  } else {
    $device = $result[0];
    $state = $device['state'];

    drupal_set_message(t('Status: ') . $state);

    if ($state == UNINSTALLED) {
      drupal_set_message(t('This device has not yet been installed.'));

    } else {
      $latest = array('%latest' => $device['latest']);

      if ($state == NO_HEARTBEAT) {
        drupal_set_message(t('No heartbeat has been received from this device since %latest.', $latest));

      } else if ($state == CORRUPTED) {
        drupal_set_message(t('This device has sent an invalid measurement at %latest.', $latest));

      } else if ($state == WORKING) {
        drupal_set_message(t('This device is working fine. Latest heartbeat received at %latest.', $latest));
      }
    }
  }
}
