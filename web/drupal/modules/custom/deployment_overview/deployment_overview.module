<?php

/**
 * This module allows the user to see devices' statuses.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//Device states
define('UNINSTALLED',   t('Uninstalled'));
define('NO_HEARTBEAT',  t('No Heartbeat'));
define('CORRUPTED',     t('Corrupted Heartbeat'));
define('WORKING',       t('Working'));

function deployment_overview_help($path, $arg) {

  $output = '';

  switch ($path) {
    case "admin/help#deployment_overview":
      $output = '<p>'.t("Informs Flukso devices' deployment statuses.").'</p>';
      break;
  }

  return $output;
}

function deployment_overview_perm() {
  return array('device deployment overview');
}

function deployment_overview_settings_access($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

function deployment_overview_menu() {

  $items = array();

  $items['deploymentoverview'] = array(
    'title'             => 'Deployment Overview',
    'page callback'     => 'deployment_overview_list_page',
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_NORMAL_ITEM
  );

  $items['devicecheckup'] = array(
    'title'             => 'Device Check Up',
    'page callback'     => 'deployment_overview_checkup_page',
    'access arguments'  => array('device deployment overview'),
    'type'              => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Builds the device deployment overview page.
 *
 * @return the device deployment overview page.
 */
function deployment_overview_list_page() {

  $headers = array(
    array('data' => t('Device'),        'field' => 'serial', 'sort'=> 'desc'),
    array('data' => t('User'),          'field' => 'name',   'sort'=> 'desc'),
    array('data' => t('Latest Update'), 'field' => 'latest', 'sort'=> 'desc'),
    array('data' => t('State'),         'field' => 'state',  'sort'=> 'desc')
  );

  $limit = 15;

  $data = _deployment_overview_get_devices($headers, $limit);

  if($data){
    $output = theme('table', $headers, $data);
    $output .= theme('pager', NULL, $limit, 0);
  }

  return $output;
}

/**
 * Returns the list of user devices.
 *
 * @param $headers The field headers (optional).
 * @param $limit   The number of items in a table page (optional).
 * @param $serial  The serial number for selecting a single device (optionally).
 * @return the array of user devices.
 */
function _deployment_overview_get_devices($headers = NULL, $limit = 15, $serial = NULL) {

  global $user;
  $tzdif = $user->timezone / 3600; //divided by 1 hour
  $tz = $tzdif < 0 ? "'$tzdif:00'" : "'+$tzdif:00'";

  $now = time();
  $heartbeat_timeout = 7200; //2 hs

  $uninstalled_id  = 0;
  $no_heartbeat_id = 1;
  $corrupted_id    = 2;
  $working_id      = 3;

  $states = array(
    $uninstalled_id  => UNINSTALLED,
    $no_heartbeat_id => NO_HEARTBEAT,
    $corrupted_id    => CORRUPTED,
    $working_id      => WORKING
  );

   $sql = "
     SELECT
        d.serial,
        d.name,

        CONVERT_TZ( FROM_UNIXTIME(
          IF(d.corrupted > 0, d.corrupted, IF(d.access > 0, d.access, d.created))
        ), '+00:00', $tz) AS latest,

        IF(d.uid = 0, $uninstalled_id,
          IF(d.corrupted > 0, $corrupted_id,
            IF($now > (d.access + $heartbeat_timeout), $no_heartbeat_id, $working_id)
          )
        ) AS state

      FROM
        (SELECT
          d.uid AS uid,
          u.name AS name,
          d.serial AS serial,
          d.created AS created,
          d.access AS access,
          MAX(m.corrupted) AS corrupted
        FROM
          logger_meters m,
          logger_devices d
          LEFT OUTER JOIN users u ON u.uid = d.uid
        WHERE
          m.device = d.device
        GROUP BY
          d.uid,
          d.serial,
          d.created,
          d.access ) d";

  $args = array();

  if($serial) {
    $sql .= " WHERE d.serial = %d";
    $args[] = $serial;
    $sql_count = NULL;

  } else {
    $sql_count = "SELECT COUNT(*) FROM {logger_devices}";
    $sql_count = db_rewrite_sql($sql_count);
  }

  if ($headers) {
    $sql .= tablesort_sql($headers);
  }

  $result = pager_query($sql, $limit, 0, $sql_count, $args);
  $data = array();

  while($entry = db_fetch_array($result)) {

    $state_id = $entry['state'];

    $data[] = array(
      'serial' => $entry['serial'],
      'name'   => $entry['name'],
      'latest' => $entry['latest'],
      'state'  => $states[$state_id]
    );
  }
  return $data;
}

/**
 * Builds the device status checkup page.
 *
 * @return the device status checkup page.
 */
function deployment_overview_checkup_page() {
  $output .= drupal_get_form('deployment_overview_checkup_form');
  return $output;
}

function deployment_overview_checkup_form() {

  $form['serial'] = array(
    '#type'        => 'textfield',
    '#title'       => t("Serial"),
    '#size'        => 32,
    '#maxlength'   => 40,
    '#required'    => 1,
    '#description' => t('Enter the device serial number you want to check up')
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t("Check Up")
  );
 
  return $form;
}

function deployment_overview_checkup_form_submit($form, &$form_state) {

  $serial = $form_state['values']['serial'];
  $result = _deployment_overview_get_devices(NULL, 1, $serial);

  if (empty($result)) {
    drupal_set_message(t('No device was found with such serial number.'));

  } else {
    $device = $result[0];
    $state = $device['state'];

    drupal_set_message(t('Status: ') . $state);

    if ($state == UNINSTALLED) {
      drupal_set_message(t('This device has not yet been installed.'));

    } else {
      $latest = array('%latest' => $device['latest']);

      if ($state == NO_HEARTBEAT) {
        drupal_set_message(t('No heartbeat has been received from this device since %latest.', $latest));

      } else if ($state == CORRUPTED) {
        drupal_set_message(t('This device has sent an invalid measurement at %latest.', $latest));

      } else if ($state == WORKING) {
        drupal_set_message(t('This device is working fine. Latest heartbeat received at %latest.', $latest));
      }
    }
  }
}