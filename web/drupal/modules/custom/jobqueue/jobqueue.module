<?php

/**
 * @file
 * This module provides an interface with the Job Queue System.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//DEBUG
//error_reporting(E_ALL);
//ini_set('display_errors', TRUE);
//ini_set('display_startup_errors', TRUE);


/**
 * Forwards a remote execution to a JobQueue System.
 * 
 * @param $algorithm The JobQueue target algorithm.
 * @param $data      The execution data.
 * @return the job UUID.
 */
function jobqueue_produce($algorithm, $data) {

  require_once libraries_get_path('pda-pheanstalk') . '/pheanstalk_init.php';

  //TODO: use more workers
  $worker = variable_get('jobqueue_msg_worker1');

  $pheanstalk = new Pheanstalk($worker);

  $uuid = md5(uniqid());
  $payload = json_encode(array(
    array(
      'uuid' => $uuid,
      'type' => $algorithm
    ),
    array(
      'payload' => $data
    )));

  $pheanstalk
    ->useTube('default')
    ->put($payload);

  return $uuid;
}

/**
 * Sends an e-mail via the job queue system.
 *
 * @param $emails       The e-mail destinatary addresses, separated by space, new line char, or tab char.
 * @param $subject      The e-mail subject.
 * @param $body         The e-mail body.
 * @param $attachments  The e-mail attachments (optional).
 * @param $from         The e-mail sender address (optional).
 */
function jobqueue_send_email($emails, $subject, $body, $attachments = array(), $from = 'mySmartGrid <noreply@mysmartgrid.de>') {

  foreach (tokenize_string($emails) as $to) {

    $main_boundary = "email_part_boundary";
    $alternative_boundary = "email_alternative_boundary";

    $main_header =
      "To: <$to>\n" .
      "Sender: $from\n" .
      "MIME-Version: 1.0\n" .
      "Content-Type: multipart/related; boundary=\"$main_boundary\"";

    $parts =
      "--$main_boundary\n" .
      "Content-Type: multipart/alternative; boundary=\"$alternative_boundary\"\n\n" .

      "--$alternative_boundary\n" .
      "Content-Type: text/plain; charset=\"UTF-8\"\n" .
      "Content-Transfer-Encoding: 8bit\n" .
      "\n" .
      html2txt($body) . "\n" .

      "--$alternative_boundary\n" .
      "Content-Type: text/html; charset=\"UTF-8\"\n" .
      "Content-Transfer-Encoding: quoted-printable\n" .
      "\n" .
      $body . "\n" .

      "--$alternative_boundary--\n";

    foreach ($attachments as $attachment) {

      $parts .=
        "--$main_boundary\n" .
        "Content-Type: " . $attachment['content_type'] . "\n" .
        "Content-ID: " . $attachment['cid'] . "\n" .
        "Content-Size: " . $attachment['size'] . "\n" .
        "Content-Disposition: attachment;\n" .
        " filename=" . $attachment['file_name'] . "\n" .
        "Content-Transfer-Encoding: base64\n" .
        "\n" .
        chunk_split(base64_encode($attachment['content'])) . "\n";
    }
    $parts .= "--$main_boundary--";

    $mail = base64_encode("Header::$main_header|From::$from|To::$to|Subject::$subject|Body::$parts");

    // Needs the qworker running, add control mechanism in order to check and restart if not running
    jobqueue_produce("mail", $mail);
  }
}
