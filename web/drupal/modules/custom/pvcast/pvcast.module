<?php

/**
 * @file
 * This module provides an interface with the PVCast Service.
 *
 * Copyright (c) 2010 Fraunhofer Institut ITWM (www.itwm.fraunhofer.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

define('PVCAST_PATH', DRUPAL_ROOT . '/sites/all/modules/pvcast');
define('PVCAST_FORECAST_PATH', PVCAST_PATH . '/data');

/**
 * Queries the PV plant forecast for a period of time.
 *
 * @param $alias      The PV plant alias.
 * @param $start_time The forecast period start time.
 * @param $end_time   The forecast period end time.
 * @return the forecast data filtered by the parameters, as an array.
 */
function pvcast_query_forecast($alias, $start_time, $end_time) {

  $forecast = array();
  $file_path = PVCAST_FORECAST_PATH . "/$alias.json";
 
  if (!file_exists($file_path) || date('G', filemtime($file_path)) != date('G', time())) {
    pvcast_download_forecast($alias);
  }

  $content = json_decode(file_get_contents($file_path));
  if (!empty($content)) {

    foreach ($content as $values) {
      $time = $values[0];
      if ($time >= $start_time && $time <= $end_time) {
        $value = $values[1];
        $forecast[$time] = $value;
      }
    }
  }
  return $forecast;
}

/**
 * Gets a PV plant forecast.
 * 
 * @param $alias      The plant alias.
 * @return the server response in json format.
 */
function pvcast_get_forecast($alias) {

  return pvcast_request('GET', "/plants/alias/$alias/forecast");
}

/**
 * Creates a PV plant.
 * 
 * @param $alias      The plant alias.
 * @param $latitude   The plant latitude.
 * @param $longitude  The plant longitude.
 * @return the server response.
 */
function pvcast_create_plant($alias, $latitude, $longitude) {

  return pvcast_request('POST', '/plants',
    '{"plant":{"alias":"' . $alias . '","latitude":"' . $latitude . '","longitude":"' . $longitude . '"}}');
}

/**
 * Deletes a PV plant.
 * 
 * @param $alias      The plant alias.
 * @return the server response.
 */
function pvcast_delete_plant($alias) {

  unlink(PVCAST_FORECAST_PATH . "/$alias.json");
  return pvcast_request('DELETE', "/plants/alias/$alias");
}

/**
 * Updates a PV plant.
 * 
 * @param $alias      The plant alias.
 * @param $latitude   The plant latitude.
 * @param $longitude  The plant longitude.
 * @return the server response.
 */
function pvcast_update_plant($alias, $latitude, $longitude) {

  return pvcast_request('PUT', "/plants/alias/$alias",
    '{"plant":{"latitude":"' . $latitude . '","longitude":"' . $longitude . '"}}');
}

/**
 * Sends a request to myPowerGrid.
 *
 * @param $method  The HTTP method.
 * @param $path    The URL path.
 * @param $body    The request body (optional).
 * @return the server response.
 */
function pvcast_request($method, $path, $body = NULL) {

  $url = variable_get('pvcast_forecast_service_url') . "$path.json";
  $key = variable_get('pvcast_key');

  $options = array(
    'http' => array(
      'method' => $method,
      'header' =>
        "Content-type: application/json\r\n" .
        "X-API-KEY: $key\r\n"
    )
  );
  if ($body) {
    $options['http']['content'] = $body;
  }

  $context = stream_context_create($options);
  $content = file_get_contents($url, FALSE, $context);

  watchdog('pvcast.request', 'Request: %method %url using key: %key has returned %size characters.',
    array('%method' => $method, '%url' => $url, '%key' => $key, '%size' => strlen($content), WATCHDOG_NOTICE));

  return $content;
}

/**
 * Downloads a PV plant forecast to the data directory.
 *
 * @param $alias  The plant alias.
 */
function pvcast_download_forecast($alias) {

  $content = pvcast_get_forecast($alias);

  if (empty($content)) {
    watchdog('pvcast.forecast', 'Forecast for PV plant %alias downloaded from myPowerGrid is empty',
      array('%alias' => $alias), WATCHDOG_ERROR);
  }
  else {
    watchdog('pvcast.forecast', 'Forecast for PV plant %alias has been downloaded from myPowerGrid.',
      array('%alias' => $alias), WATCHDOG_NOTICE);

    $file_path = PVCAST_FORECAST_PATH . "/$alias.json";

    save_file($file_path, $content);
  }
}

function pvcast_cron() {
  rmoldfiles(PVCAST_FORECAST_PATH, DAY);
}
